From: Etienne Millon <etienne.millon@gmail.com>
Date: Wed, 25 May 2011 17:47:09 +0200
Subject: Remove code generated from vala

If source code is not fully rebuilt, it will be harder to sport issues
with it.
---
 src/Providers/music-tree.c               |  835 -----
 src/Widgets/gmpc-image-async.c           |  804 -----
 src/Widgets/gmpc-menu-item-rating.c      |  135 -
 src/Widgets/gmpc-progress.c              |  567 ---
 src/browsers/gmpc-metadata-browser2.c    | 5714 ------------------------------
 src/browsers/gmpc-nowplaying2.c          | 2003 -----------
 src/vala/gmpc-connection.c               |   92 -
 src/vala/gmpc-database-update-tracker.c  |  286 --
 src/vala/gmpc-easy-command.c             |  726 ----
 src/vala/gmpc-favorites.c                |  606 ----
 src/vala/gmpc-liststore-sort.c           |  187 -
 src/vala/gmpc-metadata-prefetcher.c      |  162 -
 src/vala/gmpc-mpddata-treeview-tooltip.c |  371 --
 src/vala/gmpc-paned-size-group.c         |  172 -
 src/vala/gmpc-plugin.c                   |  372 --
 src/vala/gmpc-rating.c                   |  282 --
 src/vala/gmpc-song-links.c               |  555 ---
 src/vala/gmpc-test-plugin.c              | 1591 ---------
 src/vala/gmpc-url-fetching-gui.c         |  327 --
 19 files changed, 0 insertions(+), 15787 deletions(-)
 delete mode 100644 src/Providers/music-tree.c
 delete mode 100644 src/Widgets/gmpc-image-async.c
 delete mode 100644 src/Widgets/gmpc-menu-item-rating.c
 delete mode 100644 src/Widgets/gmpc-progress.c
 delete mode 100644 src/browsers/gmpc-metadata-browser2.c
 delete mode 100644 src/browsers/gmpc-nowplaying2.c
 delete mode 100644 src/vala/gmpc-connection.c
 delete mode 100644 src/vala/gmpc-database-update-tracker.c
 delete mode 100644 src/vala/gmpc-easy-command.c
 delete mode 100644 src/vala/gmpc-favorites.c
 delete mode 100644 src/vala/gmpc-liststore-sort.c
 delete mode 100644 src/vala/gmpc-metadata-prefetcher.c
 delete mode 100644 src/vala/gmpc-mpddata-treeview-tooltip.c
 delete mode 100644 src/vala/gmpc-paned-size-group.c
 delete mode 100644 src/vala/gmpc-plugin.c
 delete mode 100644 src/vala/gmpc-rating.c
 delete mode 100644 src/vala/gmpc-song-links.c
 delete mode 100644 src/vala/gmpc-test-plugin.c
 delete mode 100644 src/vala/gmpc-url-fetching-gui.c

diff --git a/src/Providers/music-tree.c b/src/Providers/music-tree.c
deleted file mode 100644
index 4b25f6d..0000000
--- a/src/Providers/music-tree.c
+++ /dev/null
@@ -1,835 +0,0 @@
-/* music-tree.c generated by valac, the Vala compiler
- * generated from music-tree.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include "gmpc-extras.h"
-#include <glib/gi18n-lib.h>
-#include <plugin.h>
-#include <config1.h>
-#include <metadata.h>
-#include <gmpc-profiles.h>
-#include <libmpd/libmpdclient.h>
-#include <libmpd/libmpd.h>
-#include <gio/gio.h>
-
-#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
-#define __g_list_free_meta_data_free0(var) ((var == NULL) ? NULL : (var = (_g_list_free_meta_data_free (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _meta_data_free0(var) ((var == NULL) ? NULL : (var = (meta_data_free (var), NULL)))
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-#define __g_list_free_g_free0(var) ((var == NULL) ? NULL : (var = (_g_list_free_g_free (var), NULL)))
-typedef struct _GmpcProviderMusicTreeGetArtistArtData GmpcProviderMusicTreeGetArtistArtData;
-#define __g_list_free_g_object_unref0(var) ((var == NULL) ? NULL : (var = (_g_list_free_g_object_unref (var), NULL)))
-typedef struct _GmpcProviderMusicTreeGetAlbumCoverData GmpcProviderMusicTreeGetAlbumCoverData;
-
-struct _GmpcProviderMusicTreePrivate {
-	GRegex* image_filename;
-};
-
-struct _GmpcProviderMusicTreeGetArtistArtData {
-	int _state_;
-	GAsyncResult* _res_;
-	GSimpleAsyncResult* _async_result;
-	GmpcProviderMusicTree* self;
-	char* directory;
-	mpd_Song* song;
-	GmpcPluginMetaDataCallback callback;
-	gpointer callback_target;
-	GDestroyNotify callback_target_destroy_notify;
-	GList* list;
-	char* base_path;
-	char* path;
-	GFile* dir;
-	GList* queries;
-	char* ipath;
-	char* _tmp1_;
-	char* _tmp0_;
-	GFile* _tmp2_;
-	char* _tmp3_;
-	char* _tmp4_;
-	char* _tmp6_;
-	char* _tmp5_;
-	GFile* _tmp7_;
-	char* _tmp8_;
-	char* _tmp9_;
-	char* _tmp11_;
-	char* _tmp10_;
-	GFile* _tmp12_;
-	GFile* _tmp13_;
-	GFileInfo* e;
-	MetaData* item;
-	MetaData* _tmp14_;
-	GError * err;
-	GList* opath_collection;
-	GList* opath_it;
-	char* opath;
-	GList* _tmp15_;
-	GError * _inner_error_;
-};
-
-struct _GmpcProviderMusicTreeGetAlbumCoverData {
-	int _state_;
-	GAsyncResult* _res_;
-	GSimpleAsyncResult* _async_result;
-	GmpcProviderMusicTree* self;
-	char* directory;
-	mpd_Song* song;
-	GmpcPluginMetaDataCallback callback;
-	gpointer callback_target;
-	GDestroyNotify callback_target_destroy_notify;
-	GList* list;
-	char* base_path;
-	char* path;
-	GFile* dir;
-	GFileEnumerator* e;
-	GList* files;
-	MetaData* item;
-	char* _tmp0_;
-	MetaData* _tmp1_;
-	GList* info_collection;
-	GList* info_it;
-	GFileInfo* info;
-	GError * err;
-	GFile* pdir;
-	char* _tmp2_;
-	GFileEnumerator* pe;
-	GList* pfiles;
-	MetaData* pitem;
-	char* _tmp3_;
-	MetaData* _tmp4_;
-	GList* pinfo_collection;
-	GList* pinfo_it;
-	GFileInfo* pinfo;
-	GError * perr;
-	GList* _tmp5_;
-	GError * _inner_error_;
-};
-
-
-static gpointer gmpc_provider_music_tree_parent_class = NULL;
-static GmpcPluginMetaDataIfaceIface* gmpc_provider_music_tree_gmpc_plugin_meta_data_iface_parent_iface = NULL;
-
-#define use_transition_lp TRUE
-#define some_unique_name_lp VERSION
-#define GMPC_PROVIDER_MUSIC_TREE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_PROVIDER_TYPE_MUSIC_TREE, GmpcProviderMusicTreePrivate))
-enum  {
-	GMPC_PROVIDER_MUSIC_TREE_DUMMY_PROPERTY
-};
-static gint* gmpc_provider_music_tree_real_get_version (GmpcPluginBase* base, int* result_length1);
-static const char* gmpc_provider_music_tree_real_get_name (GmpcPluginBase* base);
-static void gmpc_provider_music_tree_real_set_priority (GmpcPluginMetaDataIface* base, gint priority);
-static gint gmpc_provider_music_tree_real_get_priority (GmpcPluginMetaDataIface* base);
-static void _g_list_free_meta_data_free (GList* self);
-static void gmpc_provider_music_tree_get_album_cover (GmpcProviderMusicTree* self, const char* directory, const mpd_Song* song, GmpcPluginMetaDataCallback callback, void* callback_target, GAsyncReadyCallback _callback_, gpointer _user_data_);
-static void gmpc_provider_music_tree_get_album_cover_finish (GmpcProviderMusicTree* self, GAsyncResult* _res_);
-static void gmpc_provider_music_tree_get_artist_art (GmpcProviderMusicTree* self, const char* directory, const mpd_Song* song, GmpcPluginMetaDataCallback callback, void* callback_target, GAsyncReadyCallback _callback_, gpointer _user_data_);
-static void gmpc_provider_music_tree_get_artist_art_finish (GmpcProviderMusicTree* self, GAsyncResult* _res_);
-static void gmpc_provider_music_tree_real_get_metadata (GmpcPluginMetaDataIface* base, const mpd_Song* song, MetaDataType type, GmpcPluginMetaDataCallback callback, void* callback_target);
-static void gmpc_provider_music_tree_get_artist_art_data_free (gpointer _data);
-static void gmpc_provider_music_tree_get_artist_art_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_);
-static void _g_list_free_g_free (GList* self);
-static gboolean gmpc_provider_music_tree_get_artist_art_co (GmpcProviderMusicTreeGetArtistArtData* data);
-static void gmpc_provider_music_tree_get_album_cover_data_free (gpointer _data);
-static void gmpc_provider_music_tree_get_album_cover_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_);
-static void _g_list_free_g_object_unref (GList* self);
-static gboolean gmpc_provider_music_tree_get_album_cover_co (GmpcProviderMusicTreeGetAlbumCoverData* data);
-static GObject * gmpc_provider_music_tree_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_provider_music_tree_finalize (GObject* obj);
-
-
-
-static gint* gmpc_provider_music_tree_real_get_version (GmpcPluginBase* base, int* result_length1) {
-	GmpcProviderMusicTree * self;
-	gint* result;
-	gint* _tmp0_;
-	self = (GmpcProviderMusicTree*) base;
-	result = (_tmp0_ = GMPC_PROVIDER_MUSIC_TREE_version, *result_length1 = G_N_ELEMENTS (GMPC_PROVIDER_MUSIC_TREE_version), _tmp0_);
-	return result;
-}
-
-
-static const char* gmpc_provider_music_tree_real_get_name (GmpcPluginBase* base) {
-	GmpcProviderMusicTree * self;
-	const char* result;
-	self = (GmpcProviderMusicTree*) base;
-	result = N_ ("Music Tree Provider");
-	return result;
-}
-
-
-static void gmpc_provider_music_tree_real_set_priority (GmpcPluginMetaDataIface* base, gint priority) {
-	GmpcProviderMusicTree * self;
-	self = (GmpcProviderMusicTree*) base;
-	cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "priority", priority);
-}
-
-
-static gint gmpc_provider_music_tree_real_get_priority (GmpcPluginMetaDataIface* base) {
-	GmpcProviderMusicTree * self;
-	gint result;
-	self = (GmpcProviderMusicTree*) base;
-	result = cfg_get_single_value_as_int_with_default (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "priority", 0);
-	return result;
-}
-
-
-static glong string_get_length (const char* self) {
-	glong result;
-	g_return_val_if_fail (self != NULL, 0L);
-	result = g_utf8_strlen (self, -1);
-	return result;
-}
-
-
-static void _g_list_free_meta_data_free (GList* self) {
-	g_list_foreach (self, (GFunc) meta_data_free, NULL);
-	g_list_free (self);
-}
-
-
-static void gmpc_provider_music_tree_real_get_metadata (GmpcPluginMetaDataIface* base, const mpd_Song* song, MetaDataType type, GmpcPluginMetaDataCallback callback, void* callback_target) {
-	GmpcProviderMusicTree * self;
-	GList* list;
-	char* id;
-	const char* directory;
-	const char* _tmp0_;
-	gboolean _tmp1_ = FALSE;
-	gboolean _tmp3_ = FALSE;
-	char* scheme;
-	GList* _tmp6_;
-	self = (GmpcProviderMusicTree*) base;
-	g_return_if_fail (song != NULL);
-	list = NULL;
-	id = gmpc_profiles_get_current (gmpc_profiles);
-	directory = NULL;
-	g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:79: Starting Query");
-	if (id != NULL) {
-		directory = gmpc_profiles_get_music_directory (gmpc_profiles, id);
-	}
-	_tmp0_ = NULL;
-	if (directory == NULL) {
-		_tmp0_ = "(null)";
-	} else {
-		_tmp0_ = directory;
-	}
-	g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:85: Got directory: %s", _tmp0_);
-	if (directory == NULL) {
-		_tmp1_ = TRUE;
-	} else {
-		_tmp1_ = string_get_length (directory) == 0;
-	}
-	if (_tmp1_) {
-		GList* _tmp2_;
-		g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:90: No Music directory specified");
-		callback ((_tmp2_ = list, list = NULL, _tmp2_), callback_target);
-		__g_list_free_meta_data_free0 (list);
-		_g_free0 (id);
-		return;
-	}
-	if (song == NULL) {
-		_tmp3_ = TRUE;
-	} else {
-		_tmp3_ = song->file == NULL;
-	}
-	if (_tmp3_) {
-		GList* _tmp4_;
-		g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:101: No Song or no song path specified");
-		callback ((_tmp4_ = list, list = NULL, _tmp4_), callback_target);
-		__g_list_free_meta_data_free0 (list);
-		_g_free0 (id);
-		return;
-	}
-	scheme = g_uri_parse_scheme (song->file);
-	if (scheme != NULL) {
-		GList* _tmp5_;
-		g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:111: Scheme '%s' indicates no local file.", scheme);
-		callback ((_tmp5_ = list, list = NULL, _tmp5_), callback_target);
-		__g_list_free_meta_data_free0 (list);
-		_g_free0 (id);
-		_g_free0 (scheme);
-		return;
-	}
-	g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:117: Music directory: %s", directory);
-	switch (type) {
-		case META_ALBUM_ART:
-		{
-			gmpc_provider_music_tree_get_album_cover (self, directory, song, callback, callback_target, NULL, NULL);
-			__g_list_free_meta_data_free0 (list);
-			_g_free0 (id);
-			_g_free0 (scheme);
-			return;
-		}
-		case META_ARTIST_ART:
-		{
-			gmpc_provider_music_tree_get_artist_art (self, directory, song, callback, callback_target, NULL, NULL);
-			__g_list_free_meta_data_free0 (list);
-			_g_free0 (id);
-			_g_free0 (scheme);
-			return;
-		}
-		default:
-		{
-			break;
-		}
-	}
-	g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:134: Query done, %u results", g_list_length (list));
-	callback ((_tmp6_ = list, list = NULL, _tmp6_), callback_target);
-	__g_list_free_meta_data_free0 (list);
-	_g_free0 (id);
-	_g_free0 (scheme);
-}
-
-
-static void gmpc_provider_music_tree_get_artist_art_data_free (gpointer _data) {
-	GmpcProviderMusicTreeGetArtistArtData* data;
-	data = _data;
-	_g_free0 (data->directory);
-	_mpd_freeSong0 (data->song);
-	(data->callback_target_destroy_notify == NULL) ? NULL : data->callback_target_destroy_notify (data->callback_target);
-	data->callback = NULL;
-	data->callback_target = NULL;
-	data->callback_target_destroy_notify = NULL;
-	g_slice_free (GmpcProviderMusicTreeGetArtistArtData, data);
-}
-
-
-static gpointer _mpd_songDup0 (gpointer self) {
-	return self ? mpd_songDup (self) : NULL;
-}
-
-
-static void gmpc_provider_music_tree_get_artist_art (GmpcProviderMusicTree* self, const char* directory, const mpd_Song* song, GmpcPluginMetaDataCallback callback, void* callback_target, GAsyncReadyCallback _callback_, gpointer _user_data_) {
-	GmpcProviderMusicTreeGetArtistArtData* _data_;
-	_data_ = g_slice_new0 (GmpcProviderMusicTreeGetArtistArtData);
-	_data_->_async_result = g_simple_async_result_new (G_OBJECT (self), _callback_, _user_data_, gmpc_provider_music_tree_get_artist_art);
-	g_simple_async_result_set_op_res_gpointer (_data_->_async_result, _data_, gmpc_provider_music_tree_get_artist_art_data_free);
-	_data_->self = self;
-	_data_->directory = g_strdup (directory);
-	_data_->song = _mpd_songDup0 (song);
-	_data_->callback = callback;
-	_data_->callback_target = callback_target;
-	gmpc_provider_music_tree_get_artist_art_co (_data_);
-}
-
-
-static void gmpc_provider_music_tree_get_artist_art_finish (GmpcProviderMusicTree* self, GAsyncResult* _res_) {
-	GmpcProviderMusicTreeGetArtistArtData* _data_;
-	_data_ = g_simple_async_result_get_op_res_gpointer (G_SIMPLE_ASYNC_RESULT (_res_));
-}
-
-
-static void gmpc_provider_music_tree_get_artist_art_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_) {
-	GmpcProviderMusicTreeGetArtistArtData* data;
-	data = _user_data_;
-	data->_res_ = _res_;
-	gmpc_provider_music_tree_get_artist_art_co (data);
-}
-
-
-static void _g_list_free_g_free (GList* self) {
-	g_list_foreach (self, (GFunc) g_free, NULL);
-	g_list_free (self);
-}
-
-
-static gboolean gmpc_provider_music_tree_get_artist_art_co (GmpcProviderMusicTreeGetArtistArtData* data) {
-	switch (data->_state_) {
-		default:
-		g_assert_not_reached ();
-		case 0:
-		{
-			data->list = NULL;
-			g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:147: Query artist art ");
-			data->base_path = g_path_get_dirname (data->song->file);
-			g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:151: Got basename: %s", data->base_path);
-			data->path = g_build_filename (data->directory, data->base_path, NULL);
-			data->dir = g_file_new_for_path (data->path);
-			data->queries = NULL;
-			data->ipath = g_build_filename (data->path, "artist.jpg", NULL);
-			data->queries = g_list_append (data->queries, g_strdup (data->ipath));
-			if (data->song->artist != NULL) {
-				data->ipath = (data->_tmp1_ = g_build_filename (data->path, data->_tmp0_ = g_strdup_printf ("%s.jpg", data->song->artist), NULL), _g_free0 (data->ipath), data->_tmp1_);
-				_g_free0 (data->_tmp0_);
-				data->queries = g_list_append (data->queries, g_strdup (data->ipath));
-			}
-			data->dir = (data->_tmp2_ = g_file_get_parent (data->dir), _g_object_unref0 (data->dir), data->_tmp2_);
-			data->path = (data->_tmp3_ = g_file_get_path (data->dir), _g_free0 (data->path), data->_tmp3_);
-			data->ipath = (data->_tmp4_ = g_build_filename (data->path, "artist.jpg", NULL), _g_free0 (data->ipath), data->_tmp4_);
-			data->queries = g_list_append (data->queries, g_strdup (data->ipath));
-			if (data->song->artist != NULL) {
-				data->ipath = (data->_tmp6_ = g_build_filename (data->path, data->_tmp5_ = g_strdup_printf ("%s.jpg", data->song->artist), NULL), _g_free0 (data->ipath), data->_tmp6_);
-				_g_free0 (data->_tmp5_);
-				data->queries = g_list_append (data->queries, g_strdup (data->ipath));
-			}
-			data->dir = (data->_tmp7_ = g_file_get_parent (data->dir), _g_object_unref0 (data->dir), data->_tmp7_);
-			data->path = (data->_tmp8_ = g_file_get_path (data->dir), _g_free0 (data->path), data->_tmp8_);
-			data->ipath = (data->_tmp9_ = g_build_filename (data->path, "artist.jpg", NULL), _g_free0 (data->ipath), data->_tmp9_);
-			data->queries = g_list_append (data->queries, g_strdup (data->ipath));
-			if (data->song->artist != NULL) {
-				data->ipath = (data->_tmp11_ = g_build_filename (data->path, data->_tmp10_ = g_strdup_printf ("%s.jpg", data->song->artist), NULL), _g_free0 (data->ipath), data->_tmp11_);
-				_g_free0 (data->_tmp10_);
-				data->queries = g_list_append (data->queries, g_strdup (data->ipath));
-			}
-			data->dir = (data->_tmp12_ = NULL, _g_object_unref0 (data->dir), data->_tmp12_);
-			{
-				data->opath_collection = data->queries;
-				for (data->opath_it = data->opath_collection; data->opath_it != NULL; data->opath_it = data->opath_it->next) {
-					data->opath = g_strdup ((const char*) data->opath_it->data);
-					{
-						g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:185: Got path: %s. Checking info", data->opath);
-						data->dir = (data->_tmp13_ = g_file_new_for_path (data->opath), _g_object_unref0 (data->dir), data->_tmp13_);
-						{
-							data->_state_ = 3;
-							g_file_query_info_async (data->dir, "access::can-read", 0, G_PRIORITY_DEFAULT, NULL, gmpc_provider_music_tree_get_artist_art_ready, data);
-							return FALSE;
-							case 3:
-							data->e = g_file_query_info_finish (data->dir, data->_res_, &data->_inner_error_);
-							if (data->_inner_error_ != NULL) {
-								goto __catch26_g_error;
-							}
-							g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:191: Got path: %s. Have info", data->opath);
-							if (g_file_info_get_attribute_boolean (data->e, "access::can-read")) {
-								data->item = meta_data_new ();
-								data->item->type = META_ALBUM_ART;
-								data->item->plugin_name = gmpc_plugin_base_get_name ((GmpcPluginBase*) data->self);
-								data->item->content_type = META_DATA_CONTENT_URI;
-								meta_data_set_uri (data->item, data->opath);
-								data->list = g_list_append (data->list, (data->_tmp14_ = data->item, data->item = NULL, data->_tmp14_));
-								g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:201: Found %s, adding", data->opath);
-								_meta_data_free0 (data->item);
-							}
-							_g_object_unref0 (data->e);
-						}
-						goto __finally26;
-						__catch26_g_error:
-						{
-							data->err = data->_inner_error_;
-							data->_inner_error_ = NULL;
-							{
-								g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:206: Error trying to get file info from '%s': %s\n", data->opath, data->err->message);
-								_g_error_free0 (data->err);
-							}
-						}
-						__finally26:
-						if (data->_inner_error_ != NULL) {
-							_g_free0 (data->opath);
-							__g_list_free_meta_data_free0 (data->list);
-							_g_free0 (data->base_path);
-							_g_free0 (data->path);
-							_g_object_unref0 (data->dir);
-							__g_list_free_g_free0 (data->queries);
-							_g_free0 (data->ipath);
-							g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, data->_inner_error_->message, g_quark_to_string (data->_inner_error_->domain), data->_inner_error_->code);
-							g_clear_error (&data->_inner_error_);
-							return FALSE;
-						}
-						_g_free0 (data->opath);
-					}
-				}
-			}
-			g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:211: Query done, %u results", g_list_length (data->list));
-			g_list_first (data->list);
-			data->callback ((data->_tmp15_ = data->list, data->list = NULL, data->_tmp15_), data->callback_target);
-			__g_list_free_meta_data_free0 (data->list);
-			_g_free0 (data->base_path);
-			_g_free0 (data->path);
-			_g_object_unref0 (data->dir);
-			__g_list_free_g_free0 (data->queries);
-			_g_free0 (data->ipath);
-			{
-				if (data->_state_ == 0) {
-					g_simple_async_result_complete_in_idle (data->_async_result);
-				} else {
-					g_simple_async_result_complete (data->_async_result);
-				}
-				g_object_unref (data->_async_result);
-				return FALSE;
-			}
-			__g_list_free_meta_data_free0 (data->list);
-			_g_free0 (data->base_path);
-			_g_free0 (data->path);
-			_g_object_unref0 (data->dir);
-			__g_list_free_g_free0 (data->queries);
-			_g_free0 (data->ipath);
-		}
-		{
-			if (data->_state_ == 0) {
-				g_simple_async_result_complete_in_idle (data->_async_result);
-			} else {
-				g_simple_async_result_complete (data->_async_result);
-			}
-			g_object_unref (data->_async_result);
-			return FALSE;
-		}
-	}
-}
-
-
-static void gmpc_provider_music_tree_get_album_cover_data_free (gpointer _data) {
-	GmpcProviderMusicTreeGetAlbumCoverData* data;
-	data = _data;
-	_g_free0 (data->directory);
-	_mpd_freeSong0 (data->song);
-	(data->callback_target_destroy_notify == NULL) ? NULL : data->callback_target_destroy_notify (data->callback_target);
-	data->callback = NULL;
-	data->callback_target = NULL;
-	data->callback_target_destroy_notify = NULL;
-	g_slice_free (GmpcProviderMusicTreeGetAlbumCoverData, data);
-}
-
-
-static void gmpc_provider_music_tree_get_album_cover (GmpcProviderMusicTree* self, const char* directory, const mpd_Song* song, GmpcPluginMetaDataCallback callback, void* callback_target, GAsyncReadyCallback _callback_, gpointer _user_data_) {
-	GmpcProviderMusicTreeGetAlbumCoverData* _data_;
-	_data_ = g_slice_new0 (GmpcProviderMusicTreeGetAlbumCoverData);
-	_data_->_async_result = g_simple_async_result_new (G_OBJECT (self), _callback_, _user_data_, gmpc_provider_music_tree_get_album_cover);
-	g_simple_async_result_set_op_res_gpointer (_data_->_async_result, _data_, gmpc_provider_music_tree_get_album_cover_data_free);
-	_data_->self = self;
-	_data_->directory = g_strdup (directory);
-	_data_->song = _mpd_songDup0 (song);
-	_data_->callback = callback;
-	_data_->callback_target = callback_target;
-	gmpc_provider_music_tree_get_album_cover_co (_data_);
-}
-
-
-static void gmpc_provider_music_tree_get_album_cover_finish (GmpcProviderMusicTree* self, GAsyncResult* _res_) {
-	GmpcProviderMusicTreeGetAlbumCoverData* _data_;
-	_data_ = g_simple_async_result_get_op_res_gpointer (G_SIMPLE_ASYNC_RESULT (_res_));
-}
-
-
-static void gmpc_provider_music_tree_get_album_cover_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_) {
-	GmpcProviderMusicTreeGetAlbumCoverData* data;
-	data = _user_data_;
-	data->_res_ = _res_;
-	gmpc_provider_music_tree_get_album_cover_co (data);
-}
-
-
-static void _g_list_free_g_object_unref (GList* self) {
-	g_list_foreach (self, (GFunc) g_object_unref, NULL);
-	g_list_free (self);
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static gboolean gmpc_provider_music_tree_get_album_cover_co (GmpcProviderMusicTreeGetAlbumCoverData* data) {
-	switch (data->_state_) {
-		default:
-		g_assert_not_reached ();
-		case 0:
-		{
-			data->list = NULL;
-			g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:225: Query album cover");
-			data->base_path = g_path_get_dirname (data->song->file);
-			g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:229: Got basename: %s", data->base_path);
-			data->path = g_build_filename (data->directory, data->base_path, NULL);
-			g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:234: Got path: %s. Starting to itterate over childs", data->path);
-			data->dir = g_file_new_for_path (data->path);
-			{
-				data->_state_ = 4;
-				g_file_enumerate_children_async (data->dir, G_FILE_ATTRIBUTE_STANDARD_NAME, 0, G_PRIORITY_DEFAULT, NULL, gmpc_provider_music_tree_get_album_cover_ready, data);
-				return FALSE;
-				case 4:
-				data->e = g_file_enumerate_children_finish (data->dir, data->_res_, &data->_inner_error_);
-				if (data->_inner_error_ != NULL) {
-					goto __catch27_g_error;
-				}
-				while (TRUE) {
-					data->_state_ = 5;
-					g_file_enumerator_next_files_async (data->e, 10, G_PRIORITY_DEFAULT, NULL, gmpc_provider_music_tree_get_album_cover_ready, data);
-					return FALSE;
-					case 5:
-					data->files = g_file_enumerator_next_files_finish (data->e, data->_res_, &data->_inner_error_);
-					if (data->_inner_error_ != NULL) {
-						_g_object_unref0 (data->e);
-						goto __catch27_g_error;
-					}
-					if (data->files == NULL) {
-						__g_list_free_g_object_unref0 (data->files);
-						break;
-					}
-					{
-						data->info_collection = data->files;
-						for (data->info_it = data->info_collection; data->info_it != NULL; data->info_it = data->info_it->next) {
-							data->info = _g_object_ref0 ((GFileInfo*) data->info_it->data);
-							{
-								if (g_regex_match (data->self->priv->image_filename, g_file_info_get_name (data->info), 0, NULL)) {
-									data->item = meta_data_new ();
-									data->item->type = META_ALBUM_ART;
-									data->item->plugin_name = gmpc_plugin_base_get_name ((GmpcPluginBase*) data->self);
-									data->item->content_type = META_DATA_CONTENT_URI;
-									meta_data_set_uri (data->item, data->_tmp0_ = g_build_filename (data->path, g_file_info_get_name (data->info), NULL));
-									_g_free0 (data->_tmp0_);
-									data->list = g_list_append (data->list, (data->_tmp1_ = data->item, data->item = NULL, data->_tmp1_));
-									g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:254: Found %s, adding", g_file_info_get_name (data->info));
-									_meta_data_free0 (data->item);
-								}
-								_g_object_unref0 (data->info);
-							}
-						}
-					}
-					__g_list_free_g_object_unref0 (data->files);
-				}
-				_g_object_unref0 (data->e);
-			}
-			goto __finally27;
-			__catch27_g_error:
-			{
-				data->err = data->_inner_error_;
-				data->_inner_error_ = NULL;
-				{
-					g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_WARNING, "music-tree.vala:261: Error trying to walk directory '%s': %s\n", data->path, data->err->message);
-					_g_error_free0 (data->err);
-				}
-			}
-			__finally27:
-			if (data->_inner_error_ != NULL) {
-				__g_list_free_meta_data_free0 (data->list);
-				_g_free0 (data->base_path);
-				_g_free0 (data->path);
-				_g_object_unref0 (data->dir);
-				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, data->_inner_error_->message, g_quark_to_string (data->_inner_error_->domain), data->_inner_error_->code);
-				g_clear_error (&data->_inner_error_);
-				return FALSE;
-			}
-			if (g_list_length (data->list) == 0) {
-				if (g_regex_match_simple ("(DISC|CD)[ 0-9]*$", data->path, G_REGEX_CASELESS, 0)) {
-					data->pdir = g_file_get_parent (data->dir);
-					data->path = (data->_tmp2_ = g_file_get_path (data->pdir), _g_free0 (data->path), data->_tmp2_);
-					g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:271: Nothing found, trying parent: %s", data->path);
-					{
-						data->_state_ = 6;
-						g_file_enumerate_children_async (data->pdir, G_FILE_ATTRIBUTE_STANDARD_NAME, 0, G_PRIORITY_DEFAULT, NULL, gmpc_provider_music_tree_get_album_cover_ready, data);
-						return FALSE;
-						case 6:
-						data->pe = g_file_enumerate_children_finish (data->pdir, data->_res_, &data->_inner_error_);
-						if (data->_inner_error_ != NULL) {
-							goto __catch28_g_error;
-						}
-						while (TRUE) {
-							data->_state_ = 7;
-							g_file_enumerator_next_files_async (data->pe, 10, G_PRIORITY_DEFAULT, NULL, gmpc_provider_music_tree_get_album_cover_ready, data);
-							return FALSE;
-							case 7:
-							data->pfiles = g_file_enumerator_next_files_finish (data->pe, data->_res_, &data->_inner_error_);
-							if (data->_inner_error_ != NULL) {
-								_g_object_unref0 (data->pe);
-								goto __catch28_g_error;
-							}
-							if (data->pfiles == NULL) {
-								__g_list_free_g_object_unref0 (data->pfiles);
-								break;
-							}
-							{
-								data->pinfo_collection = data->pfiles;
-								for (data->pinfo_it = data->pinfo_collection; data->pinfo_it != NULL; data->pinfo_it = data->pinfo_it->next) {
-									data->pinfo = _g_object_ref0 ((GFileInfo*) data->pinfo_it->data);
-									{
-										if (g_regex_match (data->self->priv->image_filename, g_file_info_get_name (data->pinfo), 0, NULL)) {
-											data->pitem = meta_data_new ();
-											data->pitem->type = META_ALBUM_ART;
-											data->pitem->plugin_name = gmpc_plugin_base_get_name ((GmpcPluginBase*) data->self);
-											data->pitem->content_type = META_DATA_CONTENT_URI;
-											meta_data_set_uri (data->pitem, data->_tmp3_ = g_build_filename (data->path, g_file_info_get_name (data->pinfo), NULL));
-											_g_free0 (data->_tmp3_);
-											data->list = g_list_append (data->list, (data->_tmp4_ = data->pitem, data->pitem = NULL, data->_tmp4_));
-											g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:290: Found %s, adding", g_file_info_get_name (data->pinfo));
-											_meta_data_free0 (data->pitem);
-										}
-										_g_object_unref0 (data->pinfo);
-									}
-								}
-							}
-							__g_list_free_g_object_unref0 (data->pfiles);
-						}
-						_g_object_unref0 (data->pe);
-					}
-					goto __finally28;
-					__catch28_g_error:
-					{
-						data->perr = data->_inner_error_;
-						data->_inner_error_ = NULL;
-						{
-							g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_WARNING, "music-tree.vala:296: Error trying to walk parent of directory '%s': %s\n", data->path, data->perr->message);
-							_g_error_free0 (data->perr);
-						}
-					}
-					__finally28:
-					if (data->_inner_error_ != NULL) {
-						_g_object_unref0 (data->pdir);
-						__g_list_free_meta_data_free0 (data->list);
-						_g_free0 (data->base_path);
-						_g_free0 (data->path);
-						_g_object_unref0 (data->dir);
-						g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, data->_inner_error_->message, g_quark_to_string (data->_inner_error_->domain), data->_inner_error_->code);
-						g_clear_error (&data->_inner_error_);
-						return FALSE;
-					}
-					_g_object_unref0 (data->pdir);
-				}
-			}
-			g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_DEBUG, "music-tree.vala:302: Query done, %u results", g_list_length (data->list));
-			g_list_first (data->list);
-			data->callback ((data->_tmp5_ = data->list, data->list = NULL, data->_tmp5_), data->callback_target);
-			__g_list_free_meta_data_free0 (data->list);
-			_g_free0 (data->base_path);
-			_g_free0 (data->path);
-			_g_object_unref0 (data->dir);
-			{
-				if (data->_state_ == 0) {
-					g_simple_async_result_complete_in_idle (data->_async_result);
-				} else {
-					g_simple_async_result_complete (data->_async_result);
-				}
-				g_object_unref (data->_async_result);
-				return FALSE;
-			}
-			__g_list_free_meta_data_free0 (data->list);
-			_g_free0 (data->base_path);
-			_g_free0 (data->path);
-			_g_object_unref0 (data->dir);
-		}
-		{
-			if (data->_state_ == 0) {
-				g_simple_async_result_complete_in_idle (data->_async_result);
-			} else {
-				g_simple_async_result_complete (data->_async_result);
-			}
-			g_object_unref (data->_async_result);
-			return FALSE;
-		}
-	}
-}
-
-
-GmpcProviderMusicTree* gmpc_provider_music_tree_construct (GType object_type) {
-	GmpcProviderMusicTree * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcProviderMusicTree* gmpc_provider_music_tree_new (void) {
-	return gmpc_provider_music_tree_construct (GMPC_PROVIDER_TYPE_MUSIC_TREE);
-}
-
-
-static GObject * gmpc_provider_music_tree_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcProviderMusicTree * self;
-	GError * _inner_error_;
-	parent_class = G_OBJECT_CLASS (gmpc_provider_music_tree_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_PROVIDER_MUSIC_TREE (obj);
-	_inner_error_ = NULL;
-	{
-		((GmpcPluginBase*) self)->plugin_type = 8 + 32;
-		{
-			GRegex* _tmp0_;
-			GRegex* _tmp1_;
-			_tmp0_ = g_regex_new (".*\\.(png|jpg|jpeg|gif)$", G_REGEX_CASELESS | G_REGEX_DOTALL, 0, &_inner_error_);
-			if (_inner_error_ != NULL) {
-				goto __catch29_g_error;
-			}
-			self->priv->image_filename = (_tmp1_ = _tmp0_, _g_regex_unref0 (self->priv->image_filename), _tmp1_);
-		}
-		goto __finally29;
-		__catch29_g_error:
-		{
-			GError * e;
-			e = _inner_error_;
-			_inner_error_ = NULL;
-			{
-				g_log ("Gmpc.Plugin.MusicTreeProvider", G_LOG_LEVEL_ERROR, "music-tree.vala:59: Failed to create regex: %s", e->message);
-				_g_error_free0 (e);
-			}
-		}
-		__finally29:
-		if (_inner_error_ != NULL) {
-			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-			g_clear_error (&_inner_error_);
-		}
-	}
-	return obj;
-}
-
-
-static void gmpc_provider_music_tree_class_init (GmpcProviderMusicTreeClass * klass) {
-	gmpc_provider_music_tree_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcProviderMusicTreePrivate));
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_version = gmpc_provider_music_tree_real_get_version;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_name = gmpc_provider_music_tree_real_get_name;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_provider_music_tree_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_provider_music_tree_finalize;
-}
-
-
-static void gmpc_provider_music_tree_gmpc_plugin_meta_data_iface_interface_init (GmpcPluginMetaDataIfaceIface * iface) {
-	gmpc_provider_music_tree_gmpc_plugin_meta_data_iface_parent_iface = g_type_interface_peek_parent (iface);
-	iface->set_priority = gmpc_provider_music_tree_real_set_priority;
-	iface->get_priority = gmpc_provider_music_tree_real_get_priority;
-	iface->get_metadata = gmpc_provider_music_tree_real_get_metadata;
-}
-
-
-static void gmpc_provider_music_tree_instance_init (GmpcProviderMusicTree * self) {
-	self->priv = GMPC_PROVIDER_MUSIC_TREE_GET_PRIVATE (self);
-	self->priv->image_filename = NULL;
-}
-
-
-static void gmpc_provider_music_tree_finalize (GObject* obj) {
-	GmpcProviderMusicTree * self;
-	self = GMPC_PROVIDER_MUSIC_TREE (obj);
-	_g_regex_unref0 (self->priv->image_filename);
-	G_OBJECT_CLASS (gmpc_provider_music_tree_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_provider_music_tree_get_type (void) {
-	static GType gmpc_provider_music_tree_type_id = 0;
-	if (gmpc_provider_music_tree_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcProviderMusicTreeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_provider_music_tree_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcProviderMusicTree), 0, (GInstanceInitFunc) gmpc_provider_music_tree_instance_init, NULL };
-		static const GInterfaceInfo gmpc_plugin_meta_data_iface_info = { (GInterfaceInitFunc) gmpc_provider_music_tree_gmpc_plugin_meta_data_iface_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
-		gmpc_provider_music_tree_type_id = g_type_register_static (GMPC_PLUGIN_TYPE_BASE, "GmpcProviderMusicTree", &g_define_type_info, 0);
-		g_type_add_interface_static (gmpc_provider_music_tree_type_id, GMPC_PLUGIN_TYPE_META_DATA_IFACE, &gmpc_plugin_meta_data_iface_info);
-	}
-	return gmpc_provider_music_tree_type_id;
-}
-
-
-
-
diff --git a/src/Widgets/gmpc-image-async.c b/src/Widgets/gmpc-image-async.c
deleted file mode 100644
index 073502f..0000000
--- a/src/Widgets/gmpc-image-async.c
+++ /dev/null
@@ -1,804 +0,0 @@
-/* gmpc-image-async.c generated by valac, the Vala compiler
- * generated from gmpc-image-async.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <stdlib.h>
-#include <string.h>
-#include "gmpc-extras.h"
-#include <gio/gio.h>
-#include <gdk-pixbuf/gdk-pixdata.h>
-#include <gtk/gtk.h>
-#include <plugin.h>
-#include <config1.h>
-#include <float.h>
-#include <math.h>
-#include <misc.h>
-#include <Widgets/pixbuf-cache.h>
-
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _gtk_tree_row_reference_free0(var) ((var == NULL) ? NULL : (var = (gtk_tree_row_reference_free (var), NULL)))
-#define _gtk_tree_path_free0(var) ((var == NULL) ? NULL : (var = (gtk_tree_path_free (var), NULL)))
-#define _gtk_icon_info_free0(var) ((var == NULL) ? NULL : (var = (gtk_icon_info_free (var), NULL)))
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-typedef struct _Block2Data Block2Data;
-typedef struct _GmpcPixbufLoaderAsyncLoadFromFileAsyncData GmpcPixbufLoaderAsyncLoadFromFileAsyncData;
-
-struct _GmpcPixbufLoaderAsyncPrivate {
-	GCancellable* pcancel;
-	GdkPixbuf* _pixbuf;
-	GtkTreeRowReference* rref;
-};
-
-struct _Block2Data {
-	int _ref_count_;
-	GmpcPixbufLoaderAsync * self;
-	GdkPixbufLoader* loader;
-	gint size;
-	gboolean border;
-	gpointer _async_data_;
-};
-
-struct _GmpcPixbufLoaderAsyncLoadFromFileAsyncData {
-	int _state_;
-	GAsyncResult* _res_;
-	GSimpleAsyncResult* _async_result;
-	GmpcPixbufLoaderAsync* self;
-	char* uri;
-	gint size;
-	GCancellable* cancel;
-	gboolean border;
-	GFile* file;
-	gsize _result_;
-	GFileInputStream* stream;
-	gboolean _tmp0_;
-	gboolean _tmp1_;
-	gboolean _tmp2_;
-	guchar data[1024];
-	gssize _tmp3_;
-	GError * erro;
-	GError * e;
-	GError * err;
-	GdkPixbuf* pix;
-	GdkPixbuf* final;
-	GdkPixbuf* _tmp4_;
-	GdkPixbufLoader* _tmp5_;
-	Block2Data* _data2_;
-	GError * _inner_error_;
-};
-
-struct _GmpcMetaImageAsyncPrivate {
-	GmpcPixbufLoaderAsync* loader;
-};
-
-
-static gpointer gmpc_pixbuf_loader_async_parent_class = NULL;
-static gpointer gmpc_meta_image_async_parent_class = NULL;
-
-#define LOG_DOMAIN "ImageAsync"
-#define GMPC_PIXBUF_LOADER_ASYNC_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_TYPE_PIXBUF_LOADER_ASYNC, GmpcPixbufLoaderAsyncPrivate))
-enum  {
-	GMPC_PIXBUF_LOADER_ASYNC_DUMMY_PROPERTY,
-	GMPC_PIXBUF_LOADER_ASYNC_PIXBUF
-};
-static void gmpc_pixbuf_loader_async_call_row_changed (GmpcPixbufLoaderAsync* self);
-static GdkPixbuf* gmpc_pixbuf_loader_async_modify_pixbuf (GmpcPixbufLoaderAsync* self, GdkPixbuf* pix, gint size, gboolean casing);
-static void gmpc_pixbuf_loader_async_load_from_file_async (GmpcPixbufLoaderAsync* self, const char* uri, gint size, GCancellable* cancel, gboolean border, GAsyncReadyCallback _callback_, gpointer _user_data_);
-static void gmpc_pixbuf_loader_async_load_from_file_finish (GmpcPixbufLoaderAsync* self, GAsyncResult* _res_);
-static void gmpc_pixbuf_loader_async_load_from_file_async_data_free (gpointer _data);
-static void gmpc_pixbuf_loader_async_load_from_file_async_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_);
-static void _lambda1_ (GdkPixbufLoader* source, gint width, gint height, Block2Data* _data2_);
-static void __lambda1__gdk_pixbuf_loader_size_prepared (GdkPixbufLoader* _sender, gint width, gint height, gpointer self);
-static void _lambda2_ (GdkPixbufLoader* source, Block2Data* _data2_);
-static void __lambda2__gdk_pixbuf_loader_area_prepared (GdkPixbufLoader* _sender, gpointer self);
-static Block2Data* block2_data_ref (Block2Data* _data2_);
-static void block2_data_unref (Block2Data* _data2_);
-static gboolean gmpc_pixbuf_loader_async_load_from_file_async_co (GmpcPixbufLoaderAsyncLoadFromFileAsyncData* data);
-static GObject * gmpc_pixbuf_loader_async_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_pixbuf_loader_async_finalize (GObject* obj);
-static void gmpc_pixbuf_loader_async_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec);
-static void gmpc_pixbuf_loader_async_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec);
-#define GMPC_META_IMAGE_ASYNC_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_TYPE_META_IMAGE_ASYNC, GmpcMetaImageAsyncPrivate))
-enum  {
-	GMPC_META_IMAGE_ASYNC_DUMMY_PROPERTY
-};
-static void _lambda3_ (GmpcPixbufLoaderAsync* source, GdkPixbuf* pixbuf, GmpcMetaImageAsync* self);
-static void __lambda3__gmpc_pixbuf_loader_async_pixbuf_update (GmpcPixbufLoaderAsync* _sender, GdkPixbuf* pixbuf, gpointer self);
-static GObject * gmpc_meta_image_async_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_meta_image_async_finalize (GObject* obj);
-
-
-
-static gpointer _gtk_tree_row_reference_copy0 (gpointer self) {
-	return self ? gtk_tree_row_reference_copy (self) : NULL;
-}
-
-
-void gmpc_pixbuf_loader_async_set_rref (GmpcPixbufLoaderAsync* self, const GtkTreeRowReference* rreference) {
-	GtkTreeRowReference* _tmp0_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (rreference != NULL);
-	self->priv->rref = (_tmp0_ = _gtk_tree_row_reference_copy0 (rreference), _gtk_tree_row_reference_free0 (self->priv->rref), _tmp0_);
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static void gmpc_pixbuf_loader_async_call_row_changed (GmpcPixbufLoaderAsync* self) {
-	g_return_if_fail (self != NULL);
-	if (self->priv->rref != NULL) {
-		GtkTreeModel* model;
-		GtkTreePath* path;
-		GtkTreeIter iter = {0};
-		model = _g_object_ref0 (gtk_tree_row_reference_get_model (self->priv->rref));
-		path = gtk_tree_row_reference_get_path (self->priv->rref);
-		if (gtk_tree_model_get_iter (model, &iter, path)) {
-			gtk_tree_model_row_changed (model, path, &iter);
-		}
-		_g_object_unref0 (model);
-		_gtk_tree_path_free0 (path);
-	}
-}
-
-
-static GdkPixbuf* gmpc_pixbuf_loader_async_modify_pixbuf (GmpcPixbufLoaderAsync* self, GdkPixbuf* pix, gint size, gboolean casing) {
-	GdkPixbuf* result;
-	GError * _inner_error_;
-	gboolean _tmp0_ = FALSE;
-	g_return_val_if_fail (self != NULL, NULL);
-	_inner_error_ = NULL;
-	if (pix == NULL) {
-		result = NULL;
-		return result;
-	}
-	if (casing) {
-		_tmp0_ = cfg_get_single_value_as_int_with_default (config, "metaimage", "addcase", 1) == 1;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		gint width;
-		gint height;
-		double spineRatio;
-		GtkIconInfo* ii;
-		width = gdk_pixbuf_get_width (pix);
-		height = gdk_pixbuf_get_height (pix);
-		spineRatio = 5.0 / 65.0;
-		ii = gtk_icon_theme_lookup_icon (gtk_icon_theme_get_default (), "stylized-cover", size, 0);
-		if (ii != NULL) {
-			char* path;
-			path = g_strdup (gtk_icon_info_get_filename (ii));
-			{
-				GdkPixbuf* case_image;
-				gint tempw;
-				GdkPixbuf* pix2;
-				GdkPixbuf* blank;
-				gint _tmp3_ = 0;
-				gint _tmp4_ = 0;
-				gint temph;
-				case_image = gdk_pixbuf_new_from_file_at_scale (path, size, size, TRUE, &_inner_error_);
-				if (_inner_error_ != NULL) {
-					goto __catch1_g_error;
-				}
-				tempw = (gint) (gdk_pixbuf_get_width (case_image) * (1.0 - spineRatio));
-				pix2 = NULL;
-				if (((gdk_pixbuf_get_height (case_image) / ((double) height)) * width) < tempw) {
-					GdkPixbuf* _tmp1_;
-					pix2 = (_tmp1_ = gdk_pixbuf_scale_simple (pix, tempw, (gint) ((height * tempw) / width), GDK_INTERP_BILINEAR), _g_object_unref0 (pix2), _tmp1_);
-				} else {
-					GdkPixbuf* _tmp2_;
-					pix2 = (_tmp2_ = gdk_pixbuf_scale_simple (pix, (gint) (width * (gdk_pixbuf_get_height (case_image) / ((double) height))), gdk_pixbuf_get_height (case_image), GDK_INTERP_BILINEAR), _g_object_unref0 (pix2), _tmp2_);
-				}
-				blank = gdk_pixbuf_new (GDK_COLORSPACE_RGB, TRUE, 8, gdk_pixbuf_get_width (case_image), gdk_pixbuf_get_height (case_image));
-				gdk_pixbuf_fill (blank, (guint32) 0x000000FF);
-				if (tempw >= gdk_pixbuf_get_width (pix2)) {
-					_tmp3_ = gdk_pixbuf_get_width (pix2);
-				} else {
-					_tmp3_ = tempw;
-				}
-				tempw = _tmp3_;
-				if (gdk_pixbuf_get_height (case_image) > gdk_pixbuf_get_height (pix2)) {
-					_tmp4_ = gdk_pixbuf_get_height (pix2);
-				} else {
-					_tmp4_ = gdk_pixbuf_get_height (case_image);
-				}
-				temph = _tmp4_;
-				gdk_pixbuf_copy_area (pix2, 0, 0, tempw - 1, temph - 2, blank, gdk_pixbuf_get_width (case_image) - tempw, 1);
-				gdk_pixbuf_composite (case_image, blank, 0, 0, gdk_pixbuf_get_width (case_image), gdk_pixbuf_get_height (case_image), (double) 0, (double) 0, (double) 1, (double) 1, GDK_INTERP_BILINEAR, 250);
-				result = blank;
-				_g_object_unref0 (case_image);
-				_g_object_unref0 (pix2);
-				_g_free0 (path);
-				_gtk_icon_info_free0 (ii);
-				return result;
-			}
-			goto __finally1;
-			__catch1_g_error:
-			{
-				GError * e;
-				e = _inner_error_;
-				_inner_error_ = NULL;
-				{
-					_g_error_free0 (e);
-				}
-			}
-			__finally1:
-			if (_inner_error_ != NULL) {
-				_g_free0 (path);
-				_gtk_icon_info_free0 (ii);
-				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-				g_clear_error (&_inner_error_);
-				return NULL;
-			}
-			_g_free0 (path);
-		}
-		_gtk_icon_info_free0 (ii);
-	}
-	screenshot_add_border (pix);
-	result = gdk_pixbuf_copy (pix);
-	return result;
-}
-
-
-void gmpc_pixbuf_loader_async_set_from_file (GmpcPixbufLoaderAsync* self, const char* uri, gint size, gboolean border) {
-	char* _tmp0_;
-	GdkPixbuf* pb;
-	GCancellable* cancel;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (uri != NULL);
-	if (self->priv->pcancel != NULL) {
-		g_cancellable_cancel (self->priv->pcancel);
-	}
-	self->priv->pcancel = NULL;
-	self->uri = (_tmp0_ = g_strdup (uri), _g_free0 (self->uri), _tmp0_);
-	pb = pixbuf_cache_lookup_icon (size, uri);
-	if (pb != NULL) {
-		gmpc_pixbuf_loader_async_set_pixbuf (self, pb);
-		g_signal_emit_by_name (self, "pixbuf-update", self->priv->_pixbuf);
-		gmpc_pixbuf_loader_async_call_row_changed (self);
-		_g_object_unref0 (pb);
-		return;
-	}
-	cancel = g_cancellable_new ();
-	self->priv->pcancel = cancel;
-	gmpc_pixbuf_loader_async_load_from_file_async (self, uri, size, cancel, border, NULL, NULL);
-	_g_object_unref0 (pb);
-	_g_object_unref0 (cancel);
-}
-
-
-static void gmpc_pixbuf_loader_async_load_from_file_async_data_free (gpointer _data) {
-	GmpcPixbufLoaderAsyncLoadFromFileAsyncData* data;
-	data = _data;
-	_g_free0 (data->uri);
-	_g_object_unref0 (data->cancel);
-	g_slice_free (GmpcPixbufLoaderAsyncLoadFromFileAsyncData, data);
-}
-
-
-static void gmpc_pixbuf_loader_async_load_from_file_async (GmpcPixbufLoaderAsync* self, const char* uri, gint size, GCancellable* cancel, gboolean border, GAsyncReadyCallback _callback_, gpointer _user_data_) {
-	GmpcPixbufLoaderAsyncLoadFromFileAsyncData* _data_;
-	_data_ = g_slice_new0 (GmpcPixbufLoaderAsyncLoadFromFileAsyncData);
-	_data_->_async_result = g_simple_async_result_new (G_OBJECT (self), _callback_, _user_data_, gmpc_pixbuf_loader_async_load_from_file_async);
-	g_simple_async_result_set_op_res_gpointer (_data_->_async_result, _data_, gmpc_pixbuf_loader_async_load_from_file_async_data_free);
-	_data_->self = self;
-	_data_->uri = g_strdup (uri);
-	_data_->size = size;
-	_data_->cancel = _g_object_ref0 (cancel);
-	_data_->border = border;
-	gmpc_pixbuf_loader_async_load_from_file_async_co (_data_);
-}
-
-
-static void gmpc_pixbuf_loader_async_load_from_file_finish (GmpcPixbufLoaderAsync* self, GAsyncResult* _res_) {
-	GmpcPixbufLoaderAsyncLoadFromFileAsyncData* _data_;
-	_data_ = g_simple_async_result_get_op_res_gpointer (G_SIMPLE_ASYNC_RESULT (_res_));
-}
-
-
-static void gmpc_pixbuf_loader_async_load_from_file_async_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_) {
-	GmpcPixbufLoaderAsyncLoadFromFileAsyncData* data;
-	data = _user_data_;
-	data->_res_ = _res_;
-	gmpc_pixbuf_loader_async_load_from_file_async_co (data);
-}
-
-
-static void _lambda1_ (GdkPixbufLoader* source, gint width, gint height, Block2Data* _data2_) {
-	GmpcPixbufLoaderAsync * self;
-	double dsize;
-	gint _tmp0_ = 0;
-	gint nwidth;
-	gint _tmp1_ = 0;
-	gint nheight;
-	self = _data2_->self;
-	g_return_if_fail (source != NULL);
-	dsize = (double) _data2_->size;
-	if (height > width) {
-		_tmp0_ = (gint) ((dsize / height) * width);
-	} else {
-		_tmp0_ = _data2_->size;
-	}
-	nwidth = _tmp0_;
-	if (width > height) {
-		_tmp1_ = (gint) ((dsize / width) * height);
-	} else {
-		_tmp1_ = _data2_->size;
-	}
-	nheight = _tmp1_;
-	gdk_pixbuf_loader_set_size (_data2_->loader, nwidth, nheight);
-}
-
-
-static void __lambda1__gdk_pixbuf_loader_size_prepared (GdkPixbufLoader* _sender, gint width, gint height, gpointer self) {
-	_lambda1_ (_sender, width, height, self);
-}
-
-
-static void _lambda2_ (GdkPixbufLoader* source, Block2Data* _data2_) {
-	GmpcPixbufLoaderAsync * self;
-	GdkPixbuf* apix;
-	GdkPixbuf* afinal;
-	self = _data2_->self;
-	g_return_if_fail (source != NULL);
-	apix = _g_object_ref0 (gdk_pixbuf_loader_get_pixbuf (_data2_->loader));
-	afinal = gmpc_pixbuf_loader_async_modify_pixbuf (self, apix, _data2_->size, _data2_->border);
-	gmpc_pixbuf_loader_async_set_pixbuf (self, afinal);
-	g_signal_emit_by_name (self, "pixbuf-update", self->priv->_pixbuf);
-	gmpc_pixbuf_loader_async_call_row_changed (self);
-	_g_object_unref0 (apix);
-	_g_object_unref0 (afinal);
-}
-
-
-static void __lambda2__gdk_pixbuf_loader_area_prepared (GdkPixbufLoader* _sender, gpointer self) {
-	_lambda2_ (_sender, self);
-}
-
-
-static Block2Data* block2_data_ref (Block2Data* _data2_) {
-	++_data2_->_ref_count_;
-	return _data2_;
-}
-
-
-static void block2_data_unref (Block2Data* _data2_) {
-	if ((--_data2_->_ref_count_) == 0) {
-		_g_object_unref0 (_data2_->self);
-		_g_object_unref0 (_data2_->loader);
-		g_slice_free (Block2Data, _data2_);
-	}
-}
-
-
-static gboolean gmpc_pixbuf_loader_async_load_from_file_async_co (GmpcPixbufLoaderAsyncLoadFromFileAsyncData* data) {
-	switch (data->_state_) {
-		default:
-		g_assert_not_reached ();
-		case 0:
-		{
-			data->_data2_ = g_slice_new0 (Block2Data);
-			data->_data2_->_ref_count_ = 1;
-			data->_data2_->self = g_object_ref (data->self);
-			data->_data2_->size = data->size;
-			data->_data2_->border = data->border;
-			data->_data2_->_async_data_ = data;
-			data->file = g_file_new_for_path (data->uri);
-			data->_result_ = (gsize) 0;
-			data->_data2_->loader = gdk_pixbuf_loader_new ();
-			g_signal_connect_data (data->_data2_->loader, "size-prepared", (GCallback) __lambda1__gdk_pixbuf_loader_size_prepared, block2_data_ref (data->_data2_), (GClosureNotify) block2_data_unref, 0);
-			g_signal_connect_data (data->_data2_->loader, "area-prepared", (GCallback) __lambda2__gdk_pixbuf_loader_area_prepared, block2_data_ref (data->_data2_), (GClosureNotify) block2_data_unref, 0);
-			{
-				data->_state_ = 1;
-				g_file_read_async (data->file, 0, data->cancel, gmpc_pixbuf_loader_async_load_from_file_async_ready, data);
-				return FALSE;
-				case 1:
-				data->stream = g_file_read_finish (data->file, data->_res_, &data->_inner_error_);
-				if (data->_inner_error_ != NULL) {
-					goto __catch2_g_error;
-				}
-				if (!g_cancellable_is_cancelled (data->cancel)) {
-					data->_tmp0_ = data->stream != NULL;
-				} else {
-					data->_tmp0_ = FALSE;
-				}
-				if (data->_tmp0_) {
-					{
-						data->_tmp1_ = TRUE;
-						while (TRUE) {
-							if (!data->_tmp1_) {
-								if (!g_cancellable_is_cancelled (data->cancel)) {
-									data->_tmp2_ = data->_result_ > 0;
-								} else {
-									data->_tmp2_ = FALSE;
-								}
-								if (!data->_tmp2_) {
-									break;
-								}
-							}
-							data->_tmp1_ = FALSE;
-							{
-								data->_state_ = 2;
-								g_input_stream_read_async ((GInputStream*) data->stream, data->data, (gsize) 1024, 0, data->cancel, gmpc_pixbuf_loader_async_load_from_file_async_ready, data);
-								return FALSE;
-								case 2:
-								data->_tmp3_ = g_input_stream_read_finish ((GInputStream*) data->stream, data->_res_, &data->_inner_error_);
-								if (data->_inner_error_ != NULL) {
-									goto __catch3_g_error;
-								}
-								data->_result_ = (gsize) data->_tmp3_;
-								gdk_pixbuf_loader_write (data->_data2_->loader, (const char*) data->data, data->_result_, &data->_inner_error_);
-								if (data->_inner_error_ != NULL) {
-									goto __catch3_g_error;
-								}
-							}
-							goto __finally3;
-							__catch3_g_error:
-							{
-								data->erro = data->_inner_error_;
-								data->_inner_error_ = NULL;
-								{
-									g_warning ("gmpc-image-async.vala:155: Error trying to fetch image: %s", data->erro->message);
-									_g_error_free0 (data->erro);
-								}
-							}
-							__finally3:
-							if (data->_inner_error_ != NULL) {
-								_g_object_unref0 (data->stream);
-								goto __catch2_g_error;
-							}
-						}
-					}
-				}
-				_g_object_unref0 (data->stream);
-			}
-			goto __finally2;
-			__catch2_g_error:
-			{
-				data->e = data->_inner_error_;
-				data->_inner_error_ = NULL;
-				{
-					g_warning ("gmpc-image-async.vala:160: Error trying to fetch image: %s", data->e->message);
-					_g_error_free0 (data->e);
-				}
-			}
-			__finally2:
-			if (data->_inner_error_ != NULL) {
-				_g_object_unref0 (data->file);
-				block2_data_unref (data->_data2_);
-				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, data->_inner_error_->message, g_quark_to_string (data->_inner_error_->domain), data->_inner_error_->code);
-				g_clear_error (&data->_inner_error_);
-				return FALSE;
-			}
-			{
-				gdk_pixbuf_loader_close (data->_data2_->loader, &data->_inner_error_);
-				if (data->_inner_error_ != NULL) {
-					goto __catch4_g_error;
-				}
-			}
-			goto __finally4;
-			__catch4_g_error:
-			{
-				data->err = data->_inner_error_;
-				data->_inner_error_ = NULL;
-				{
-					g_warning ("gmpc-image-async.vala:165: Error trying to parse image: %s", data->err->message);
-					g_signal_emit_by_name (data->self, "pixbuf-update", NULL);
-					_g_error_free0 (data->err);
-					_g_object_unref0 (data->file);
-					block2_data_unref (data->_data2_);
-					{
-						if (data->_state_ == 0) {
-							g_simple_async_result_complete_in_idle (data->_async_result);
-						} else {
-							g_simple_async_result_complete (data->_async_result);
-						}
-						g_object_unref (data->_async_result);
-						return FALSE;
-					}
-					_g_error_free0 (data->err);
-				}
-			}
-			__finally4:
-			if (data->_inner_error_ != NULL) {
-				_g_object_unref0 (data->file);
-				block2_data_unref (data->_data2_);
-				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, data->_inner_error_->message, g_quark_to_string (data->_inner_error_->domain), data->_inner_error_->code);
-				g_clear_error (&data->_inner_error_);
-				return FALSE;
-			}
-			if (g_cancellable_is_cancelled (data->cancel)) {
-				g_log (LOG_DOMAIN, G_LOG_LEVEL_DEBUG, "gmpc-image-async.vala:173: Cancelled loading of image");
-				g_cancellable_reset (data->cancel);
-				_g_object_unref0 (data->file);
-				block2_data_unref (data->_data2_);
-				{
-					if (data->_state_ == 0) {
-						g_simple_async_result_complete_in_idle (data->_async_result);
-					} else {
-						g_simple_async_result_complete (data->_async_result);
-					}
-					g_object_unref (data->_async_result);
-					return FALSE;
-				}
-			}
-			data->pix = _g_object_ref0 (gdk_pixbuf_loader_get_pixbuf (data->_data2_->loader));
-			data->final = pixbuf_cache_lookup_icon (data->_data2_->size, data->uri);
-			if (data->final == NULL) {
-				data->final = (data->_tmp4_ = gmpc_pixbuf_loader_async_modify_pixbuf (data->self, data->pix, data->_data2_->size, data->_data2_->border), _g_object_unref0 (data->final), data->_tmp4_);
-				pixbuf_cache_add_icon (data->_data2_->size, data->uri, data->final);
-			}
-			gmpc_pixbuf_loader_async_set_pixbuf (data->self, data->final);
-			g_signal_emit_by_name (data->self, "pixbuf-update", data->self->priv->_pixbuf);
-			gmpc_pixbuf_loader_async_call_row_changed (data->self);
-			data->self->priv->pcancel = NULL;
-			data->_data2_->loader = (data->_tmp5_ = NULL, _g_object_unref0 (data->_data2_->loader), data->_tmp5_);
-			_g_object_unref0 (data->file);
-			_g_object_unref0 (data->pix);
-			_g_object_unref0 (data->final);
-			block2_data_unref (data->_data2_);
-		}
-		{
-			if (data->_state_ == 0) {
-				g_simple_async_result_complete_in_idle (data->_async_result);
-			} else {
-				g_simple_async_result_complete (data->_async_result);
-			}
-			g_object_unref (data->_async_result);
-			return FALSE;
-		}
-	}
-}
-
-
-GmpcPixbufLoaderAsync* gmpc_pixbuf_loader_async_construct (GType object_type) {
-	GmpcPixbufLoaderAsync * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcPixbufLoaderAsync* gmpc_pixbuf_loader_async_new (void) {
-	return gmpc_pixbuf_loader_async_construct (GMPC_TYPE_PIXBUF_LOADER_ASYNC);
-}
-
-
-GdkPixbuf* gmpc_pixbuf_loader_async_get_pixbuf (GmpcPixbufLoaderAsync* self) {
-	GdkPixbuf* result;
-	g_return_val_if_fail (self != NULL, NULL);
-	result = self->priv->_pixbuf;
-	return result;
-}
-
-
-void gmpc_pixbuf_loader_async_set_pixbuf (GmpcPixbufLoaderAsync* self, GdkPixbuf* value) {
-	GdkPixbuf* _tmp0_;
-	g_return_if_fail (self != NULL);
-	self->priv->_pixbuf = (_tmp0_ = _g_object_ref0 (value), _g_object_unref0 (self->priv->_pixbuf), _tmp0_);
-	g_object_notify ((GObject *) self, "pixbuf");
-}
-
-
-static GObject * gmpc_pixbuf_loader_async_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcPixbufLoaderAsync * self;
-	parent_class = G_OBJECT_CLASS (gmpc_pixbuf_loader_async_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_PIXBUF_LOADER_ASYNC (obj);
-	{
-		g_log (LOG_DOMAIN, G_LOG_LEVEL_DEBUG, "gmpc-image-async.vala:55: Create the image loading\n");
-	}
-	return obj;
-}
-
-
-static void gmpc_pixbuf_loader_async_class_init (GmpcPixbufLoaderAsyncClass * klass) {
-	gmpc_pixbuf_loader_async_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcPixbufLoaderAsyncPrivate));
-	G_OBJECT_CLASS (klass)->get_property = gmpc_pixbuf_loader_async_get_property;
-	G_OBJECT_CLASS (klass)->set_property = gmpc_pixbuf_loader_async_set_property;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_pixbuf_loader_async_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_pixbuf_loader_async_finalize;
-	g_object_class_install_property (G_OBJECT_CLASS (klass), GMPC_PIXBUF_LOADER_ASYNC_PIXBUF, g_param_spec_object ("pixbuf", "pixbuf", "pixbuf", GDK_TYPE_PIXBUF, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
-	g_signal_new ("pixbuf_update", GMPC_TYPE_PIXBUF_LOADER_ASYNC, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, GDK_TYPE_PIXBUF);
-}
-
-
-static void gmpc_pixbuf_loader_async_instance_init (GmpcPixbufLoaderAsync * self) {
-	self->priv = GMPC_PIXBUF_LOADER_ASYNC_GET_PRIVATE (self);
-	self->priv->pcancel = NULL;
-	self->uri = NULL;
-	self->priv->_pixbuf = NULL;
-	self->priv->rref = NULL;
-}
-
-
-static void gmpc_pixbuf_loader_async_finalize (GObject* obj) {
-	GmpcPixbufLoaderAsync * self;
-	self = GMPC_PIXBUF_LOADER_ASYNC (obj);
-	{
-		g_log (LOG_DOMAIN, G_LOG_LEVEL_DEBUG, "gmpc-image-async.vala:59: Free the image loading");
-		if (self->priv->pcancel != NULL) {
-			g_cancellable_cancel (self->priv->pcancel);
-		}
-	}
-	_g_free0 (self->uri);
-	_g_object_unref0 (self->priv->_pixbuf);
-	_gtk_tree_row_reference_free0 (self->priv->rref);
-	G_OBJECT_CLASS (gmpc_pixbuf_loader_async_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_pixbuf_loader_async_get_type (void) {
-	static GType gmpc_pixbuf_loader_async_type_id = 0;
-	if (gmpc_pixbuf_loader_async_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPixbufLoaderAsyncClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_pixbuf_loader_async_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcPixbufLoaderAsync), 0, (GInstanceInitFunc) gmpc_pixbuf_loader_async_instance_init, NULL };
-		gmpc_pixbuf_loader_async_type_id = g_type_register_static (G_TYPE_OBJECT, "GmpcPixbufLoaderAsync", &g_define_type_info, 0);
-	}
-	return gmpc_pixbuf_loader_async_type_id;
-}
-
-
-static void gmpc_pixbuf_loader_async_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec) {
-	GmpcPixbufLoaderAsync * self;
-	self = GMPC_PIXBUF_LOADER_ASYNC (object);
-	switch (property_id) {
-		case GMPC_PIXBUF_LOADER_ASYNC_PIXBUF:
-		g_value_set_object (value, gmpc_pixbuf_loader_async_get_pixbuf (self));
-		break;
-		default:
-		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-		break;
-	}
-}
-
-
-static void gmpc_pixbuf_loader_async_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec) {
-	GmpcPixbufLoaderAsync * self;
-	self = GMPC_PIXBUF_LOADER_ASYNC (object);
-	switch (property_id) {
-		case GMPC_PIXBUF_LOADER_ASYNC_PIXBUF:
-		gmpc_pixbuf_loader_async_set_pixbuf (self, g_value_get_object (value));
-		break;
-		default:
-		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-		break;
-	}
-}
-
-
-static void _lambda3_ (GmpcPixbufLoaderAsync* source, GdkPixbuf* pixbuf, GmpcMetaImageAsync* self) {
-	g_return_if_fail (source != NULL);
-	gtk_image_set_from_pixbuf ((GtkImage*) self, pixbuf);
-}
-
-
-static void __lambda3__gmpc_pixbuf_loader_async_pixbuf_update (GmpcPixbufLoaderAsync* _sender, GdkPixbuf* pixbuf, gpointer self) {
-	_lambda3_ (_sender, pixbuf, self);
-}
-
-
-void gmpc_meta_image_async_set_from_file (GmpcMetaImageAsync* self, const char* uri, gint size, gboolean border) {
-	char* _tmp0_;
-	GmpcPixbufLoaderAsync* _tmp1_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (uri != NULL);
-	self->uri = (_tmp0_ = g_strdup (uri), _g_free0 (self->uri), _tmp0_);
-	self->priv->loader = (_tmp1_ = gmpc_pixbuf_loader_async_new (), _g_object_unref0 (self->priv->loader), _tmp1_);
-	g_signal_connect_object (self->priv->loader, "pixbuf-update", (GCallback) __lambda3__gmpc_pixbuf_loader_async_pixbuf_update, self, 0);
-	gmpc_pixbuf_loader_async_set_from_file (self->priv->loader, uri, size, border);
-}
-
-
-void gmpc_meta_image_async_clear_now (GmpcMetaImageAsync* self) {
-	GmpcPixbufLoaderAsync* _tmp0_;
-	char* _tmp1_;
-	g_return_if_fail (self != NULL);
-	self->priv->loader = (_tmp0_ = NULL, _g_object_unref0 (self->priv->loader), _tmp0_);
-	self->uri = (_tmp1_ = NULL, _g_free0 (self->uri), _tmp1_);
-	gtk_image_clear ((GtkImage*) self);
-}
-
-
-void gmpc_meta_image_async_set_pixbuf (GmpcMetaImageAsync* self, GdkPixbuf* pb) {
-	GmpcPixbufLoaderAsync* _tmp0_;
-	char* _tmp1_;
-	g_return_if_fail (self != NULL);
-	self->priv->loader = (_tmp0_ = NULL, _g_object_unref0 (self->priv->loader), _tmp0_);
-	self->uri = (_tmp1_ = NULL, _g_free0 (self->uri), _tmp1_);
-	if (pb != NULL) {
-		gtk_image_set_from_pixbuf ((GtkImage*) self, pb);
-	} else {
-		gtk_image_clear ((GtkImage*) self);
-	}
-}
-
-
-GmpcMetaImageAsync* gmpc_meta_image_async_construct (GType object_type) {
-	GmpcMetaImageAsync * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcMetaImageAsync* gmpc_meta_image_async_new (void) {
-	return gmpc_meta_image_async_construct (GMPC_TYPE_META_IMAGE_ASYNC);
-}
-
-
-static GObject * gmpc_meta_image_async_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcMetaImageAsync * self;
-	parent_class = G_OBJECT_CLASS (gmpc_meta_image_async_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_META_IMAGE_ASYNC (obj);
-	{
-	}
-	return obj;
-}
-
-
-static void gmpc_meta_image_async_class_init (GmpcMetaImageAsyncClass * klass) {
-	gmpc_meta_image_async_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcMetaImageAsyncPrivate));
-	G_OBJECT_CLASS (klass)->constructor = gmpc_meta_image_async_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_meta_image_async_finalize;
-}
-
-
-static void gmpc_meta_image_async_instance_init (GmpcMetaImageAsync * self) {
-	self->priv = GMPC_META_IMAGE_ASYNC_GET_PRIVATE (self);
-	self->priv->loader = NULL;
-	self->uri = NULL;
-}
-
-
-static void gmpc_meta_image_async_finalize (GObject* obj) {
-	GmpcMetaImageAsync * self;
-	self = GMPC_META_IMAGE_ASYNC (obj);
-	{
-		g_log (LOG_DOMAIN, G_LOG_LEVEL_DEBUG, "gmpc-image-async.vala:203: Freeing metaimageasync\n");
-	}
-	_g_object_unref0 (self->priv->loader);
-	_g_free0 (self->uri);
-	G_OBJECT_CLASS (gmpc_meta_image_async_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_meta_image_async_get_type (void) {
-	static GType gmpc_meta_image_async_type_id = 0;
-	if (gmpc_meta_image_async_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcMetaImageAsyncClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_meta_image_async_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcMetaImageAsync), 0, (GInstanceInitFunc) gmpc_meta_image_async_instance_init, NULL };
-		gmpc_meta_image_async_type_id = g_type_register_static (GTK_TYPE_IMAGE, "GmpcMetaImageAsync", &g_define_type_info, 0);
-	}
-	return gmpc_meta_image_async_type_id;
-}
-
-
-
-
diff --git a/src/Widgets/gmpc-menu-item-rating.c b/src/Widgets/gmpc-menu-item-rating.c
deleted file mode 100644
index 8338541..0000000
--- a/src/Widgets/gmpc-menu-item-rating.c
+++ /dev/null
@@ -1,135 +0,0 @@
-/* gmpc-menu-item-rating.c generated by valac, the Vala compiler
- * generated from gmpc-menu-item-rating.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include "gmpc-extras.h"
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include <gdk/gdk.h>
-#include <glib/gi18n-lib.h>
-#include <libmpd/libmpd.h>
-#include <libmpd/libmpdclient.h>
-
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-
-
-static gpointer gmpc_menu_item_rating_parent_class = NULL;
-
-#define use_transition_mir TRUE
-enum  {
-	GMPC_MENU_ITEM_RATING_DUMMY_PROPERTY
-};
-#define GMPC_MENU_ITEM_RATING_some_unique_name VERSION
-static gboolean gmpc_menu_item_rating_button_press_event_callback (GmpcMenuItemRating* self, GdkEventButton* event, void* userdata);
-static gboolean gmpc_menu_item_rating_button_release_event_callback (GmpcMenuItemRating* self, GdkEventButton* event, void* userdata);
-static void gmpc_menu_item_rating_finalize (GObject* obj);
-
-
-
-gint gmpc_menu_item_rating_get_rating (GmpcMenuItemRating* self) {
-	gint result;
-	g_return_val_if_fail (self != NULL, 0);
-	result = 0;
-	return result;
-}
-
-
-static gboolean gmpc_menu_item_rating_button_press_event_callback (GmpcMenuItemRating* self, GdkEventButton* event, void* userdata) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	gmpc_rating_button_press_event_callback (self->rating, self->rating->event_box, event);
-	result = TRUE;
-	return result;
-}
-
-
-static gboolean gmpc_menu_item_rating_button_release_event_callback (GmpcMenuItemRating* self, GdkEventButton* event, void* userdata) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	result = TRUE;
-	return result;
-}
-
-
-GmpcMenuItemRating* gmpc_menu_item_rating_construct (GType object_type, MpdObj* server, const mpd_Song* song) {
-	GmpcMenuItemRating * self;
-	GtkVBox* _tmp0_;
-	GmpcRating* _tmp1_;
-	GtkLabel* _tmp2_;
-	g_return_val_if_fail (server != NULL, NULL);
-	g_return_val_if_fail (song != NULL, NULL);
-	self = g_object_newv (object_type, 0, NULL);
-	g_signal_connect_swapped (self, "button-press-event", (GCallback) gmpc_menu_item_rating_button_press_event_callback, self);
-	g_signal_connect_swapped (self, "button-release-event", (GCallback) gmpc_menu_item_rating_button_release_event_callback, self);
-	self->hbox = (_tmp0_ = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6)), _g_object_unref0 (self->hbox), _tmp0_);
-	self->rating = (_tmp1_ = g_object_ref_sink (gmpc_rating_new (server, song)), _g_object_unref0 (self->rating), _tmp1_);
-	gtk_box_pack_start ((GtkBox*) self->hbox, (GtkWidget*) (_tmp2_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Rating:")))), FALSE, TRUE, (guint) 0);
-	_g_object_unref0 (_tmp2_);
-	gtk_box_pack_start ((GtkBox*) self->hbox, (GtkWidget*) self->rating, FALSE, TRUE, (guint) 0);
-	gtk_container_add ((GtkContainer*) self, (GtkWidget*) self->hbox);
-	gtk_widget_show_all ((GtkWidget*) self);
-	return self;
-}
-
-
-GmpcMenuItemRating* gmpc_menu_item_rating_new (MpdObj* server, const mpd_Song* song) {
-	return gmpc_menu_item_rating_construct (GMPC_MENU_ITEM_TYPE_RATING, server, song);
-}
-
-
-static void gmpc_menu_item_rating_class_init (GmpcMenuItemRatingClass * klass) {
-	gmpc_menu_item_rating_parent_class = g_type_class_peek_parent (klass);
-	G_OBJECT_CLASS (klass)->finalize = gmpc_menu_item_rating_finalize;
-}
-
-
-static void gmpc_menu_item_rating_instance_init (GmpcMenuItemRating * self) {
-	self->hbox = NULL;
-	self->rating = NULL;
-}
-
-
-static void gmpc_menu_item_rating_finalize (GObject* obj) {
-	GmpcMenuItemRating * self;
-	self = GMPC_MENU_ITEM_RATING (obj);
-	_g_object_unref0 (self->hbox);
-	_g_object_unref0 (self->rating);
-	G_OBJECT_CLASS (gmpc_menu_item_rating_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_menu_item_rating_get_type (void) {
-	static GType gmpc_menu_item_rating_type_id = 0;
-	if (gmpc_menu_item_rating_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcMenuItemRatingClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_menu_item_rating_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcMenuItemRating), 0, (GInstanceInitFunc) gmpc_menu_item_rating_instance_init, NULL };
-		gmpc_menu_item_rating_type_id = g_type_register_static (GTK_TYPE_MENU_ITEM, "GmpcMenuItemRating", &g_define_type_info, 0);
-	}
-	return gmpc_menu_item_rating_type_id;
-}
-
-
-
-
diff --git a/src/Widgets/gmpc-progress.c b/src/Widgets/gmpc-progress.c
deleted file mode 100644
index d247a65..0000000
--- a/src/Widgets/gmpc-progress.c
+++ /dev/null
@@ -1,567 +0,0 @@
-/* gmpc-progress.c generated by valac, the Vala compiler
- * generated from gmpc-progress.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include "gmpc-extras.h"
-#include <gdk/gdk.h>
-#include <stdlib.h>
-#include <string.h>
-#include <float.h>
-#include <math.h>
-
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-
-struct _GmpcProgressPrivate {
-	guint total;
-	guint current;
-	gboolean do_countdown;
-	GtkScale* scale;
-	GtkLabel* label;
-	gulong set_value_handler;
-	GtkWindow* tooltip;
-	GtkLabel* tooltip_label;
-	gint press;
-};
-
-
-static gpointer gmpc_progress_parent_class = NULL;
-
-#define use_transition TRUE
-#define GMPC_PROGRESS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_TYPE_PROGRESS, GmpcProgressPrivate))
-enum  {
-	GMPC_PROGRESS_DUMMY_PROPERTY,
-	GMPC_PROGRESS_HIDE_TEXT
-};
-static gboolean gmpc_progress_tooltip_expose_event_callback (GmpcProgress* self, GtkWindow* tooltip, GdkEventExpose* event);
-static gboolean _gmpc_progress_tooltip_expose_event_callback_gtk_widget_expose_event (GtkWindow* _sender, GdkEventExpose* event, gpointer self);
-static gboolean gmpc_progress_enter_notify_event_callback (GmpcProgress* self, GtkScale* scale, GdkEventCrossing* event);
-static gboolean gmpc_progress_motion_notify_event_callback (GmpcProgress* self, GtkScale* scale, GdkEventMotion* event);
-static void gmpc_progress_value_changed (GmpcProgress* self, GtkScale* range);
-static gboolean gmpc_progress_button_release_event_callback (GmpcProgress* self, GtkScale* scale, GdkEventButton* event);
-static gboolean gmpc_progress_button_press_event_callback (GmpcProgress* self, GdkEventButton* event, GtkScale* scale);
-static gboolean gmpc_progress_scroll_event_callback (GmpcProgress* self, GtkScale* scale, GdkEventScroll* event);
-static gboolean _gmpc_progress_scroll_event_callback_gtk_widget_scroll_event (GtkScale* _sender, GdkEventScroll* event, gpointer self);
-static gboolean _gmpc_progress_button_release_event_callback_gtk_widget_button_release_event (GtkScale* _sender, GdkEventButton* event, gpointer self);
-static gboolean _gmpc_progress_motion_notify_event_callback_gtk_widget_motion_notify_event (GtkScale* _sender, GdkEventMotion* event, gpointer self);
-static gboolean _gmpc_progress_enter_notify_event_callback_gtk_widget_enter_notify_event (GtkScale* _sender, GdkEventCrossing* event, gpointer self);
-static gboolean _gmpc_progress_enter_notify_event_callback_gtk_widget_leave_notify_event (GtkScale* _sender, GdkEventCrossing* event, gpointer self);
-static GObject * gmpc_progress_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_progress_finalize (GObject* obj);
-static void gmpc_progress_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec);
-static void gmpc_progress_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec);
-
-
-
-static gboolean gmpc_progress_tooltip_expose_event_callback (GmpcProgress* self, GtkWindow* tooltip, GdkEventExpose* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (tooltip != NULL, FALSE);
-	gtk_paint_box (gtk_widget_get_style ((GtkWidget*) tooltip), (*event).window, GTK_STATE_NORMAL, GTK_SHADOW_OUT, NULL, (GtkWidget*) tooltip, "tooltip", 0, 0, ((GtkWidget*) tooltip)->allocation.width, ((GtkWidget*) tooltip)->allocation.height);
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean _gmpc_progress_tooltip_expose_event_callback_gtk_widget_expose_event (GtkWindow* _sender, GdkEventExpose* event, gpointer self) {
-	return gmpc_progress_tooltip_expose_event_callback (self, _sender, event);
-}
-
-
-static gboolean gmpc_progress_enter_notify_event_callback (GmpcProgress* self, GtkScale* scale, GdkEventCrossing* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (scale != NULL, FALSE);
-	if ((*event).type == GDK_ENTER_NOTIFY) {
-		GtkWindow* _tmp0_;
-		GtkLabel* _tmp1_;
-		if (self->priv->tooltip != NULL) {
-			gtk_object_destroy ((GtkObject*) self->priv->tooltip);
-		}
-		self->priv->tooltip = (_tmp0_ = g_object_ref_sink ((GtkWindow*) gtk_window_new (GTK_WINDOW_POPUP)), _g_object_unref0 (self->priv->tooltip), _tmp0_);
-		self->priv->tooltip_label = (_tmp1_ = g_object_ref_sink ((GtkLabel*) gtk_label_new ("test")), _g_object_unref0 (self->priv->tooltip_label), _tmp1_);
-		gtk_container_add ((GtkContainer*) self->priv->tooltip, (GtkWidget*) self->priv->tooltip_label);
-		gtk_container_set_border_width ((GtkContainer*) self->priv->tooltip, (guint) 4);
-		gtk_widget_set_app_paintable ((GtkWidget*) self->priv->tooltip, TRUE);
-		g_signal_connect_object ((GtkWidget*) self->priv->tooltip, "expose-event", (GCallback) _gmpc_progress_tooltip_expose_event_callback_gtk_widget_expose_event, self, 0);
-	}
-	if ((*event).type == GDK_LEAVE_NOTIFY) {
-		if (self->priv->tooltip != NULL) {
-			GtkWindow* _tmp2_;
-			gtk_object_destroy ((GtkObject*) self->priv->tooltip);
-			self->priv->tooltip = (_tmp2_ = NULL, _g_object_unref0 (self->priv->tooltip), _tmp2_);
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static glong string_get_length (const char* self) {
-	glong result;
-	g_return_val_if_fail (self != NULL, 0L);
-	result = g_utf8_strlen (self, -1);
-	return result;
-}
-
-
-static gboolean gmpc_progress_motion_notify_event_callback (GmpcProgress* self, GtkScale* scale, GdkEventMotion* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (scale != NULL, FALSE);
-	if ((*event).type == GDK_MOTION_NOTIFY) {
-		if (self->priv->tooltip != NULL) {
-			gint e_hour = 0;
-			gint e_minutes = 0;
-			gint e_seconds = 0;
-			gint t_hour;
-			gint t_minutes;
-			gint t_seconds;
-			char* a;
-			guint p;
-			guint _tmp0_ = 0U;
-			char* _tmp5_;
-			char* _tmp4_;
-			t_hour = ((gint) self->priv->total) / 3600;
-			t_minutes = (((gint) self->priv->total) % 3600) / 60;
-			t_seconds = ((gint) self->priv->total) % 60;
-			a = g_strdup ("");
-			p = (guint) (self->priv->total * ((*event).x / ((double) (((GtkWidget*) scale)->allocation.width - gtk_widget_get_style ((GtkWidget*) scale)->xthickness))));
-			if (p > self->priv->total) {
-				_tmp0_ = self->priv->total;
-			} else {
-				_tmp0_ = p;
-			}
-			p = _tmp0_;
-			if (self->priv->do_countdown) {
-				char* _tmp1_;
-				a = (_tmp1_ = g_strconcat (a, "-", NULL), _g_free0 (a), _tmp1_);
-				p = self->priv->total - p;
-			}
-			e_hour = ((gint) p) / 3600;
-			e_minutes = ((gint) (p % 3600)) / 60;
-			e_seconds = (gint) (p % 60);
-			if (e_hour > 0) {
-				char* _tmp3_;
-				char* _tmp2_;
-				a = (_tmp3_ = g_strconcat (a, _tmp2_ = g_strdup_printf ("%02i:", e_hour), NULL), _g_free0 (a), _tmp3_);
-				_g_free0 (_tmp2_);
-			}
-			a = (_tmp5_ = g_strconcat (a, _tmp4_ = g_strdup_printf ("%02i:%02i", e_minutes, e_seconds), NULL), _g_free0 (a), _tmp5_);
-			_g_free0 (_tmp4_);
-			if (self->priv->total > 0) {
-				char* _tmp6_;
-				char* _tmp10_;
-				char* _tmp9_;
-				a = (_tmp6_ = g_strconcat (a, " - ", NULL), _g_free0 (a), _tmp6_);
-				if (t_hour > 0) {
-					char* _tmp8_;
-					char* _tmp7_;
-					a = (_tmp8_ = g_strconcat (a, _tmp7_ = g_strdup_printf ("%02i:", t_hour), NULL), _g_free0 (a), _tmp8_);
-					_g_free0 (_tmp7_);
-				}
-				a = (_tmp10_ = g_strconcat (a, _tmp9_ = g_strdup_printf ("%02i:%02i", t_minutes, t_seconds), NULL), _g_free0 (a), _tmp10_);
-				_g_free0 (_tmp9_);
-			}
-			if (self->priv->do_countdown) {
-				gtk_label_set_width_chars (self->priv->tooltip_label, (gint) string_get_length (a));
-			} else {
-				gtk_label_set_width_chars (self->priv->tooltip_label, ((gint) string_get_length (a)) + 1);
-			}
-			gtk_label_set_text (self->priv->tooltip_label, a);
-			gtk_widget_show_all ((GtkWidget*) self->priv->tooltip);
-			gtk_widget_realize ((GtkWidget*) self->priv->tooltip);
-			gtk_window_move (self->priv->tooltip, ((gint) (*event).x_root) - (((GtkWidget*) self->priv->tooltip)->allocation.width / 2), ((gint) (*event).y_root) + ((GtkWidget*) self->priv->tooltip)->allocation.height);
-			_g_free0 (a);
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static void gmpc_progress_value_changed (GmpcProgress* self, GtkScale* range) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (range != NULL);
-	if (self->priv->total > 0) {
-		guint seconds;
-		seconds = (guint) (self->priv->total * gtk_range_get_value ((GtkRange*) range));
-		if (seconds != self->priv->current) {
-			g_signal_emit_by_name (self, "seek-event", seconds);
-		}
-	}
-}
-
-
-static gboolean gmpc_progress_button_release_event_callback (GmpcProgress* self, GtkScale* scale, GdkEventButton* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (scale != NULL, FALSE);
-	self->priv->press--;
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean gmpc_progress_button_press_event_callback (GmpcProgress* self, GdkEventButton* event, GtkScale* scale) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (scale != NULL, FALSE);
-	self->priv->press++;
-	if ((*event).type == GDK_BUTTON_PRESS) {
-		gboolean _tmp0_ = FALSE;
-		if ((*event).button == 3) {
-			guint cur;
-			guint tot;
-			self->priv->do_countdown = !self->priv->do_countdown;
-			cur = self->priv->current;
-			tot = self->priv->total;
-			self->priv->total = self->priv->current = (guint) 0;
-			gmpc_progress_set_time (self, tot, cur);
-		}
-		if ((*event).button == 2) {
-			_tmp0_ = TRUE;
-		} else {
-			_tmp0_ = (*event).button == 1;
-		}
-		if (_tmp0_) {
-			guint p;
-			guint _tmp1_ = 0U;
-			p = (guint) (self->priv->total * ((*event).x / ((double) (((GtkWidget*) scale)->allocation.width - gtk_widget_get_style ((GtkWidget*) scale)->xthickness))));
-			if (p > self->priv->total) {
-				_tmp1_ = self->priv->total;
-			} else {
-				_tmp1_ = p;
-			}
-			p = _tmp1_;
-			g_signal_emit_by_name (self, "seek-event", p);
-			result = TRUE;
-			return result;
-		}
-	} else {
-		if ((*event).type == GDK_2BUTTON_PRESS) {
-			gboolean _tmp2_ = FALSE;
-			if ((*event).button == 2) {
-				_tmp2_ = TRUE;
-			} else {
-				_tmp2_ = (*event).button == 1;
-			}
-			if (_tmp2_) {
-				guint p;
-				guint _tmp3_ = 0U;
-				p = (guint) (self->priv->total * ((*event).x / ((double) (((GtkWidget*) scale)->allocation.width - gtk_widget_get_style ((GtkWidget*) scale)->xthickness))));
-				if (p > self->priv->total) {
-					_tmp3_ = self->priv->total;
-				} else {
-					_tmp3_ = p;
-				}
-				p = _tmp3_;
-				g_signal_emit_by_name (self, "seek-event", p);
-				result = TRUE;
-				return result;
-			}
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean gmpc_progress_scroll_event_callback (GmpcProgress* self, GtkScale* scale, GdkEventScroll* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (scale != NULL, FALSE);
-	if ((*event).direction == GDK_SCROLL_UP) {
-		g_signal_emit_by_name (self, "seek-event", self->priv->current + 5);
-	} else {
-		if ((*event).direction == GDK_SCROLL_DOWN) {
-			g_signal_emit_by_name (self, "seek-event", self->priv->current - 5);
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-void gmpc_progress_set_time (GmpcProgress* self, guint total, guint current) {
-	gboolean _tmp0_ = FALSE;
-	g_return_if_fail (self != NULL);
-	if (self->priv->press > 0) {
-		return;
-	}
-	if (self->priv->total != total) {
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->scale, total > 0);
-	}
-	if (self->priv->total != total) {
-		_tmp0_ = TRUE;
-	} else {
-		_tmp0_ = self->priv->current != current;
-	}
-	if (_tmp0_) {
-		self->priv->total = total;
-		self->priv->current = current;
-		g_signal_handler_block (self->priv->scale, self->priv->set_value_handler);
-		if (self->priv->total > 0) {
-			gtk_range_set_value ((GtkRange*) self->priv->scale, self->priv->current / ((double) self->priv->total));
-		} else {
-			gtk_range_set_value ((GtkRange*) self->priv->scale, 0.0);
-		}
-		g_signal_handler_unblock (self->priv->scale, self->priv->set_value_handler);
-		if (gmpc_progress_get_hide_text (self) == FALSE) {
-			gint e_hour = 0;
-			gint e_minutes = 0;
-			gint e_seconds = 0;
-			gint t_hour;
-			gint t_minutes;
-			gint t_seconds;
-			char* a;
-			guint p;
-			char* _tmp5_;
-			char* _tmp4_;
-			t_hour = ((gint) self->priv->total) / 3600;
-			t_minutes = (((gint) self->priv->total) % 3600) / 60;
-			t_seconds = ((gint) self->priv->total) % 60;
-			a = g_strdup ("");
-			p = self->priv->current;
-			if (self->priv->do_countdown) {
-				char* _tmp1_;
-				p = self->priv->total - self->priv->current;
-				a = (_tmp1_ = g_strconcat (a, "-", NULL), _g_free0 (a), _tmp1_);
-			}
-			e_hour = ((gint) p) / 3600;
-			e_minutes = ((gint) (p % 3600)) / 60;
-			e_seconds = (gint) (p % 60);
-			if (e_hour > 0) {
-				char* _tmp3_;
-				char* _tmp2_;
-				a = (_tmp3_ = g_strconcat (a, _tmp2_ = g_strdup_printf ("%02i:", e_hour), NULL), _g_free0 (a), _tmp3_);
-				_g_free0 (_tmp2_);
-			}
-			a = (_tmp5_ = g_strconcat (a, _tmp4_ = g_strdup_printf ("%02i:%02i", e_minutes, e_seconds), NULL), _g_free0 (a), _tmp5_);
-			_g_free0 (_tmp4_);
-			if (self->priv->total > 0) {
-				char* _tmp6_;
-				char* _tmp10_;
-				char* _tmp9_;
-				a = (_tmp6_ = g_strconcat (a, " - ", NULL), _g_free0 (a), _tmp6_);
-				if (t_hour > 0) {
-					char* _tmp8_;
-					char* _tmp7_;
-					a = (_tmp8_ = g_strconcat (a, _tmp7_ = g_strdup_printf ("%02i:", t_hour), NULL), _g_free0 (a), _tmp8_);
-					_g_free0 (_tmp7_);
-				}
-				a = (_tmp10_ = g_strconcat (a, _tmp9_ = g_strdup_printf ("%02i:%02i", t_minutes, t_seconds), NULL), _g_free0 (a), _tmp10_);
-				_g_free0 (_tmp9_);
-			}
-			if (self->priv->do_countdown) {
-				gtk_label_set_width_chars (self->priv->label, (gint) string_get_length (a));
-			} else {
-				gtk_label_set_width_chars (self->priv->label, ((gint) string_get_length (a)) + 1);
-			}
-			gtk_label_set_text (self->priv->label, a);
-			_g_free0 (a);
-		}
-	}
-}
-
-
-GmpcProgress* gmpc_progress_construct (GType object_type) {
-	GmpcProgress * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcProgress* gmpc_progress_new (void) {
-	return gmpc_progress_construct (GMPC_TYPE_PROGRESS);
-}
-
-
-gboolean gmpc_progress_get_hide_text (GmpcProgress* self) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	result = self->_hide_text;
-	return result;
-}
-
-
-void gmpc_progress_set_hide_text (GmpcProgress* self, gboolean value) {
-	g_return_if_fail (self != NULL);
-	self->_hide_text = value;
-	if (self->_hide_text) {
-		gtk_widget_hide ((GtkWidget*) self->priv->label);
-	} else {
-		gtk_widget_show ((GtkWidget*) self->priv->label);
-	}
-	g_object_notify ((GObject *) self, "hide-text");
-}
-
-
-static gboolean _gmpc_progress_scroll_event_callback_gtk_widget_scroll_event (GtkScale* _sender, GdkEventScroll* event, gpointer self) {
-	return gmpc_progress_scroll_event_callback (self, _sender, event);
-}
-
-
-static gboolean _gmpc_progress_button_release_event_callback_gtk_widget_button_release_event (GtkScale* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_progress_button_release_event_callback (self, _sender, event);
-}
-
-
-static gboolean _gmpc_progress_motion_notify_event_callback_gtk_widget_motion_notify_event (GtkScale* _sender, GdkEventMotion* event, gpointer self) {
-	return gmpc_progress_motion_notify_event_callback (self, _sender, event);
-}
-
-
-static gboolean _gmpc_progress_enter_notify_event_callback_gtk_widget_enter_notify_event (GtkScale* _sender, GdkEventCrossing* event, gpointer self) {
-	return gmpc_progress_enter_notify_event_callback (self, _sender, event);
-}
-
-
-static gboolean _gmpc_progress_enter_notify_event_callback_gtk_widget_leave_notify_event (GtkScale* _sender, GdkEventCrossing* event, gpointer self) {
-	return gmpc_progress_enter_notify_event_callback (self, _sender, event);
-}
-
-
-static GObject * gmpc_progress_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcProgress * self;
-	parent_class = G_OBJECT_CLASS (gmpc_progress_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_PROGRESS (obj);
-	{
-		GtkScale* _tmp0_;
-		GtkLabel* _tmp1_;
-		self->priv->scale = (_tmp0_ = (GtkScale*) g_object_ref_sink ((GtkHScale*) gtk_hscale_new (NULL)), _g_object_unref0 (self->priv->scale), _tmp0_);
-		gtk_range_set_range ((GtkRange*) self->priv->scale, 0.0, 1.0);
-		gtk_scale_set_draw_value (self->priv->scale, FALSE);
-		self->priv->set_value_handler = g_signal_connect_swapped (self->priv->scale, "value_changed", (GCallback) gmpc_progress_value_changed, self);
-		gtk_range_set_update_policy ((GtkRange*) self->priv->scale, GTK_UPDATE_DISCONTINUOUS);
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->scale, FALSE);
-		gtk_widget_add_events ((GtkWidget*) self->priv->scale, (gint) GDK_SCROLL_MASK);
-		gtk_widget_add_events ((GtkWidget*) self->priv->scale, (gint) GDK_POINTER_MOTION_MASK);
-		gtk_widget_add_events ((GtkWidget*) self->priv->scale, (gint) GDK_ENTER_NOTIFY_MASK);
-		gtk_widget_add_events ((GtkWidget*) self->priv->scale, (gint) GDK_LEAVE_NOTIFY_MASK);
-		g_signal_connect_object ((GtkWidget*) self->priv->scale, "scroll-event", (GCallback) _gmpc_progress_scroll_event_callback_gtk_widget_scroll_event, self, 0);
-		g_signal_connect_object (self->priv->scale, "button-press-event", (GCallback) gmpc_progress_button_press_event_callback, (GObject*) self, G_CONNECT_SWAPPED | G_CONNECT_AFTER);
-		g_signal_connect_object ((GtkWidget*) self->priv->scale, "button-release-event", (GCallback) _gmpc_progress_button_release_event_callback_gtk_widget_button_release_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self->priv->scale, "motion-notify-event", (GCallback) _gmpc_progress_motion_notify_event_callback_gtk_widget_motion_notify_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self->priv->scale, "enter-notify-event", (GCallback) _gmpc_progress_enter_notify_event_callback_gtk_widget_enter_notify_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self->priv->scale, "leave-notify-event", (GCallback) _gmpc_progress_enter_notify_event_callback_gtk_widget_leave_notify_event, self, 0);
-		self->priv->label = (_tmp1_ = g_object_ref_sink ((GtkLabel*) gtk_label_new ("")), _g_object_unref0 (self->priv->label), _tmp1_);
-		gtk_misc_set_alignment ((GtkMisc*) self->priv->label, 1.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) self, (GtkWidget*) self->priv->scale, TRUE, TRUE, (guint) 0);
-		gtk_box_pack_end ((GtkBox*) self, (GtkWidget*) self->priv->label, FALSE, TRUE, (guint) 0);
-		gtk_widget_show_all ((GtkWidget*) self);
-	}
-	return obj;
-}
-
-
-static void gmpc_progress_class_init (GmpcProgressClass * klass) {
-	gmpc_progress_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcProgressPrivate));
-	G_OBJECT_CLASS (klass)->get_property = gmpc_progress_get_property;
-	G_OBJECT_CLASS (klass)->set_property = gmpc_progress_set_property;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_progress_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_progress_finalize;
-	g_object_class_install_property (G_OBJECT_CLASS (klass), GMPC_PROGRESS_HIDE_TEXT, g_param_spec_boolean ("hide-text", "hide-text", "hide-text", FALSE, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
-	g_signal_new ("seek_event", GMPC_TYPE_PROGRESS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__UINT, G_TYPE_NONE, 1, G_TYPE_UINT);
-}
-
-
-static void gmpc_progress_instance_init (GmpcProgress * self) {
-	self->priv = GMPC_PROGRESS_GET_PRIVATE (self);
-	self->priv->total = (guint) 0;
-	self->priv->current = (guint) 0;
-	self->priv->do_countdown = FALSE;
-	self->_hide_text = FALSE;
-	self->priv->scale = NULL;
-	self->priv->label = NULL;
-	self->priv->set_value_handler = (gulong) 0;
-	self->priv->tooltip = NULL;
-	self->priv->tooltip_label = NULL;
-	self->priv->press = 0;
-}
-
-
-static void gmpc_progress_finalize (GObject* obj) {
-	GmpcProgress * self;
-	self = GMPC_PROGRESS (obj);
-	{
-		if (self->priv->tooltip != NULL) {
-			GtkWindow* _tmp2_;
-			gtk_object_destroy ((GtkObject*) self->priv->tooltip);
-			self->priv->tooltip = (_tmp2_ = NULL, _g_object_unref0 (self->priv->tooltip), _tmp2_);
-		}
-	}
-	_g_object_unref0 (self->priv->scale);
-	_g_object_unref0 (self->priv->label);
-	_g_object_unref0 (self->priv->tooltip);
-	_g_object_unref0 (self->priv->tooltip_label);
-	G_OBJECT_CLASS (gmpc_progress_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_progress_get_type (void) {
-	static GType gmpc_progress_type_id = 0;
-	if (gmpc_progress_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcProgressClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_progress_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcProgress), 0, (GInstanceInitFunc) gmpc_progress_instance_init, NULL };
-		gmpc_progress_type_id = g_type_register_static (GTK_TYPE_HBOX, "GmpcProgress", &g_define_type_info, 0);
-	}
-	return gmpc_progress_type_id;
-}
-
-
-static void gmpc_progress_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec) {
-	GmpcProgress * self;
-	self = GMPC_PROGRESS (object);
-	switch (property_id) {
-		case GMPC_PROGRESS_HIDE_TEXT:
-		g_value_set_boolean (value, gmpc_progress_get_hide_text (self));
-		break;
-		default:
-		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-		break;
-	}
-}
-
-
-static void gmpc_progress_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec) {
-	GmpcProgress * self;
-	self = GMPC_PROGRESS (object);
-	switch (property_id) {
-		case GMPC_PROGRESS_HIDE_TEXT:
-		gmpc_progress_set_hide_text (self, g_value_get_boolean (value));
-		break;
-		default:
-		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-		break;
-	}
-}
-
-
-
-
diff --git a/src/browsers/gmpc-metadata-browser2.c b/src/browsers/gmpc-metadata-browser2.c
deleted file mode 100644
index 8bf3889..0000000
--- a/src/browsers/gmpc-metadata-browser2.c
+++ /dev/null
@@ -1,5714 +0,0 @@
-/* gmpc-metadata-browser2.c generated by valac, the Vala compiler
- * generated from gmpc-metadata-browser2.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include "gmpc-extras.h"
-#include <libmpd/libmpdclient.h>
-#include <libmpd/libmpd.h>
-#include <metadata.h>
-#include <plugin.h>
-#include <mpdinteraction.h>
-#include <glib/gi18n-lib.h>
-#include <gdk/gdk.h>
-#include <gmpc-mpddata-model.h>
-#include <gmpc-meta-watcher.h>
-#include <main.h>
-#include <misc.h>
-#include <gmpc-metaimage.h>
-#include <pango/pango.h>
-#include <config1.h>
-#include <stdio.h>
-#include <gmpc-meta-text-view.h>
-#include <gmpc-stats-label.h>
-
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _meta_data_free0(var) ((var == NULL) ? NULL : (var = (meta_data_free (var), NULL)))
-#define _mpd_data_free0(var) ((var == NULL) ? NULL : (var = (mpd_data_free (var), NULL)))
-#define _gtk_tree_path_free0(var) ((var == NULL) ? NULL : (var = (gtk_tree_path_free (var), NULL)))
-#define __g_list_free_gtk_tree_path_free0(var) ((var == NULL) ? NULL : (var = (_g_list_free_gtk_tree_path_free (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _g_list_free0(var) ((var == NULL) ? NULL : (var = (g_list_free (var), NULL)))
-#define __g_list_free_g_object_unref0(var) ((var == NULL) ? NULL : (var = (_g_list_free_g_object_unref (var), NULL)))
-
-#define GMPC_METADATA_BROWSER_TYPE_HITEM (gmpc_metadata_browser_hitem_get_type ())
-
-#define GMPC_METADATA_BROWSER_TYPE_HITEM_TYPE (gmpc_metadata_browser_hitem_type_get_type ())
-typedef struct _GmpcMetadataBrowserHitem GmpcMetadataBrowserHitem;
-#define _gtk_tree_row_reference_free0(var) ((var == NULL) ? NULL : (var = (gtk_tree_row_reference_free (var), NULL)))
-#define __g_list_free_gmpc_metadata_browser_hitem_free0(var) ((var == NULL) ? NULL : (var = (_g_list_free_gmpc_metadata_browser_hitem_free (var), NULL)))
-#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-typedef struct _Block4Data Block4Data;
-typedef struct _Block5Data Block5Data;
-typedef struct _Block6Data Block6Data;
-typedef struct _Block7Data Block7Data;
-typedef struct _Block8Data Block8Data;
-typedef struct _Block3Data Block3Data;
-typedef struct _Block10Data Block10Data;
-typedef struct _Block11Data Block11Data;
-typedef struct _Block12Data Block12Data;
-typedef struct _Block9Data Block9Data;
-typedef struct _Block14Data Block14Data;
-typedef struct _Block15Data Block15Data;
-typedef struct _Block16Data Block16Data;
-typedef struct _Block17Data Block17Data;
-typedef struct _Block18Data Block18Data;
-typedef struct _Block13Data Block13Data;
-#define _gmpc_metadata_browser_hitem_free0(var) ((var == NULL) ? NULL : (var = (gmpc_metadata_browser_hitem_free (var), NULL)))
-
-struct _GmpcWidgetSimilarSongsPrivate {
-	mpd_Song* song;
-	GtkWidget* pchild;
-	guint idle_add;
-	MetaData* copy;
-	MpdData* item;
-	GList* current;
-};
-
-struct _GmpcWidgetSimilarArtistPrivate {
-	mpd_Song* song;
-	gint columns;
-	gint button_width;
-};
-
-typedef enum  {
-	GMPC_METADATA_BROWSER_HITEM_TYPE_CLEAR,
-	GMPC_METADATA_BROWSER_HITEM_TYPE_ARTIST,
-	GMPC_METADATA_BROWSER_HITEM_TYPE_ALBUM,
-	GMPC_METADATA_BROWSER_HITEM_TYPE_SONG
-} GmpcMetadataBrowserHitemType;
-
-struct _GmpcMetadataBrowserHitem {
-	GmpcMetadataBrowserHitemType type;
-	mpd_Song* song;
-};
-
-struct _GmpcMetadataBrowserPrivate {
-	gint block_update;
-	GtkTreeRowReference* rref;
-	char* title_color;
-	char* item_color;
-	gboolean theme_colors;
-	GdkColor background;
-	GdkColor foreground;
-	GtkPaned* paned;
-	GtkBox* browser_box;
-	GtkTreeView* tree_artist;
-	GmpcMpdDataModel* model_artist;
-	GtkTreeModelFilter* model_filter_artist;
-	GtkEntry* artist_filter_entry;
-	GtkTreeView* tree_album;
-	GmpcMpdDataModel* model_albums;
-	GtkTreeModelFilter* model_filter_album;
-	GtkEntry* album_filter_entry;
-	GtkTreeView* tree_songs;
-	GmpcMpdDataModel* model_songs;
-	GtkScrolledWindow* metadata_sw;
-	GtkEventBox* metadata_box;
-	guint update_timeout;
-	gboolean selected;
-	GList* history;
-	GList* current;
-};
-
-struct _Block4Data {
-	int _ref_count_;
-	Block3Data * _data3_;
-	gint j;
-};
-
-struct _Block5Data {
-	int _ref_count_;
-	Block3Data * _data3_;
-	GmpcMetaTextView* text_view;
-	gboolean text_view_queried;
-	gint j;
-};
-
-struct _Block6Data {
-	int _ref_count_;
-	Block3Data * _data3_;
-	gboolean similar_songs_queried;
-	GtkAlignment* similar_songs_box;
-	gint j;
-};
-
-struct _Block7Data {
-	int _ref_count_;
-	Block3Data * _data3_;
-	gint j;
-};
-
-struct _Block8Data {
-	int _ref_count_;
-	Block3Data * _data3_;
-	gint j;
-};
-
-struct _Block3Data {
-	int _ref_count_;
-	GmpcMetadataBrowser * self;
-	GtkNotebook* notebook;
-	mpd_Song* song;
-};
-
-struct _Block10Data {
-	int _ref_count_;
-	Block9Data * _data9_;
-	gint j;
-};
-
-struct _Block11Data {
-	int _ref_count_;
-	Block9Data * _data9_;
-	gint j;
-};
-
-struct _Block12Data {
-	int _ref_count_;
-	Block9Data * _data9_;
-	gint j;
-};
-
-struct _Block9Data {
-	int _ref_count_;
-	GmpcMetadataBrowser * self;
-	GtkNotebook* notebook;
-};
-
-struct _Block14Data {
-	int _ref_count_;
-	Block13Data * _data13_;
-	gint j;
-};
-
-struct _Block15Data {
-	int _ref_count_;
-	Block13Data * _data13_;
-	gint j;
-};
-
-struct _Block16Data {
-	int _ref_count_;
-	Block13Data * _data13_;
-	gint j;
-};
-
-struct _Block17Data {
-	int _ref_count_;
-	Block13Data * _data13_;
-	gint j;
-};
-
-struct _Block18Data {
-	int _ref_count_;
-	Block13Data * _data13_;
-	mpd_Song* but_song;
-};
-
-struct _Block13Data {
-	int _ref_count_;
-	GmpcMetadataBrowser * self;
-	mpd_Song* song;
-	GtkNotebook* notebook;
-};
-
-
-static gpointer gmpc_widget_similar_songs_parent_class = NULL;
-static gpointer gmpc_widget_similar_artist_parent_class = NULL;
-static gpointer gmpc_metadata_browser_parent_class = NULL;
-static GmpcPluginBrowserIfaceIface* gmpc_metadata_browser_gmpc_plugin_browser_iface_parent_iface = NULL;
-static GmpcPluginPreferencesIfaceIface* gmpc_metadata_browser_gmpc_plugin_preferences_iface_parent_iface = NULL;
-
-#define use_transition_mdb TRUE
-#define some_unique_name_mdb VERSION
-#define GMPC_WIDGET_SIMILAR_SONGS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_WIDGET_TYPE_SIMILAR_SONGS, GmpcWidgetSimilarSongsPrivate))
-enum  {
-	GMPC_WIDGET_SIMILAR_SONGS_DUMMY_PROPERTY
-};
-static void _g_list_free_gtk_tree_path_free (GList* self);
-static void gmpc_widget_similar_songs_add_clicked (GmpcWidgetSimilarSongs* self, GtkImageMenuItem* item);
-static void gmpc_widget_similar_songs_play_clicked (GmpcWidgetSimilarSongs* self, GtkImageMenuItem* item);
-static void gmpc_widget_similar_songs_replace_clicked (GmpcWidgetSimilarSongs* self, GtkImageMenuItem* item);
-static void gmpc_widget_similar_songs_tree_row_activated (GmpcWidgetSimilarSongs* self, GmpcMpdDataTreeview* tree, GtkTreePath* path, GtkTreeViewColumn* column);
-static void _gmpc_widget_similar_songs_play_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static void _gmpc_widget_similar_songs_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static void _gmpc_widget_similar_songs_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static gboolean gmpc_widget_similar_songs_tree_right_menu (GmpcWidgetSimilarSongs* self, GmpcMpdDataTreeview* tree, GdkEventButton* event);
-static gboolean _gmpc_widget_similar_songs_tree_right_menu_gtk_widget_button_release_event (GmpcMpdDataTreeview* _sender, GdkEventButton* event, gpointer self);
-static void _gmpc_widget_similar_songs_tree_row_activated_gtk_tree_view_row_activated (GmpcMpdDataTreeview* _sender, GtkTreePath* path, GtkTreeViewColumn* column, gpointer self);
-static gboolean gmpc_widget_similar_songs_update_sim_song (GmpcWidgetSimilarSongs* self);
-static gboolean _gmpc_widget_similar_songs_update_sim_song_gsource_func (gpointer self);
-static void gmpc_widget_similar_songs_metadata_changed (GmpcWidgetSimilarSongs* self, GmpcMetaWatcher* gmw2, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met);
-static void _gmpc_widget_similar_songs_metadata_changed_gmpc_meta_watcher_data_changed (GmpcMetaWatcher* _sender, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met, gpointer self);
-static void gmpc_widget_similar_songs_finalize (GObject* obj);
-#define GMPC_WIDGET_SIMILAR_ARTIST_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_WIDGET_TYPE_SIMILAR_ARTIST, GmpcWidgetSimilarArtistPrivate))
-enum  {
-	GMPC_WIDGET_SIMILAR_ARTIST_DUMMY_PROPERTY
-};
-static void gmpc_widget_similar_artist_size_changed (GmpcWidgetSimilarArtist* self, GdkRectangle* alloc);
-static void _g_list_free_g_object_unref (GList* self);
-static void gmpc_widget_similar_artist_metadata_changed (GmpcWidgetSimilarArtist* self, GmpcMetaWatcher* gmw2, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met);
-static void gmpc_widget_similar_artist_artist_button_clicked (GmpcWidgetSimilarArtist* self, GtkButton* button);
-static gboolean _misc_header_expose_event_gtk_widget_expose_event (GtkWidget* _sender, GdkEventExpose* event, gpointer self);
-static void _gmpc_widget_similar_artist_artist_button_clicked_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _gmpc_widget_similar_artist_metadata_changed_gmpc_meta_watcher_data_changed (GmpcMetaWatcher* _sender, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met, gpointer self);
-static void _gmpc_widget_similar_artist_size_changed_gtk_widget_size_allocate (GtkWidget* _sender, GdkRectangle* allocation, gpointer self);
-static void gmpc_widget_similar_artist_finalize (GObject* obj);
-static GType gmpc_metadata_browser_hitem_get_type (void);
-static GType gmpc_metadata_browser_hitem_type_get_type (void);
-static GmpcMetadataBrowserHitem* gmpc_metadata_browser_hitem_dup (const GmpcMetadataBrowserHitem* self);
-static void gmpc_metadata_browser_hitem_free (GmpcMetadataBrowserHitem* self);
-static void gmpc_metadata_browser_hitem_copy (const GmpcMetadataBrowserHitem* self, GmpcMetadataBrowserHitem* dest);
-static void gmpc_metadata_browser_hitem_destroy (GmpcMetadataBrowserHitem* self);
-#define GMPC_METADATA_BROWSER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_TYPE_METADATA_BROWSER, GmpcMetadataBrowserPrivate))
-enum  {
-	GMPC_METADATA_BROWSER_DUMMY_PROPERTY
-};
-static void _g_list_free_gmpc_metadata_browser_hitem_free (GList* self);
-static gint* gmpc_metadata_browser_real_get_version (GmpcPluginBase* base, int* result_length1);
-static const char* gmpc_metadata_browser_real_get_name (GmpcPluginBase* base);
-static void gmpc_metadata_browser_real_save_yourself (GmpcPluginBase* base);
-static void gmpc_metadata_browser_select_metadata_browser (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void _gmpc_metadata_browser_select_metadata_browser_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static gint gmpc_metadata_browser_real_browser_add_go_menu (GmpcPluginBrowserIface* base, GtkMenu* menu);
-static void gmpc_metadata_browser_change_color_style (GmpcMetadataBrowser* self, GtkWidget* bg);
-static void gmpc_metadata_browser_browser_bg_style_changed (GmpcMetadataBrowser* self, GtkContainer* bg, GtkStyle* style);
-static gboolean gmpc_metadata_browser_browser_button_press_event (GmpcMetadataBrowser* self, GtkTreeView* tree, GdkEventButton* event);
-static void gmpc_metadata_browser_browser_artist_entry_changed (GmpcMetadataBrowser* self, GtkEntry* entry);
-static char* gmpc_metadata_browser_browser_get_selected_artist (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_artist_add_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void gmpc_metadata_browser_artist_replace_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void _gmpc_metadata_browser_artist_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static void _gmpc_metadata_browser_artist_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static gboolean gmpc_metadata_browser_artist_browser_button_release_event (GmpcMetadataBrowser* self, GtkTreeView* tree, GdkEventButton* event);
-static gboolean gmpc_metadata_browser_visible_func_artist (GmpcMetadataBrowser* self, GtkTreeModel* model, GtkTreeIter* iter);
-static gboolean gmpc_metadata_browser_browser_artist_key_press_event (GmpcMetadataBrowser* self, GtkTreeView* widget, GdkEventKey* event);
-static char* gmpc_metadata_browser_browser_get_selected_album (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_album_add_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void gmpc_metadata_browser_album_replace_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void _gmpc_metadata_browser_album_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static void _gmpc_metadata_browser_album_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static gboolean gmpc_metadata_browser_album_browser_button_release_event (GmpcMetadataBrowser* self, GtkTreeView* tree, GdkEventButton* event);
-static gboolean gmpc_metadata_browser_visible_func_album (GmpcMetadataBrowser* self, GtkTreeModel* model, GtkTreeIter* iter);
-static gboolean gmpc_metadata_browser_browser_album_key_press_event (GmpcMetadataBrowser* self, GtkTreeView* widget, GdkEventKey* event);
-static void gmpc_metadata_browser_browser_album_entry_changed (GmpcMetadataBrowser* self, GtkEntry* entry);
-static mpd_Song* gmpc_metadata_browser_browser_get_selected_song (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_song_add_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void gmpc_metadata_browser_song_replace_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void _gmpc_metadata_browser_song_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static void _gmpc_metadata_browser_song_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static gboolean gmpc_metadata_browser_song_browser_button_release_event (GmpcMetadataBrowser* self, GtkTreeView* tree, GdkEventButton* event);
-static void gmpc_metadata_browser_history_previous (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_history_next (GmpcMetadataBrowser* self);
-static gboolean gmpc_metadata_browser_browser_button_release_event (GmpcMetadataBrowser* self, GtkWidget* widget, GdkEventButton* event);
-static void _gmpc_metadata_browser_browser_bg_style_changed_gtk_widget_style_set (GtkPaned* _sender, GtkStyle* previous_style, gpointer self);
-static void _gmpc_metadata_browser_browser_artist_entry_changed_gtk_editable_changed (GtkEntry* _sender, gpointer self);
-static gboolean _gmpc_metadata_browser_visible_func_artist_gtk_tree_model_filter_visible_func (GtkTreeModel* model, GtkTreeIter* iter, gpointer self);
-static gboolean _gmpc_metadata_browser_browser_button_press_event_gtk_widget_button_press_event (GtkTreeView* _sender, GdkEventButton* event, gpointer self);
-static gboolean _gmpc_metadata_browser_artist_browser_button_release_event_gtk_widget_button_release_event (GtkTreeView* _sender, GdkEventButton* event, gpointer self);
-static gboolean _gmpc_metadata_browser_browser_artist_key_press_event_gtk_widget_key_press_event (GtkTreeView* _sender, GdkEventKey* event, gpointer self);
-static void gmpc_metadata_browser_browser_artist_changed (GmpcMetadataBrowser* self, GtkTreeSelection* sel);
-static void _gmpc_metadata_browser_browser_artist_changed_gtk_tree_selection_changed (GtkTreeSelection* _sender, gpointer self);
-static void _gmpc_metadata_browser_browser_album_entry_changed_gtk_editable_changed (GtkEntry* _sender, gpointer self);
-static gboolean _gmpc_metadata_browser_visible_func_album_gtk_tree_model_filter_visible_func (GtkTreeModel* model, GtkTreeIter* iter, gpointer self);
-static gboolean _gmpc_metadata_browser_album_browser_button_release_event_gtk_widget_button_release_event (GtkTreeView* _sender, GdkEventButton* event, gpointer self);
-static gboolean _gmpc_metadata_browser_browser_album_key_press_event_gtk_widget_key_press_event (GtkTreeView* _sender, GdkEventKey* event, gpointer self);
-static void gmpc_metadata_browser_browser_album_changed (GmpcMetadataBrowser* self, GtkTreeSelection* album_sel);
-static void _gmpc_metadata_browser_browser_album_changed_gtk_tree_selection_changed (GtkTreeSelection* _sender, gpointer self);
-static gboolean _gmpc_metadata_browser_song_browser_button_release_event_gtk_widget_button_release_event (GtkTreeView* _sender, GdkEventButton* event, gpointer self);
-static void gmpc_metadata_browser_browser_songs_changed (GmpcMetadataBrowser* self, GtkTreeSelection* song_sel);
-static void _gmpc_metadata_browser_browser_songs_changed_gtk_tree_selection_changed (GtkTreeSelection* _sender, gpointer self);
-static gboolean _gmpc_metadata_browser_browser_button_release_event_gtk_widget_button_release_event (GtkWidget* _sender, GdkEventButton* event, gpointer self);
-static void gmpc_metadata_browser_reload_browsers (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_browser_init (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_metadata_box_clear (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_metadata_box_update (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_add_selected_song (GmpcMetadataBrowser* self, GtkButton* button);
-static void gmpc_metadata_browser_replace_selected_song (GmpcMetadataBrowser* self, GtkButton* button);
-static void gmpc_metadata_browser_add_entry (GmpcMetadataBrowser* self, GtkTable* table, const char* entry_label, const char* value, GtkWidget* extra, gint* i, const char* image);
-static GtkHBox* gmpc_metadata_browser_history_buttons (GmpcMetadataBrowser* self);
-static char* gmpc_metadata_browser_get_extension (GmpcMetadataBrowser* self, const char* path);
-static void _gmpc_metadata_browser_add_selected_song_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _gmpc_metadata_browser_replace_selected_song_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _lambda4_ (GtkButton* source, Block4Data* _data4_);
-static void __lambda4__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block4Data* block4_data_ref (Block4Data* _data4_);
-static void block4_data_unref (Block4Data* _data4_);
-static void _lambda5_ (GtkButton* source, Block5Data* _data5_);
-static void __lambda5__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block5Data* block5_data_ref (Block5Data* _data5_);
-static void block5_data_unref (Block5Data* _data5_);
-static void _lambda6_ (GtkButton* source, Block6Data* _data6_);
-static void __lambda6__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block6Data* block6_data_ref (Block6Data* _data6_);
-static void block6_data_unref (Block6Data* _data6_);
-static void _lambda7_ (GtkButton* source, Block7Data* _data7_);
-static void __lambda7__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block7Data* block7_data_ref (Block7Data* _data7_);
-static void block7_data_unref (Block7Data* _data7_);
-static void _lambda8_ (GtkButton* source, Block8Data* _data8_);
-static void __lambda8__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block8Data* block8_data_ref (Block8Data* _data8_);
-static void block8_data_unref (Block8Data* _data8_);
-static void _lambda9_ (GObject* source, GParamSpec* spec, Block3Data* _data3_);
-static void __lambda9__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self);
-static Block3Data* block3_data_ref (Block3Data* _data3_);
-static void block3_data_unref (Block3Data* _data3_);
-static void gmpc_metadata_browser_album_song_tree_row_activated (GmpcMetadataBrowser* self, GtkTreeView* tree, GtkTreePath* path, GtkTreeViewColumn* column);
-static void gmpc_metadata_browser_album_song_browser_play_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void gmpc_metadata_browser_album_song_browser_add_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void gmpc_metadata_browser_album_song_browser_replace_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item);
-static void _gmpc_metadata_browser_album_song_browser_play_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static void _gmpc_metadata_browser_album_song_browser_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static void _gmpc_metadata_browser_album_song_browser_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static gboolean gmpc_metadata_browser_album_song_tree_button_press_event (GmpcMetadataBrowser* self, GmpcMpdDataTreeview* tree, GdkEventButton* event);
-static void _lambda10_ (GtkButton* source, Block10Data* _data10_);
-static void __lambda10__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block10Data* block10_data_ref (Block10Data* _data10_);
-static void block10_data_unref (Block10Data* _data10_);
-static gboolean _gmpc_metadata_browser_album_song_tree_button_press_event_gtk_widget_button_release_event (GmpcMpdDataTreeview* _sender, GdkEventButton* event, gpointer self);
-static void _gmpc_metadata_browser_album_song_tree_row_activated_gtk_tree_view_row_activated (GmpcMpdDataTreeview* _sender, GtkTreePath* path, GtkTreeViewColumn* column, gpointer self);
-static void _lambda11_ (GtkButton* source, Block11Data* _data11_);
-static void __lambda11__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block11Data* block11_data_ref (Block11Data* _data11_);
-static void block11_data_unref (Block11Data* _data11_);
-static void _lambda12_ (GtkButton* source, Block12Data* _data12_);
-static void __lambda12__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block12Data* block12_data_ref (Block12Data* _data12_);
-static void block12_data_unref (Block12Data* _data12_);
-static void _lambda13_ (GObject* source, GParamSpec* spec, Block9Data* _data9_);
-static void __lambda13__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self);
-static Block9Data* block9_data_ref (Block9Data* _data9_);
-static void block9_data_unref (Block9Data* _data9_);
-static void gmpc_metadata_browser_metadata_box_show_album (GmpcMetadataBrowser* self, const char* artist, const char* album);
-static void _lambda14_ (GtkButton* source, Block14Data* _data14_);
-static void __lambda14__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block14Data* block14_data_ref (Block14Data* _data14_);
-static void block14_data_unref (Block14Data* _data14_);
-static void _lambda15_ (GtkButton* source, Block15Data* _data15_);
-static void __lambda15__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block15Data* block15_data_ref (Block15Data* _data15_);
-static void block15_data_unref (Block15Data* _data15_);
-static void _lambda16_ (GtkButton* source, Block16Data* _data16_);
-static void __lambda16__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block16Data* block16_data_ref (Block16Data* _data16_);
-static void block16_data_unref (Block16Data* _data16_);
-static void _lambda17_ (GtkButton* source, Block17Data* _data17_);
-static void __lambda17__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block17Data* block17_data_ref (Block17Data* _data17_);
-static void block17_data_unref (Block17Data* _data17_);
-static void _lambda18_ (GObject* source, GParamSpec* spec, Block13Data* _data13_);
-static void __lambda18__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self);
-static void _lambda19_ (GtkButton* source, Block18Data* _data18_);
-static void __lambda19__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block18Data* block18_data_ref (Block18Data* _data18_);
-static void block18_data_unref (Block18Data* _data18_);
-static Block13Data* block13_data_ref (Block13Data* _data13_);
-static void block13_data_unref (Block13Data* _data13_);
-static void gmpc_metadata_browser_metadata_box_show_artist (GmpcMetadataBrowser* self, const char* artist);
-static gboolean gmpc_metadata_browser_metadata_box_update_real (GmpcMetadataBrowser* self);
-static gboolean _gmpc_metadata_browser_metadata_box_update_real_gsource_func (gpointer self);
-static void gmpc_metadata_browser_history_add (GmpcMetadataBrowser* self, GmpcMetadataBrowserHitem* hi);
-static void gmpc_metadata_browser_real_browser_add (GmpcPluginBrowserIface* base, GtkWidget* category_tree);
-static void gmpc_metadata_browser_real_browser_selected (GmpcPluginBrowserIface* base, GtkContainer* container);
-static void gmpc_metadata_browser_real_browser_unselected (GmpcPluginBrowserIface* base, GtkContainer* container);
-static void gmpc_metadata_browser_history_clear (GmpcMetadataBrowser* self);
-static void gmpc_metadata_browser_con_changed (GmpcMetadataBrowser* self, GmpcConnection* conn, MpdObj* server, gint connect);
-static void gmpc_metadata_browser_show_hitem (GmpcMetadataBrowser* self, GmpcMetadataBrowserHitem* hi);
-static void gmpc_metadata_browser_status_changed (GmpcMetadataBrowser* self, GmpcConnection* conn, MpdObj* server, ChangedStatusType what);
-static void gmpc_metadata_browser_history_show_list_clicked (GmpcMetadataBrowser* self, GtkMenuItem* item);
-static void _gmpc_metadata_browser_history_show_list_clicked_gtk_menu_item_activate (GtkMenuItem* _sender, gpointer self);
-static void gmpc_metadata_browser_history_show_list (GmpcMetadataBrowser* self);
-static void _gmpc_metadata_browser_history_next_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _gmpc_metadata_browser_history_show_list_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _gmpc_metadata_browser_history_previous_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _lambda20_ (GtkToggleButton* source, GmpcMetadataBrowser* self);
-static void __lambda20__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self);
-static void _lambda21_ (GtkToggleButton* source, GmpcMetadataBrowser* self);
-static void __lambda21__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self);
-static void _lambda22_ (GtkToggleButton* source, GmpcMetadataBrowser* self);
-static void __lambda22__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self);
-static void _lambda23_ (GtkToggleButton* source, GmpcMetadataBrowser* self);
-static void __lambda23__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self);
-static void _lambda24_ (GtkToggleButton* source, GmpcMetadataBrowser* self);
-static void __lambda24__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self);
-static void _lambda25_ (GtkToggleButton* source, GmpcMetadataBrowser* self);
-static void __lambda25__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self);
-static void _lambda26_ (GtkToggleButton* source, GmpcMetadataBrowser* self);
-static void __lambda26__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self);
-static void gmpc_metadata_browser_real_preferences_pane_construct (GmpcPluginPreferencesIface* base, GtkContainer* container);
-static void gmpc_metadata_browser_real_preferences_pane_destroy (GmpcPluginPreferencesIface* base, GtkContainer* container);
-static void _gmpc_metadata_browser_con_changed_gmpc_connection_connection_changed (GmpcConnection* _sender, MpdObj* mi, gint connect, gpointer self);
-static void _gmpc_metadata_browser_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self);
-static GObject * gmpc_metadata_browser_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_metadata_browser_finalize (GObject* obj);
-static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func);
-static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func);
-static gint _vala_array_length (gpointer array);
-static int _vala_strcmp0 (const char * str1, const char * str2);
-
-
-
-static gpointer _mpd_songDup0 (gpointer self) {
-	return self ? mpd_songDup (self) : NULL;
-}
-
-
-GmpcWidgetSimilarSongs* gmpc_widget_similar_songs_construct (GType object_type, const mpd_Song* song) {
-	GmpcWidgetSimilarSongs * self;
-	mpd_Song* _tmp0_;
-	g_return_val_if_fail (song != NULL, NULL);
-	self = g_object_newv (object_type, 0, NULL);
-	self->priv->song = (_tmp0_ = _mpd_songDup0 (song), _mpd_freeSong0 (self->priv->song), _tmp0_);
-	gtk_alignment_set ((GtkAlignment*) self, 0.0f, 0.0f, 1.0f, 0.0f);
-	return self;
-}
-
-
-GmpcWidgetSimilarSongs* gmpc_widget_similar_songs_new (const mpd_Song* song) {
-	return gmpc_widget_similar_songs_construct (GMPC_WIDGET_TYPE_SIMILAR_SONGS, song);
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static gpointer _gtk_tree_path_copy0 (gpointer self) {
-	return self ? gtk_tree_path_copy (self) : NULL;
-}
-
-
-static void _g_list_free_gtk_tree_path_free (GList* self) {
-	g_list_foreach (self, (GFunc) gtk_tree_path_free, NULL);
-	g_list_free (self);
-}
-
-
-static void gmpc_widget_similar_songs_add_clicked (GmpcWidgetSimilarSongs* self, GtkImageMenuItem* item) {
-	GtkTreeView* tree;
-	GtkTreeSelection* sel;
-	GtkTreeModel* model;
-	GtkTreeIter iter = {0};
-	GtkTreeModel* _tmp2_;
-	GList* _tmp1_;
-	GtkTreeModel* _tmp0_ = NULL;
-	GList* list;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	tree = _g_object_ref0 (GTK_TREE_VIEW (self->priv->pchild));
-	sel = _g_object_ref0 (gtk_tree_view_get_selection (tree));
-	model = NULL;
-	list = (_tmp1_ = gtk_tree_selection_get_selected_rows (sel, &_tmp0_), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_);
-	{
-		GList* path_collection;
-		GList* path_it;
-		path_collection = list;
-		for (path_it = path_collection; path_it != NULL; path_it = path_it->next) {
-			GtkTreePath* path;
-			path = _gtk_tree_path_copy0 ((GtkTreePath*) path_it->data);
-			{
-				if (gtk_tree_model_get_iter (model, &iter, path)) {
-					const mpd_Song* song;
-					song = NULL;
-					gtk_tree_model_get (model, &iter, 0, &song, -1, -1);
-					if (song != NULL) {
-						mpd_playlist_queue_add (connection, song->file);
-					}
-				}
-				_gtk_tree_path_free0 (path);
-			}
-		}
-	}
-	mpd_playlist_queue_commit (connection);
-	_g_object_unref0 (tree);
-	_g_object_unref0 (sel);
-	_g_object_unref0 (model);
-	__g_list_free_gtk_tree_path_free0 (list);
-}
-
-
-static void gmpc_widget_similar_songs_play_clicked (GmpcWidgetSimilarSongs* self, GtkImageMenuItem* item) {
-	GtkTreeView* tree;
-	GtkTreeSelection* sel;
-	GtkTreeModel* model;
-	GtkTreeIter iter = {0};
-	GtkTreeModel* _tmp2_;
-	GList* _tmp1_;
-	GtkTreeModel* _tmp0_ = NULL;
-	GList* list;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	tree = _g_object_ref0 (GTK_TREE_VIEW (self->priv->pchild));
-	sel = _g_object_ref0 (gtk_tree_view_get_selection (tree));
-	model = NULL;
-	list = (_tmp1_ = gtk_tree_selection_get_selected_rows (sel, &_tmp0_), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_);
-	if (list != NULL) {
-		GtkTreePath* path;
-		path = _gtk_tree_path_copy0 ((GtkTreePath*) list->data);
-		if (gtk_tree_model_get_iter (model, &iter, path)) {
-			const mpd_Song* song;
-			song = NULL;
-			gtk_tree_model_get (model, &iter, 0, &song, -1, -1);
-			if (song != NULL) {
-				play_path (song->file);
-			}
-		}
-		_gtk_tree_path_free0 (path);
-	}
-	_g_object_unref0 (tree);
-	_g_object_unref0 (sel);
-	_g_object_unref0 (model);
-	__g_list_free_gtk_tree_path_free0 (list);
-}
-
-
-static void gmpc_widget_similar_songs_replace_clicked (GmpcWidgetSimilarSongs* self, GtkImageMenuItem* item) {
-	gboolean found;
-	GtkTreeView* tree;
-	GtkTreeSelection* sel;
-	GtkTreeModel* model;
-	GtkTreeIter iter = {0};
-	GtkTreeModel* _tmp2_;
-	GList* _tmp1_;
-	GtkTreeModel* _tmp0_ = NULL;
-	GList* list;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	found = FALSE;
-	tree = _g_object_ref0 (GTK_TREE_VIEW (self->priv->pchild));
-	sel = _g_object_ref0 (gtk_tree_view_get_selection (tree));
-	model = NULL;
-	list = (_tmp1_ = gtk_tree_selection_get_selected_rows (sel, &_tmp0_), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_);
-	{
-		GList* path_collection;
-		GList* path_it;
-		path_collection = list;
-		for (path_it = path_collection; path_it != NULL; path_it = path_it->next) {
-			GtkTreePath* path;
-			path = _gtk_tree_path_copy0 ((GtkTreePath*) path_it->data);
-			{
-				if (gtk_tree_model_get_iter (model, &iter, path)) {
-					const mpd_Song* song;
-					song = NULL;
-					gtk_tree_model_get (model, &iter, 0, &song, -1, -1);
-					if (song != NULL) {
-						mpd_playlist_queue_add (connection, song->file);
-						found = TRUE;
-					}
-				}
-				_gtk_tree_path_free0 (path);
-			}
-		}
-	}
-	if (found) {
-		mpd_playlist_clear (connection);
-		mpd_playlist_queue_commit (connection);
-		mpd_player_play (connection);
-	}
-	gmpc_widget_similar_songs_play_clicked (self, item);
-	_g_object_unref0 (tree);
-	_g_object_unref0 (sel);
-	_g_object_unref0 (model);
-	__g_list_free_gtk_tree_path_free0 (list);
-}
-
-
-static void gmpc_widget_similar_songs_tree_row_activated (GmpcWidgetSimilarSongs* self, GmpcMpdDataTreeview* tree, GtkTreePath* path, GtkTreeViewColumn* column) {
-	GtkTreeModel* model;
-	GtkTreeIter iter = {0};
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (tree != NULL);
-	g_return_if_fail (path != NULL);
-	g_return_if_fail (column != NULL);
-	model = _g_object_ref0 (gtk_tree_view_get_model ((GtkTreeView*) tree));
-	if (gtk_tree_model_get_iter (model, &iter, path)) {
-		const mpd_Song* song;
-		song = NULL;
-		gtk_tree_model_get (model, &iter, 0, &song, -1, -1);
-		if (song != NULL) {
-			play_path (song->file);
-		}
-	}
-	_g_object_unref0 (model);
-}
-
-
-static void _gmpc_widget_similar_songs_play_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_widget_similar_songs_play_clicked (self, _sender);
-}
-
-
-static void _gmpc_widget_similar_songs_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_widget_similar_songs_add_clicked (self, _sender);
-}
-
-
-static void _gmpc_widget_similar_songs_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_widget_similar_songs_replace_clicked (self, _sender);
-}
-
-
-static gboolean gmpc_widget_similar_songs_tree_right_menu (GmpcWidgetSimilarSongs* self, GmpcMpdDataTreeview* tree, GdkEventButton* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (tree != NULL, FALSE);
-	if ((*event).button == 3) {
-		GtkMenu* menu;
-		GtkImageMenuItem* item;
-		GtkImageMenuItem* _tmp0_;
-		GtkImageMenuItem* _tmp1_;
-		GtkImage* _tmp2_;
-		menu = g_object_ref_sink ((GtkMenu*) gtk_menu_new ());
-		item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_from_stock ("gtk-media-play", NULL));
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_widget_similar_songs_play_clicked_gtk_menu_item_activate, self, 0);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		item = (_tmp0_ = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_from_stock ("gtk-add", NULL)), _g_object_unref0 (item), _tmp0_);
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_widget_similar_songs_add_clicked_gtk_menu_item_activate, self, 0);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		item = (_tmp1_ = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_mnemonic (_ ("_Replace"))), _g_object_unref0 (item), _tmp1_);
-		gtk_image_menu_item_set_image (item, (GtkWidget*) (_tmp2_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-redo", GTK_ICON_SIZE_MENU))));
-		_g_object_unref0 (_tmp2_);
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_widget_similar_songs_replace_clicked_gtk_menu_item_activate, self, 0);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		gtk_menu_popup (menu, NULL, NULL, NULL, NULL, (*event).button, (*event).time);
-		gtk_widget_show_all ((GtkWidget*) menu);
-		result = TRUE;
-		_g_object_unref0 (menu);
-		_g_object_unref0 (item);
-		return result;
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean _gmpc_widget_similar_songs_tree_right_menu_gtk_widget_button_release_event (GmpcMpdDataTreeview* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_widget_similar_songs_tree_right_menu (self, _sender, event);
-}
-
-
-static void _gmpc_widget_similar_songs_tree_row_activated_gtk_tree_view_row_activated (GmpcMpdDataTreeview* _sender, GtkTreePath* path, GtkTreeViewColumn* column, gpointer self) {
-	gmpc_widget_similar_songs_tree_row_activated (self, _sender, path, column);
-}
-
-
-static gboolean gmpc_widget_similar_songs_update_sim_song (GmpcWidgetSimilarSongs* self) {
-	gboolean result;
-	MetaData* _tmp9_;
-	g_return_val_if_fail (self != NULL, FALSE);
-	if (self->priv->current == NULL) {
-		GtkWidget* _tmp0_;
-		self->priv->current = meta_data_get_text_list (self->priv->copy);
-		self->priv->pchild = (_tmp0_ = (GtkWidget*) g_object_ref_sink ((GtkProgressBar*) gtk_progress_bar_new ()), _g_object_unref0 (self->priv->pchild), _tmp0_);
-		gtk_container_add ((GtkContainer*) self, self->priv->pchild);
-		gtk_widget_show_all ((GtkWidget*) self);
-	}
-	gtk_progress_bar_pulse (GTK_PROGRESS_BAR (self->priv->pchild));
-	if (self->priv->current != NULL) {
-		char* entry;
-		entry = g_strdup ((const char*) self->priv->current->data);
-		if (entry != NULL) {
-			char** _tmp2_;
-			gint split_size;
-			gint split_length1;
-			char** _tmp1_;
-			char** split;
-			split = (_tmp2_ = _tmp1_ = g_strsplit (entry, "::", 2), split_length1 = _vala_array_length (_tmp1_), split_size = split_length1, _tmp2_);
-			if (split_length1 == 2) {
-				char** _tmp4_;
-				gint art_split_size;
-				gint art_split_length1;
-				char** _tmp3_;
-				char** art_split;
-				MpdData* data;
-				mpd_database_search_start (connection, FALSE);
-				art_split = (_tmp4_ = _tmp3_ = g_strsplit (split[0], " ", 0), art_split_length1 = _vala_array_length (_tmp3_), art_split_size = art_split_length1, _tmp4_);
-				{
-					char** artist_collection;
-					int artist_collection_length1;
-					int artist_it;
-					artist_collection = art_split;
-					artist_collection_length1 = art_split_length1;
-					for (artist_it = 0; artist_it < art_split_length1; artist_it = artist_it + 1) {
-						char* artist;
-						artist = g_strdup (artist_collection[artist_it]);
-						{
-							mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-							_g_free0 (artist);
-						}
-					}
-				}
-				mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_TITLE, split[1]);
-				data = mpd_database_search_commit (connection);
-				if (data != NULL) {
-					MpdData* _tmp5_;
-					self->priv->item = mpd_data_concatenate (self->priv->item, (_tmp5_ = data, data = NULL, _tmp5_));
-				}
-				art_split = (_vala_array_free (art_split, art_split_length1, (GDestroyNotify) g_free), NULL);
-				_mpd_data_free0 (data);
-			}
-			split = (_vala_array_free (split, split_length1, (GDestroyNotify) g_free), NULL);
-		}
-		self->priv->current = self->priv->current->next;
-		if (self->priv->current != NULL) {
-			result = TRUE;
-			_g_free0 (entry);
-			return result;
-		}
-		_g_free0 (entry);
-	}
-	gtk_object_destroy ((GtkObject*) self->priv->pchild);
-	if (self->priv->item != NULL) {
-		GmpcMpdDataModel* model;
-		MpdData* _tmp6_;
-		GmpcMpdDataTreeview* tree;
-		GtkWidget* _tmp7_;
-		model = gmpc_mpddata_model_new ();
-		gmpc_mpddata_model_set_mpd_data (model, (_tmp6_ = self->priv->item, self->priv->item = NULL, _tmp6_));
-		tree = g_object_ref_sink (gmpc_mpddata_treeview_new ("similar-song", TRUE, (GtkTreeModel*) model));
-		gmpc_mpddata_treeview_enable_click_fix (tree);
-		g_signal_connect_object ((GtkWidget*) tree, "button-release-event", (GCallback) _gmpc_widget_similar_songs_tree_right_menu_gtk_widget_button_release_event, self, 0);
-		g_signal_connect_object ((GtkTreeView*) tree, "row-activated", (GCallback) _gmpc_widget_similar_songs_tree_row_activated_gtk_tree_view_row_activated, self, 0);
-		gtk_container_add ((GtkContainer*) self, (GtkWidget*) tree);
-		self->priv->pchild = (_tmp7_ = _g_object_ref0 ((GtkWidget*) tree), _g_object_unref0 (self->priv->pchild), _tmp7_);
-		_g_object_unref0 (model);
-		_g_object_unref0 (tree);
-	} else {
-		GtkLabel* label;
-		GtkWidget* _tmp8_;
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Unavailable")));
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.0f);
-		gtk_container_add ((GtkContainer*) self, (GtkWidget*) label);
-		self->priv->pchild = (_tmp8_ = _g_object_ref0 ((GtkWidget*) label), _g_object_unref0 (self->priv->pchild), _tmp8_);
-		_g_object_unref0 (label);
-	}
-	self->priv->copy = (_tmp9_ = NULL, _meta_data_free0 (self->priv->copy), _tmp9_);
-	self->priv->idle_add = (guint) 0;
-	gtk_widget_show_all ((GtkWidget*) self);
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean _gmpc_widget_similar_songs_update_sim_song_gsource_func (gpointer self) {
-	return gmpc_widget_similar_songs_update_sim_song (self);
-}
-
-
-static void gmpc_widget_similar_songs_metadata_changed (GmpcWidgetSimilarSongs* self, GmpcMetaWatcher* gmw2, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (gmw2 != NULL);
-	g_return_if_fail (song != NULL);
-	if (g_utf8_collate (self->priv->song->artist, song->artist) != 0) {
-		return;
-	}
-	if (type != META_SONG_SIMILAR) {
-		return;
-	}
-	if (self->priv->pchild != NULL) {
-		gtk_object_destroy ((GtkObject*) self->priv->pchild);
-	}
-	if (_result_ == META_DATA_FETCHING) {
-		GtkLabel* label;
-		GtkWidget* _tmp0_;
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Fetching .. ")));
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.0f);
-		gtk_container_add ((GtkContainer*) self, (GtkWidget*) label);
-		self->priv->pchild = (_tmp0_ = _g_object_ref0 ((GtkWidget*) label), _g_object_unref0 (self->priv->pchild), _tmp0_);
-		_g_object_unref0 (label);
-	} else {
-		if (_result_ == META_DATA_UNAVAILABLE) {
-			GtkLabel* label;
-			GtkWidget* _tmp1_;
-			label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Unavailable")));
-			gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.0f);
-			gtk_container_add ((GtkContainer*) self, (GtkWidget*) label);
-			self->priv->pchild = (_tmp1_ = _g_object_ref0 ((GtkWidget*) label), _g_object_unref0 (self->priv->pchild), _tmp1_);
-			_g_object_unref0 (label);
-		} else {
-			if (meta_data_is_text_list (met)) {
-				MetaData* _tmp2_;
-				self->priv->copy = (_tmp2_ = meta_data_dup_steal (met), _meta_data_free0 (self->priv->copy), _tmp2_);
-				self->priv->idle_add = g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, _gmpc_widget_similar_songs_update_sim_song_gsource_func, g_object_ref (self), g_object_unref);
-				return;
-			} else {
-				GtkLabel* label;
-				GtkWidget* _tmp3_;
-				label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Unavailable")));
-				gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.0f);
-				gtk_container_add ((GtkContainer*) self, (GtkWidget*) label);
-				self->priv->pchild = (_tmp3_ = _g_object_ref0 ((GtkWidget*) label), _g_object_unref0 (self->priv->pchild), _tmp3_);
-				_g_object_unref0 (label);
-			}
-		}
-	}
-	gtk_widget_show_all ((GtkWidget*) self);
-}
-
-
-static void _gmpc_widget_similar_songs_metadata_changed_gmpc_meta_watcher_data_changed (GmpcMetaWatcher* _sender, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met, gpointer self) {
-	gmpc_widget_similar_songs_metadata_changed (self, _sender, song, type, _result_, met);
-}
-
-
-void gmpc_widget_similar_songs_update (GmpcWidgetSimilarSongs* self) {
-	MetaData* item;
-	MetaData* _tmp2_;
-	MetaDataResult _tmp1_;
-	MetaData* _tmp0_ = NULL;
-	MetaDataResult gm_result;
-	g_return_if_fail (self != NULL);
-	item = NULL;
-	g_signal_connect_object (gmw, "data-changed", (GCallback) _gmpc_widget_similar_songs_metadata_changed_gmpc_meta_watcher_data_changed, self, 0);
-	gm_result = (_tmp1_ = gmpc_meta_watcher_get_meta_path (gmw, self->priv->song, META_SONG_SIMILAR, &_tmp0_), item = (_tmp2_ = _tmp0_, _meta_data_free0 (item), _tmp2_), _tmp1_);
-	gmpc_widget_similar_songs_metadata_changed (self, gmw, self->priv->song, META_SONG_SIMILAR, gm_result, item);
-	_meta_data_free0 (item);
-}
-
-
-static void gmpc_widget_similar_songs_class_init (GmpcWidgetSimilarSongsClass * klass) {
-	gmpc_widget_similar_songs_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcWidgetSimilarSongsPrivate));
-	G_OBJECT_CLASS (klass)->finalize = gmpc_widget_similar_songs_finalize;
-}
-
-
-static void gmpc_widget_similar_songs_instance_init (GmpcWidgetSimilarSongs * self) {
-	self->priv = GMPC_WIDGET_SIMILAR_SONGS_GET_PRIVATE (self);
-	self->priv->song = NULL;
-	self->priv->pchild = NULL;
-	self->priv->idle_add = (guint) 0;
-	self->priv->copy = NULL;
-	self->priv->item = NULL;
-	self->priv->current = NULL;
-}
-
-
-static void gmpc_widget_similar_songs_finalize (GObject* obj) {
-	GmpcWidgetSimilarSongs * self;
-	self = GMPC_WIDGET_SIMILAR_SONGS (obj);
-	{
-		if (self->priv->idle_add > 0) {
-			g_source_remove (self->priv->idle_add);
-			self->priv->idle_add = (guint) 0;
-		}
-	}
-	_mpd_freeSong0 (self->priv->song);
-	_g_object_unref0 (self->priv->pchild);
-	_meta_data_free0 (self->priv->copy);
-	_mpd_data_free0 (self->priv->item);
-	G_OBJECT_CLASS (gmpc_widget_similar_songs_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_widget_similar_songs_get_type (void) {
-	static GType gmpc_widget_similar_songs_type_id = 0;
-	if (gmpc_widget_similar_songs_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcWidgetSimilarSongsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_widget_similar_songs_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcWidgetSimilarSongs), 0, (GInstanceInitFunc) gmpc_widget_similar_songs_instance_init, NULL };
-		gmpc_widget_similar_songs_type_id = g_type_register_static (GTK_TYPE_ALIGNMENT, "GmpcWidgetSimilarSongs", &g_define_type_info, 0);
-	}
-	return gmpc_widget_similar_songs_type_id;
-}
-
-
-static void gmpc_widget_similar_artist_size_changed (GmpcWidgetSimilarArtist* self, GdkRectangle* alloc) {
-	gint t_column;
-	gint _tmp0_ = 0;
-	g_return_if_fail (self != NULL);
-	t_column = (*alloc).width / self->priv->button_width;
-	if (t_column < 1) {
-		_tmp0_ = 1;
-	} else {
-		_tmp0_ = t_column;
-	}
-	t_column = _tmp0_;
-	if (t_column != self->priv->columns) {
-		GList* list;
-		gint i;
-		list = gtk_container_get_children ((GtkContainer*) self);
-		{
-			GList* child_collection;
-			GList* child_it;
-			child_collection = list;
-			for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
-				GtkWidget* child;
-				child = _g_object_ref0 ((GtkWidget*) child_it->data);
-				{
-					g_object_ref ((GObject*) child);
-					gtk_container_remove ((GtkContainer*) self, child);
-					_g_object_unref0 (child);
-				}
-			}
-		}
-		self->priv->columns = t_column;
-		i = 0;
-		gtk_table_resize ((GtkTable*) self, (g_list_length (list) / self->priv->columns) + 1, (guint) self->priv->columns);
-		{
-			GList* item_collection;
-			GList* item_it;
-			item_collection = list;
-			for (item_it = item_collection; item_it != NULL; item_it = item_it->next) {
-				GtkWidget* item;
-				item = _g_object_ref0 ((GtkWidget*) item_it->data);
-				{
-					gtk_table_attach ((GtkTable*) self, item, (guint) (i % self->priv->columns), (guint) ((i % self->priv->columns) + 1), (guint) (i / self->priv->columns), (guint) ((i / self->priv->columns) + 1), GTK_EXPAND | GTK_FILL, GTK_SHRINK, (guint) 0, (guint) 0);
-					i++;
-					_g_object_unref0 (item);
-				}
-			}
-		}
-		gtk_widget_show_all ((GtkWidget*) self);
-		_g_list_free0 (list);
-	}
-}
-
-
-static void _g_list_free_g_object_unref (GList* self) {
-	g_list_foreach (self, (GFunc) g_object_unref, NULL);
-	g_list_free (self);
-}
-
-
-static void gmpc_widget_similar_artist_metadata_changed (GmpcWidgetSimilarArtist* self, GmpcMetaWatcher* gmw2, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met) {
-	GList* child_list;
-	gboolean _tmp0_ = FALSE;
-	gboolean _tmp1_ = FALSE;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (gmw2 != NULL);
-	g_return_if_fail (song != NULL);
-	if (type != META_ARTIST_SIMILAR) {
-		return;
-	}
-	if (g_utf8_collate (self->priv->song->artist, song->artist) != 0) {
-		return;
-	}
-	child_list = gtk_container_get_children ((GtkContainer*) self);
-	{
-		GList* child_collection;
-		GList* child_it;
-		child_collection = child_list;
-		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
-			GtkWidget* child;
-			child = _g_object_ref0 ((GtkWidget*) child_it->data);
-			{
-				gtk_object_destroy ((GtkObject*) child);
-				_g_object_unref0 (child);
-			}
-		}
-	}
-	if (_result_ == META_DATA_UNAVAILABLE) {
-		_tmp1_ = TRUE;
-	} else {
-		_tmp1_ = meta_data_is_empty (met);
-	}
-	if (_tmp1_) {
-		_tmp0_ = TRUE;
-	} else {
-		_tmp0_ = !meta_data_is_text_list (met);
-	}
-	if (_tmp0_) {
-		GtkLabel* label;
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Unavailable")));
-		gtk_table_attach ((GtkTable*) self, (GtkWidget*) label, (guint) 0, (guint) 1, (guint) 0, (guint) 1, GTK_SHRINK, GTK_SHRINK, (guint) 0, (guint) 0);
-		_g_object_unref0 (label);
-	} else {
-		if (_result_ == META_DATA_FETCHING) {
-			GtkLabel* label;
-			label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Fetching")));
-			gtk_table_attach ((GtkTable*) self, (GtkWidget*) label, (guint) 0, (guint) 1, (guint) 0, (guint) 1, GTK_SHRINK, GTK_SHRINK, (guint) 0, (guint) 0);
-			_g_object_unref0 (label);
-		} else {
-			GList* in_db_list;
-			GList* list;
-			gint items;
-			gint i;
-			guint llength;
-			gint _tmp11_ = 0;
-			in_db_list = NULL;
-			list = g_list_copy (meta_data_get_text_list (met));
-			list = g_list_sort (list, (GCompareFunc) g_utf8_collate);
-			items = 30;
-			i = 0;
-			if (list != NULL) {
-				GList* liter;
-				MpdData* data;
-				gint q;
-				liter = NULL;
-				mpd_database_search_field_start (connection, MPD_TAG_ITEM_ARTIST);
-				data = mpd_database_search_commit (connection);
-				q = 0;
-				if (data != NULL) {
-					const MpdData* iter;
-					char* artist;
-					data = misc_sort_mpddata_by_album_disc_track (data);
-					iter = mpd_data_get_first (data);
-					liter = g_list_first (list);
-					artist = g_strdup ("");
-					if (g_utf8_validate (iter->tag, -1, NULL) == FALSE) {
-						g_error ("gmpc-metadata-browser2.vala:367: Failed to validate");
-					}
-					if (iter->tag != NULL) {
-						char* _tmp2_;
-						artist = (_tmp2_ = g_utf8_casefold (iter->tag, -1), _g_free0 (artist), _tmp2_);
-					}
-					{
-						gboolean _tmp3_;
-						_tmp3_ = TRUE;
-						while (TRUE) {
-							char* _tmp6_;
-							gint _tmp7_;
-							gint res;
-							if (!_tmp3_) {
-								gboolean _tmp4_ = FALSE;
-								gboolean _tmp5_ = FALSE;
-								if (iter != NULL) {
-									_tmp5_ = liter != NULL;
-								} else {
-									_tmp5_ = FALSE;
-								}
-								if (_tmp5_) {
-									_tmp4_ = i < items;
-								} else {
-									_tmp4_ = FALSE;
-								}
-								if (!_tmp4_) {
-									break;
-								}
-							}
-							_tmp3_ = FALSE;
-							res = (_tmp7_ = g_utf8_collate (_tmp6_ = g_utf8_casefold ((const char*) liter->data, -1), artist), _g_free0 (_tmp6_), _tmp7_);
-							q++;
-							if (res == 0) {
-								char* d;
-								in_db_list = g_list_prepend (in_db_list, gmpc_widget_similar_artist_new_artist_button (self, iter->tag, TRUE));
-								i++;
-								d = g_strdup ((const char*) liter->data);
-								liter = liter->next;
-								list = g_list_remove (list, d);
-								iter = mpd_data_get_next_real (iter, FALSE);
-								if (iter != NULL) {
-									char* _tmp8_;
-									artist = (_tmp8_ = g_utf8_casefold (iter->tag, -1), _g_free0 (artist), _tmp8_);
-								}
-								_g_free0 (d);
-							} else {
-								if (res > 0) {
-									iter = mpd_data_get_next_real (iter, FALSE);
-									if (iter != NULL) {
-										char* _tmp9_;
-										artist = (_tmp9_ = g_utf8_casefold (iter->tag, -1), _g_free0 (artist), _tmp9_);
-									}
-								} else {
-									liter = liter->next;
-								}
-							}
-						}
-					}
-					_g_free0 (artist);
-				}
-				liter = g_list_first (list);
-				while (TRUE) {
-					gboolean _tmp10_ = FALSE;
-					char* artist;
-					if (liter != NULL) {
-						_tmp10_ = i < items;
-					} else {
-						_tmp10_ = FALSE;
-					}
-					if (!_tmp10_) {
-						break;
-					}
-					artist = g_strdup ((const char*) liter->data);
-					in_db_list = g_list_prepend (in_db_list, gmpc_widget_similar_artist_new_artist_button (self, artist, FALSE));
-					i++;
-					liter = liter->next;
-					_g_free0 (artist);
-				}
-				_mpd_data_free0 (data);
-			}
-			in_db_list = g_list_reverse (in_db_list);
-			i = 0;
-			gtk_widget_hide ((GtkWidget*) self);
-			llength = g_list_length (in_db_list);
-			self->priv->columns = ((GtkWidget*) self)->allocation.width / self->priv->button_width;
-			if (self->priv->columns < 1) {
-				_tmp11_ = 1;
-			} else {
-				_tmp11_ = self->priv->columns;
-			}
-			self->priv->columns = _tmp11_;
-			gtk_table_resize ((GtkTable*) self, (llength / self->priv->columns) + 1, (guint) self->priv->columns);
-			{
-				GList* item_collection;
-				GList* item_it;
-				item_collection = in_db_list;
-				for (item_it = item_collection; item_it != NULL; item_it = item_it->next) {
-					GtkWidget* item;
-					item = _g_object_ref0 ((GtkWidget*) item_it->data);
-					{
-						gtk_table_attach ((GtkTable*) self, item, (guint) (i % self->priv->columns), (guint) ((i % self->priv->columns) + 1), (guint) (i / self->priv->columns), (guint) ((i / self->priv->columns) + 1), GTK_EXPAND | GTK_FILL, GTK_SHRINK, (guint) 0, (guint) 0);
-						i++;
-						_g_object_unref0 (item);
-					}
-				}
-			}
-			__g_list_free_g_object_unref0 (in_db_list);
-			_g_list_free0 (list);
-		}
-	}
-	gtk_widget_show_all ((GtkWidget*) self);
-	_g_list_free0 (child_list);
-}
-
-
-static void gmpc_widget_similar_artist_artist_button_clicked (GmpcWidgetSimilarArtist* self, GtkButton* button) {
-	const char* artist;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (button != NULL);
-	artist = (const char*) g_object_get_data ((GObject*) button, "artist");
-	info2_fill_artist_view (artist);
-}
-
-
-static gboolean _misc_header_expose_event_gtk_widget_expose_event (GtkWidget* _sender, GdkEventExpose* event, gpointer self) {
-	return misc_header_expose_event (_sender, event);
-}
-
-
-static void _gmpc_widget_similar_artist_artist_button_clicked_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_widget_similar_artist_artist_button_clicked (self, _sender);
-}
-
-
-GtkWidget* gmpc_widget_similar_artist_new_artist_button (GmpcWidgetSimilarArtist* self, const char* artist, gboolean in_db) {
-	GtkWidget* result;
-	GtkHBox* hbox;
-	GtkEventBox* event;
-	GmpcMetaImage* image;
-	mpd_Song* song;
-	char* _tmp0_;
-	GtkLabel* label;
-	g_return_val_if_fail (self != NULL, NULL);
-	g_return_val_if_fail (artist != NULL, NULL);
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	gtk_container_set_border_width ((GtkContainer*) hbox, (guint) 4);
-	event = g_object_ref_sink ((GtkEventBox*) gtk_event_box_new ());
-	gtk_widget_set_app_paintable ((GtkWidget*) event, TRUE);
-	gtk_event_box_set_visible_window (event, TRUE);
-	g_signal_connect ((GtkWidget*) event, "expose-event", (GCallback) _misc_header_expose_event_gtk_widget_expose_event, NULL);
-	gtk_widget_set_size_request ((GtkWidget*) event, self->priv->button_width - 20, 60);
-	image = g_object_ref_sink (gmpc_metaimage_new_size (META_ARTIST_ART, 48));
-	song = mpd_newSong ();
-	song->artist = (_tmp0_ = g_strdup (artist), _g_free0 (song->artist), _tmp0_);
-	gmpc_metaimage_set_squared (image, TRUE);
-	gmpc_metaimage_update_cover_from_song_delayed (image, song);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (artist));
-	gtk_widget_set_tooltip_text ((GtkWidget*) label, artist);
-	gtk_label_set_selectable (label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-	if (in_db) {
-		GtkButton* find;
-		GtkImage* _tmp1_;
-		find = g_object_ref_sink ((GtkButton*) gtk_button_new ());
-		gtk_container_add ((GtkContainer*) find, (GtkWidget*) (_tmp1_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-find", GTK_ICON_SIZE_MENU))));
-		_g_object_unref0 (_tmp1_);
-		gtk_button_set_relief (find, GTK_RELIEF_NONE);
-		gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) find, FALSE, FALSE, (guint) 0);
-		g_object_set_data_full ((GObject*) find, "artist", (void*) g_strdup_printf ("%s", artist), (GDestroyNotify) g_free);
-		g_signal_connect_object (find, "clicked", (GCallback) _gmpc_widget_similar_artist_artist_button_clicked_gtk_button_clicked, self, 0);
-		_g_object_unref0 (find);
-	}
-	gtk_container_add ((GtkContainer*) event, (GtkWidget*) hbox);
-	result = (GtkWidget*) event;
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (image);
-	_mpd_freeSong0 (song);
-	_g_object_unref0 (label);
-	return result;
-}
-
-
-static void _gmpc_widget_similar_artist_metadata_changed_gmpc_meta_watcher_data_changed (GmpcMetaWatcher* _sender, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met, gpointer self) {
-	gmpc_widget_similar_artist_metadata_changed (self, _sender, song, type, _result_, met);
-}
-
-
-static void _gmpc_widget_similar_artist_size_changed_gtk_widget_size_allocate (GtkWidget* _sender, GdkRectangle* allocation, gpointer self) {
-	gmpc_widget_similar_artist_size_changed (self, allocation);
-}
-
-
-GmpcWidgetSimilarArtist* gmpc_widget_similar_artist_construct (GType object_type, MpdObj* server, const mpd_Song* song) {
-	GmpcWidgetSimilarArtist * self;
-	MetaData* item;
-	mpd_Song* _tmp0_;
-	MetaData* _tmp3_;
-	MetaDataResult _tmp2_;
-	MetaData* _tmp1_ = NULL;
-	MetaDataResult gm_result;
-	g_return_val_if_fail (server != NULL, NULL);
-	g_return_val_if_fail (song != NULL, NULL);
-	self = g_object_newv (object_type, 0, NULL);
-	item = NULL;
-	self->priv->song = (_tmp0_ = _mpd_songDup0 (song), _mpd_freeSong0 (self->priv->song), _tmp0_);
-	gtk_table_set_homogeneous ((GtkTable*) self, TRUE);
-	gtk_table_set_row_spacings ((GtkTable*) self, (guint) 6);
-	gtk_table_set_col_spacings ((GtkTable*) self, (guint) 6);
-	g_signal_connect_object (gmw, "data-changed", (GCallback) _gmpc_widget_similar_artist_metadata_changed_gmpc_meta_watcher_data_changed, self, 0);
-	g_signal_connect_object ((GtkWidget*) self, "size-allocate", (GCallback) _gmpc_widget_similar_artist_size_changed_gtk_widget_size_allocate, self, 0);
-	gm_result = (_tmp2_ = gmpc_meta_watcher_get_meta_path (gmw, song, META_ARTIST_SIMILAR, &_tmp1_), item = (_tmp3_ = _tmp1_, _meta_data_free0 (item), _tmp3_), _tmp2_);
-	if (gm_result == META_DATA_AVAILABLE) {
-		gmpc_widget_similar_artist_metadata_changed (self, gmw, self->priv->song, META_ARTIST_SIMILAR, gm_result, item);
-	}
-	_meta_data_free0 (item);
-	return self;
-}
-
-
-GmpcWidgetSimilarArtist* gmpc_widget_similar_artist_new (MpdObj* server, const mpd_Song* song) {
-	return gmpc_widget_similar_artist_construct (GMPC_WIDGET_TYPE_SIMILAR_ARTIST, server, song);
-}
-
-
-static void gmpc_widget_similar_artist_class_init (GmpcWidgetSimilarArtistClass * klass) {
-	gmpc_widget_similar_artist_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcWidgetSimilarArtistPrivate));
-	G_OBJECT_CLASS (klass)->finalize = gmpc_widget_similar_artist_finalize;
-}
-
-
-static void gmpc_widget_similar_artist_instance_init (GmpcWidgetSimilarArtist * self) {
-	self->priv = GMPC_WIDGET_SIMILAR_ARTIST_GET_PRIVATE (self);
-	self->priv->song = NULL;
-	self->priv->columns = 1;
-	self->priv->button_width = 200;
-}
-
-
-static void gmpc_widget_similar_artist_finalize (GObject* obj) {
-	GmpcWidgetSimilarArtist * self;
-	self = GMPC_WIDGET_SIMILAR_ARTIST (obj);
-	_mpd_freeSong0 (self->priv->song);
-	G_OBJECT_CLASS (gmpc_widget_similar_artist_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_widget_similar_artist_get_type (void) {
-	static GType gmpc_widget_similar_artist_type_id = 0;
-	if (gmpc_widget_similar_artist_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcWidgetSimilarArtistClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_widget_similar_artist_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcWidgetSimilarArtist), 0, (GInstanceInitFunc) gmpc_widget_similar_artist_instance_init, NULL };
-		gmpc_widget_similar_artist_type_id = g_type_register_static (GTK_TYPE_TABLE, "GmpcWidgetSimilarArtist", &g_define_type_info, 0);
-	}
-	return gmpc_widget_similar_artist_type_id;
-}
-
-
-
-static GType gmpc_metadata_browser_hitem_type_get_type (void) {
-	static GType gmpc_metadata_browser_hitem_type_type_id = 0;
-	if (G_UNLIKELY (gmpc_metadata_browser_hitem_type_type_id == 0)) {
-		static const GEnumValue values[] = {{GMPC_METADATA_BROWSER_HITEM_TYPE_CLEAR, "GMPC_METADATA_BROWSER_HITEM_TYPE_CLEAR", "clear"}, {GMPC_METADATA_BROWSER_HITEM_TYPE_ARTIST, "GMPC_METADATA_BROWSER_HITEM_TYPE_ARTIST", "artist"}, {GMPC_METADATA_BROWSER_HITEM_TYPE_ALBUM, "GMPC_METADATA_BROWSER_HITEM_TYPE_ALBUM", "album"}, {GMPC_METADATA_BROWSER_HITEM_TYPE_SONG, "GMPC_METADATA_BROWSER_HITEM_TYPE_SONG", "song"}, {0, NULL, NULL}};
-		gmpc_metadata_browser_hitem_type_type_id = g_enum_register_static ("GmpcMetadataBrowserHitemType", values);
-	}
-	return gmpc_metadata_browser_hitem_type_type_id;
-}
-
-
-static void _g_list_free_gmpc_metadata_browser_hitem_free (GList* self) {
-	g_list_foreach (self, (GFunc) gmpc_metadata_browser_hitem_free, NULL);
-	g_list_free (self);
-}
-
-
-static gint* gmpc_metadata_browser_real_get_version (GmpcPluginBase* base, int* result_length1) {
-	GmpcMetadataBrowser * self;
-	gint* result;
-	gint* _tmp0_;
-	self = (GmpcMetadataBrowser*) base;
-	result = (_tmp0_ = GMPC_METADATA_BROWSER_version, *result_length1 = G_N_ELEMENTS (GMPC_METADATA_BROWSER_version), _tmp0_);
-	return result;
-}
-
-
-static const char* gmpc_metadata_browser_real_get_name (GmpcPluginBase* base) {
-	GmpcMetadataBrowser * self;
-	const char* result;
-	self = (GmpcMetadataBrowser*) base;
-	result = N_ ("Metadata Browser");
-	return result;
-}
-
-
-static void gmpc_metadata_browser_real_save_yourself (GmpcPluginBase* base) {
-	GmpcMetadataBrowser * self;
-	self = (GmpcMetadataBrowser*) base;
-	if (self->priv->paned != NULL) {
-		gint pos;
-		pos = gtk_paned_get_position (self->priv->paned);
-		cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "pane-pos", pos);
-	}
-	if (self->priv->model_artist != NULL) {
-		gmpc_mpddata_model_set_mpd_data (self->priv->model_artist, NULL);
-	}
-	if (self->priv->model_albums != NULL) {
-		gmpc_mpddata_model_set_mpd_data (self->priv->model_albums, NULL);
-	}
-	if (self->priv->rref != NULL) {
-		GtkTreePath* path;
-		path = gtk_tree_row_reference_get_path (self->priv->rref);
-		if (path != NULL) {
-			gint* _tmp0_;
-			gint indices_size;
-			gint indices_length1;
-			gint* indices;
-			indices = (_tmp0_ = gtk_tree_path_get_indices (path), indices_length1 = -1, indices_size = indices_length1, _tmp0_);
-			cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "position", indices[0]);
-		}
-		_gtk_tree_path_free0 (path);
-	}
-}
-
-
-static void gmpc_metadata_browser_select_metadata_browser (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	gmpc_metadata_browser_select_browser (self, NULL);
-}
-
-
-static void _gmpc_metadata_browser_select_metadata_browser_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_select_metadata_browser (self, _sender);
-}
-
-
-static gint gmpc_metadata_browser_real_browser_add_go_menu (GmpcPluginBrowserIface* base, GtkMenu* menu) {
-	GmpcMetadataBrowser * self;
-	gint result;
-	self = (GmpcMetadataBrowser*) base;
-	g_return_val_if_fail (menu != NULL, 0);
-	if (gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		GtkImageMenuItem* item;
-		GtkImage* _tmp0_;
-		item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_mnemonic (_ (gmpc_plugin_base_get_name ((GmpcPluginBase*) self))));
-		gtk_image_menu_item_set_image (item, (GtkWidget*) (_tmp0_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("gmpc-metabrowser", GTK_ICON_SIZE_MENU))));
-		_g_object_unref0 (_tmp0_);
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_select_metadata_browser_gtk_menu_item_activate, self, 0);
-		gtk_widget_add_accelerator ((GtkWidget*) item, "activate", gtk_menu_get_accel_group (menu), (guint) 0xffc1, 0, GTK_ACCEL_VISIBLE);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		result = 1;
-		_g_object_unref0 (item);
-		return result;
-	}
-	result = 0;
-	return result;
-}
-
-
-static void gmpc_metadata_browser_browser_bg_style_changed (GmpcMetadataBrowser* self, GtkContainer* bg, GtkStyle* style) {
-	GdkColor _tmp0_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (bg != NULL);
-	gtk_widget_modify_bg ((GtkWidget*) self->priv->metadata_box, GTK_STATE_NORMAL, (_tmp0_ = gtk_widget_get_style ((GtkWidget*) self->priv->metadata_sw)->base[GTK_STATE_NORMAL], &_tmp0_));
-	g_debug ("gmpc-metadata-browser2.vala:615: Change style signal");
-	if (self->priv->theme_colors) {
-		char* _tmp2_;
-		GdkColor _tmp1_;
-		char* _tmp4_;
-		GdkColor _tmp3_;
-		self->priv->title_color = (_tmp2_ = gdk_color_to_string ((_tmp1_ = gtk_widget_get_style ((GtkWidget*) self->priv->paned)->text[GTK_STATE_PRELIGHT], &_tmp1_)), _g_free0 (self->priv->title_color), _tmp2_);
-		self->priv->item_color = (_tmp4_ = gdk_color_to_string ((_tmp3_ = gtk_widget_get_style ((GtkWidget*) self->priv->paned)->text[GTK_STATE_PRELIGHT], &_tmp3_)), _g_free0 (self->priv->item_color), _tmp4_);
-	}
-	gmpc_metadata_browser_change_color_style (self, (GtkWidget*) self->priv->metadata_sw);
-}
-
-
-static gboolean gmpc_metadata_browser_browser_button_press_event (GmpcMetadataBrowser* self, GtkTreeView* tree, GdkEventButton* event) {
-	gboolean result;
-	GtkTreePath* path;
-	GtkTreePath* _tmp2_;
-	gboolean _tmp1_;
-	GtkTreePath* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (tree != NULL, FALSE);
-	path = NULL;
-	if ((*event).button != 1) {
-		result = FALSE;
-		_gtk_tree_path_free0 (path);
-		return result;
-	}
-	if ((_tmp1_ = gtk_tree_view_get_path_at_pos (tree, (gint) (*event).x, (gint) (*event).y, &_tmp0_, NULL, NULL, NULL), path = (_tmp2_ = _tmp0_, _gtk_tree_path_free0 (path), _tmp2_), _tmp1_)) {
-		if (gtk_tree_selection_path_is_selected (gtk_tree_view_get_selection (tree), path)) {
-			gtk_tree_selection_unselect_path (gtk_tree_view_get_selection (tree), path);
-			result = TRUE;
-			_gtk_tree_path_free0 (path);
-			return result;
-		}
-	}
-	result = FALSE;
-	_gtk_tree_path_free0 (path);
-	return result;
-}
-
-
-static void gmpc_metadata_browser_browser_artist_entry_changed (GmpcMetadataBrowser* self, GtkEntry* entry) {
-	char* text;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (entry != NULL);
-	text = g_strdup (gtk_entry_get_text (entry));
-	if (strlen (text) > 0) {
-		gtk_widget_show ((GtkWidget*) entry);
-		gtk_widget_grab_focus ((GtkWidget*) entry);
-	} else {
-		gtk_widget_hide ((GtkWidget*) entry);
-		gtk_widget_grab_focus ((GtkWidget*) self->priv->tree_artist);
-	}
-	gtk_tree_model_filter_refilter (self->priv->model_filter_artist);
-	_g_free0 (text);
-}
-
-
-static void gmpc_metadata_browser_artist_add_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	char* artist;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	artist = gmpc_metadata_browser_browser_get_selected_artist (self);
-	if (artist != NULL) {
-		MpdData* data;
-		mpd_database_search_start (connection, TRUE);
-		mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-		data = mpd_database_search_commit (connection);
-		data = misc_sort_mpddata_by_album_disc_track (data);
-		if (data != NULL) {
-			data = mpd_data_get_first (data);
-			{
-				gboolean _tmp0_;
-				_tmp0_ = TRUE;
-				while (TRUE) {
-					if (!_tmp0_) {
-						if (!(data != NULL)) {
-							break;
-						}
-					}
-					_tmp0_ = FALSE;
-					mpd_playlist_queue_add (connection, data->song->file);
-					data = mpd_data_get_next (data);
-				}
-			}
-			mpd_playlist_queue_commit (connection);
-		}
-		_mpd_data_free0 (data);
-	}
-	_g_free0 (artist);
-}
-
-
-static void gmpc_metadata_browser_artist_replace_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	mpd_playlist_clear (connection);
-	gmpc_metadata_browser_artist_add_clicked (self, item);
-	mpd_player_play (connection);
-}
-
-
-static void _gmpc_metadata_browser_artist_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_artist_add_clicked (self, _sender);
-}
-
-
-static void _gmpc_metadata_browser_artist_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_artist_replace_clicked (self, _sender);
-}
-
-
-static gboolean gmpc_metadata_browser_artist_browser_button_release_event (GmpcMetadataBrowser* self, GtkTreeView* tree, GdkEventButton* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (tree != NULL, FALSE);
-	if ((*event).button == 3) {
-		if (gtk_tree_selection_count_selected_rows (gtk_tree_view_get_selection (tree)) > 0) {
-			GtkMenu* menu;
-			GtkImageMenuItem* item;
-			GtkImageMenuItem* _tmp0_;
-			GtkImage* _tmp1_;
-			menu = g_object_ref_sink ((GtkMenu*) gtk_menu_new ());
-			item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_from_stock ("gtk-add", NULL));
-			g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_artist_add_clicked_gtk_menu_item_activate, self, 0);
-			gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-			item = (_tmp0_ = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_mnemonic (_ ("_Replace"))), _g_object_unref0 (item), _tmp0_);
-			gtk_image_menu_item_set_image (item, (GtkWidget*) (_tmp1_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-redo", GTK_ICON_SIZE_MENU))));
-			_g_object_unref0 (_tmp1_);
-			g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_artist_replace_clicked_gtk_menu_item_activate, self, 0);
-			gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-			gtk_menu_popup (menu, NULL, NULL, NULL, NULL, (*event).button, (*event).time);
-			gtk_widget_show_all ((GtkWidget*) menu);
-			result = TRUE;
-			_g_object_unref0 (menu);
-			_g_object_unref0 (item);
-			return result;
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean gmpc_metadata_browser_visible_func_artist (GmpcMetadataBrowser* self, GtkTreeModel* model, GtkTreeIter* iter) {
-	gboolean result;
-	char* text;
-	char* str;
-	gboolean visible;
-	gboolean _tmp0_ = FALSE;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (model != NULL, FALSE);
-	text = g_strdup (gtk_entry_get_text (self->priv->artist_filter_entry));
-	str = NULL;
-	visible = FALSE;
-	if (g_utf8_get_char (g_utf8_offset_to_pointer (text, 0)) == '\0') {
-		result = TRUE;
-		_g_free0 (text);
-		_g_free0 (str);
-		return result;
-	}
-	gtk_tree_model_get (model, iter, 7, &str, -1, -1);
-	if (str != NULL) {
-		char* _tmp4_;
-		char* _tmp3_;
-		char* _tmp2_;
-		char* _tmp1_;
-		_tmp0_ = strstr (_tmp2_ = g_utf8_normalize (_tmp1_ = g_utf8_casefold (str, -1), -1, G_NORMALIZE_DEFAULT), _tmp4_ = g_utf8_normalize (_tmp3_ = g_utf8_casefold (text, -1), -1, G_NORMALIZE_DEFAULT)) != NULL;
-		_g_free0 (_tmp4_);
-		_g_free0 (_tmp3_);
-		_g_free0 (_tmp2_);
-		_g_free0 (_tmp1_);
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		visible = TRUE;
-	}
-	result = visible;
-	_g_free0 (text);
-	_g_free0 (str);
-	return result;
-}
-
-
-static gboolean gmpc_metadata_browser_browser_artist_key_press_event (GmpcMetadataBrowser* self, GtkTreeView* widget, GdkEventKey* event) {
-	gboolean result;
-	gunichar uc;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (widget != NULL, FALSE);
-	uc = (gunichar) gdk_keyval_to_unicode ((*event).keyval);
-	if (uc > 0) {
-		char* outbuf;
-		gint i;
-		outbuf = g_strdup ("       ");
-		i = g_unichar_to_utf8 (uc, outbuf);
-		((gchar*) outbuf)[i] = '\0';
-		gtk_entry_set_text (self->priv->artist_filter_entry, outbuf);
-		gtk_widget_grab_focus ((GtkWidget*) self->priv->artist_filter_entry);
-		gtk_editable_set_position ((GtkEditable*) self->priv->artist_filter_entry, 1);
-		result = TRUE;
-		_g_free0 (outbuf);
-		return result;
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static glong string_get_length (const char* self) {
-	glong result;
-	g_return_val_if_fail (self != NULL, 0L);
-	result = g_utf8_strlen (self, -1);
-	return result;
-}
-
-
-static void gmpc_metadata_browser_album_add_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	char* artist;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	artist = gmpc_metadata_browser_browser_get_selected_artist (self);
-	if (artist != NULL) {
-		char* albumartist;
-		char* album;
-		gboolean _tmp0_ = FALSE;
-		gboolean _tmp2_ = FALSE;
-		MpdData* data;
-		albumartist = NULL;
-		album = gmpc_metadata_browser_browser_get_selected_album (self);
-		if (album != NULL) {
-			_tmp0_ = mpd_server_tag_supported (connection, MPD_TAG_ITEM_ALBUM_ARTIST);
-		} else {
-			_tmp0_ = FALSE;
-		}
-		if (_tmp0_) {
-			MpdData* ydata;
-			mpd_database_search_field_start (connection, MPD_TAG_ITEM_ALBUM_ARTIST);
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, album);
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-			ydata = mpd_database_search_commit (connection);
-			if (ydata != NULL) {
-				if (string_get_length (ydata->tag) > 0) {
-					char* _tmp1_;
-					albumartist = (_tmp1_ = g_strdup (ydata->tag), _g_free0 (albumartist), _tmp1_);
-				}
-			}
-			_mpd_data_free0 (ydata);
-		}
-		mpd_database_search_start (connection, TRUE);
-		if (albumartist != NULL) {
-			_tmp2_ = string_get_length (albumartist) > 0;
-		} else {
-			_tmp2_ = FALSE;
-		}
-		if (_tmp2_) {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM_ARTIST, albumartist);
-		} else {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-		}
-		if (album != NULL) {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, album);
-		}
-		data = mpd_database_search_commit (connection);
-		data = misc_sort_mpddata_by_album_disc_track (data);
-		if (data != NULL) {
-			{
-				gboolean _tmp3_;
-				_tmp3_ = TRUE;
-				while (TRUE) {
-					if (!_tmp3_) {
-						if (!(data != NULL)) {
-							break;
-						}
-					}
-					_tmp3_ = FALSE;
-					mpd_playlist_queue_add (connection, data->song->file);
-					data = mpd_data_get_next (data);
-				}
-			}
-			mpd_playlist_queue_commit (connection);
-		}
-		_g_free0 (albumartist);
-		_g_free0 (album);
-		_mpd_data_free0 (data);
-	}
-	_g_free0 (artist);
-}
-
-
-static void gmpc_metadata_browser_album_replace_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	mpd_playlist_clear (connection);
-	gmpc_metadata_browser_album_add_clicked (self, item);
-	mpd_player_play (connection);
-}
-
-
-static void _gmpc_metadata_browser_album_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_album_add_clicked (self, _sender);
-}
-
-
-static void _gmpc_metadata_browser_album_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_album_replace_clicked (self, _sender);
-}
-
-
-static gboolean gmpc_metadata_browser_album_browser_button_release_event (GmpcMetadataBrowser* self, GtkTreeView* tree, GdkEventButton* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (tree != NULL, FALSE);
-	if ((*event).button == 3) {
-		if (gtk_tree_selection_count_selected_rows (gtk_tree_view_get_selection (tree)) > 0) {
-			GtkMenu* menu;
-			GtkImageMenuItem* item;
-			GtkImageMenuItem* _tmp0_;
-			GtkImage* _tmp1_;
-			menu = g_object_ref_sink ((GtkMenu*) gtk_menu_new ());
-			item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_from_stock ("gtk-add", NULL));
-			g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_album_add_clicked_gtk_menu_item_activate, self, 0);
-			gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-			item = (_tmp0_ = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_mnemonic (_ ("_Replace"))), _g_object_unref0 (item), _tmp0_);
-			gtk_image_menu_item_set_image (item, (GtkWidget*) (_tmp1_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-redo", GTK_ICON_SIZE_MENU))));
-			_g_object_unref0 (_tmp1_);
-			g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_album_replace_clicked_gtk_menu_item_activate, self, 0);
-			gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-			gtk_menu_popup (menu, NULL, NULL, NULL, NULL, (*event).button, (*event).time);
-			gtk_widget_show_all ((GtkWidget*) menu);
-			result = TRUE;
-			_g_object_unref0 (menu);
-			_g_object_unref0 (item);
-			return result;
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean gmpc_metadata_browser_visible_func_album (GmpcMetadataBrowser* self, GtkTreeModel* model, GtkTreeIter* iter) {
-	gboolean result;
-	char* text;
-	char* str;
-	gboolean visible;
-	gboolean _tmp0_ = FALSE;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (model != NULL, FALSE);
-	text = g_strdup (gtk_entry_get_text (self->priv->album_filter_entry));
-	str = NULL;
-	visible = FALSE;
-	if (g_utf8_get_char (g_utf8_offset_to_pointer (text, 0)) == '\0') {
-		result = TRUE;
-		_g_free0 (text);
-		_g_free0 (str);
-		return result;
-	}
-	gtk_tree_model_get (model, iter, 6, &str, -1, -1);
-	if (str != NULL) {
-		char* _tmp4_;
-		char* _tmp3_;
-		char* _tmp2_;
-		char* _tmp1_;
-		_tmp0_ = strstr (_tmp2_ = g_utf8_normalize (_tmp1_ = g_utf8_casefold (str, -1), -1, G_NORMALIZE_DEFAULT), _tmp4_ = g_utf8_normalize (_tmp3_ = g_utf8_casefold (text, -1), -1, G_NORMALIZE_DEFAULT)) != NULL;
-		_g_free0 (_tmp4_);
-		_g_free0 (_tmp3_);
-		_g_free0 (_tmp2_);
-		_g_free0 (_tmp1_);
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		visible = TRUE;
-	}
-	result = visible;
-	_g_free0 (text);
-	_g_free0 (str);
-	return result;
-}
-
-
-static gboolean gmpc_metadata_browser_browser_album_key_press_event (GmpcMetadataBrowser* self, GtkTreeView* widget, GdkEventKey* event) {
-	gboolean result;
-	gunichar uc;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (widget != NULL, FALSE);
-	uc = (gunichar) gdk_keyval_to_unicode ((*event).keyval);
-	if (uc > 0) {
-		char* outbuf;
-		gint i;
-		outbuf = g_strdup ("       ");
-		i = g_unichar_to_utf8 (uc, outbuf);
-		((gchar*) outbuf)[i] = '\0';
-		gtk_entry_set_text (self->priv->album_filter_entry, outbuf);
-		gtk_widget_grab_focus ((GtkWidget*) self->priv->album_filter_entry);
-		gtk_editable_set_position ((GtkEditable*) self->priv->album_filter_entry, 1);
-		result = TRUE;
-		_g_free0 (outbuf);
-		return result;
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static void gmpc_metadata_browser_browser_album_entry_changed (GmpcMetadataBrowser* self, GtkEntry* entry) {
-	char* text;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (entry != NULL);
-	text = g_strdup (gtk_entry_get_text (entry));
-	if (strlen (text) > 0) {
-		gtk_widget_show ((GtkWidget*) entry);
-		gtk_widget_grab_focus ((GtkWidget*) entry);
-	} else {
-		gtk_widget_hide ((GtkWidget*) entry);
-		gtk_widget_grab_focus ((GtkWidget*) self->priv->tree_album);
-	}
-	gtk_tree_model_filter_refilter (self->priv->model_filter_album);
-	_g_free0 (text);
-}
-
-
-static void gmpc_metadata_browser_song_add_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	mpd_Song* song;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	song = gmpc_metadata_browser_browser_get_selected_song (self);
-	if (song != NULL) {
-		mpd_playlist_add (connection, song->file);
-	}
-	_mpd_freeSong0 (song);
-}
-
-
-static void gmpc_metadata_browser_song_replace_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	mpd_playlist_clear (connection);
-	gmpc_metadata_browser_song_add_clicked (self, item);
-	mpd_player_play (connection);
-}
-
-
-static void _gmpc_metadata_browser_song_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_song_add_clicked (self, _sender);
-}
-
-
-static void _gmpc_metadata_browser_song_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_song_replace_clicked (self, _sender);
-}
-
-
-static gboolean gmpc_metadata_browser_song_browser_button_release_event (GmpcMetadataBrowser* self, GtkTreeView* tree, GdkEventButton* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (tree != NULL, FALSE);
-	if ((*event).button == 3) {
-		if (gtk_tree_selection_count_selected_rows (gtk_tree_view_get_selection (tree)) > 0) {
-			GtkMenu* menu;
-			GtkImageMenuItem* item;
-			GtkImageMenuItem* _tmp0_;
-			GtkImage* _tmp1_;
-			menu = g_object_ref_sink ((GtkMenu*) gtk_menu_new ());
-			item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_from_stock ("gtk-add", NULL));
-			g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_song_add_clicked_gtk_menu_item_activate, self, 0);
-			gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-			item = (_tmp0_ = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_mnemonic (_ ("_Replace"))), _g_object_unref0 (item), _tmp0_);
-			gtk_image_menu_item_set_image (item, (GtkWidget*) (_tmp1_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-redo", GTK_ICON_SIZE_MENU))));
-			_g_object_unref0 (_tmp1_);
-			g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_song_replace_clicked_gtk_menu_item_activate, self, 0);
-			gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-			gtk_menu_popup (menu, NULL, NULL, NULL, NULL, (*event).button, (*event).time);
-			gtk_widget_show_all ((GtkWidget*) menu);
-			result = TRUE;
-			_g_object_unref0 (menu);
-			_g_object_unref0 (item);
-			return result;
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean gmpc_metadata_browser_browser_button_release_event (GmpcMetadataBrowser* self, GtkWidget* widget, GdkEventButton* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (widget != NULL, FALSE);
-	if ((*event).button == 8) {
-		gmpc_metadata_browser_history_previous (self);
-		result = TRUE;
-		return result;
-	} else {
-		if ((*event).button == 9) {
-			gmpc_metadata_browser_history_next (self);
-			result = TRUE;
-			return result;
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static void _gmpc_metadata_browser_browser_bg_style_changed_gtk_widget_style_set (GtkPaned* _sender, GtkStyle* previous_style, gpointer self) {
-	gmpc_metadata_browser_browser_bg_style_changed (self, _sender, previous_style);
-}
-
-
-static void _gmpc_metadata_browser_browser_artist_entry_changed_gtk_editable_changed (GtkEntry* _sender, gpointer self) {
-	gmpc_metadata_browser_browser_artist_entry_changed (self, _sender);
-}
-
-
-static gboolean _gmpc_metadata_browser_visible_func_artist_gtk_tree_model_filter_visible_func (GtkTreeModel* model, GtkTreeIter* iter, gpointer self) {
-	return gmpc_metadata_browser_visible_func_artist (self, model, iter);
-}
-
-
-static gboolean _gmpc_metadata_browser_browser_button_press_event_gtk_widget_button_press_event (GtkTreeView* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_metadata_browser_browser_button_press_event (self, _sender, event);
-}
-
-
-static gboolean _gmpc_metadata_browser_artist_browser_button_release_event_gtk_widget_button_release_event (GtkTreeView* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_metadata_browser_artist_browser_button_release_event (self, _sender, event);
-}
-
-
-static gboolean _gmpc_metadata_browser_browser_artist_key_press_event_gtk_widget_key_press_event (GtkTreeView* _sender, GdkEventKey* event, gpointer self) {
-	return gmpc_metadata_browser_browser_artist_key_press_event (self, _sender, event);
-}
-
-
-static void _gmpc_metadata_browser_browser_artist_changed_gtk_tree_selection_changed (GtkTreeSelection* _sender, gpointer self) {
-	gmpc_metadata_browser_browser_artist_changed (self, _sender);
-}
-
-
-static void _gmpc_metadata_browser_browser_album_entry_changed_gtk_editable_changed (GtkEntry* _sender, gpointer self) {
-	gmpc_metadata_browser_browser_album_entry_changed (self, _sender);
-}
-
-
-static gboolean _gmpc_metadata_browser_visible_func_album_gtk_tree_model_filter_visible_func (GtkTreeModel* model, GtkTreeIter* iter, gpointer self) {
-	return gmpc_metadata_browser_visible_func_album (self, model, iter);
-}
-
-
-static gboolean _gmpc_metadata_browser_album_browser_button_release_event_gtk_widget_button_release_event (GtkTreeView* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_metadata_browser_album_browser_button_release_event (self, _sender, event);
-}
-
-
-static gboolean _gmpc_metadata_browser_browser_album_key_press_event_gtk_widget_key_press_event (GtkTreeView* _sender, GdkEventKey* event, gpointer self) {
-	return gmpc_metadata_browser_browser_album_key_press_event (self, _sender, event);
-}
-
-
-static void _gmpc_metadata_browser_browser_album_changed_gtk_tree_selection_changed (GtkTreeSelection* _sender, gpointer self) {
-	gmpc_metadata_browser_browser_album_changed (self, _sender);
-}
-
-
-static gboolean _gmpc_metadata_browser_song_browser_button_release_event_gtk_widget_button_release_event (GtkTreeView* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_metadata_browser_song_browser_button_release_event (self, _sender, event);
-}
-
-
-static void _gmpc_metadata_browser_browser_songs_changed_gtk_tree_selection_changed (GtkTreeSelection* _sender, gpointer self) {
-	gmpc_metadata_browser_browser_songs_changed (self, _sender);
-}
-
-
-static gboolean _gmpc_metadata_browser_browser_button_release_event_gtk_widget_button_release_event (GtkWidget* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_metadata_browser_browser_button_release_event (self, _sender, event);
-}
-
-
-static void gmpc_metadata_browser_browser_init (GmpcMetadataBrowser* self) {
-	g_return_if_fail (self != NULL);
-	if (self->priv->paned == NULL) {
-		GtkPaned* _tmp0_;
-		GtkBox* _tmp1_;
-		GtkVBox* box;
-		GtkEntry* _tmp2_;
-		GtkScrolledWindow* sw;
-		GmpcMpdDataModel* _tmp3_;
-		GtkTreeModelFilter* _tmp4_;
-		GtkTreeView* _tmp5_;
-		GmpcMpdDataTreeviewTooltip* _tmp6_;
-		GtkTreeViewColumn* column;
-		GtkCellRendererText* trenderer;
-		GtkVBox* _tmp7_;
-		GtkEntry* _tmp8_;
-		GtkScrolledWindow* _tmp9_;
-		GmpcMpdDataModel* _tmp10_;
-		GtkTreeModelFilter* _tmp11_;
-		GtkTreeView* _tmp12_;
-		GmpcMpdDataTreeviewTooltip* _tmp13_;
-		GtkTreeViewColumn* _tmp14_;
-		GtkTreeViewColumn* _tmp15_;
-		GtkCellRendererText* _tmp16_;
-		GtkTreeViewColumn* _tmp17_;
-		GtkCellRendererText* _tmp18_;
-		GtkScrolledWindow* _tmp19_;
-		GmpcMpdDataModel* _tmp20_;
-		GtkTreeView* _tmp21_;
-		GtkTreeViewColumn* _tmp22_;
-		GtkCellRendererText* _tmp23_;
-		GtkTreeViewColumn* _tmp24_;
-		GtkCellRendererText* _tmp25_;
-		GtkScrolledWindow* _tmp26_;
-		GtkEventBox* _tmp27_;
-		self->priv->paned = (_tmp0_ = (GtkPaned*) g_object_ref_sink ((GtkHPaned*) gtk_hpaned_new ()), _g_object_unref0 (self->priv->paned), _tmp0_);
-		gmpc_paned_size_group_add_paned (paned_size_group, self->priv->paned);
-		g_signal_connect_object ((GtkWidget*) self->priv->paned, "style-set", (GCallback) _gmpc_metadata_browser_browser_bg_style_changed_gtk_widget_style_set, self, 0);
-		self->priv->browser_box = (_tmp1_ = (GtkBox*) g_object_ref_sink ((GtkVBox*) gtk_vbox_new (TRUE, 6)), _g_object_unref0 (self->priv->browser_box), _tmp1_);
-		gtk_paned_add1 (self->priv->paned, (GtkWidget*) self->priv->browser_box);
-		box = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-		gtk_box_pack_start (self->priv->browser_box, (GtkWidget*) box, TRUE, TRUE, (guint) 0);
-		self->priv->artist_filter_entry = (_tmp2_ = g_object_ref_sink ((GtkEntry*) gtk_entry_new ()), _g_object_unref0 (self->priv->artist_filter_entry), _tmp2_);
-		gtk_widget_set_no_show_all ((GtkWidget*) self->priv->artist_filter_entry, TRUE);
-		g_signal_connect_object ((GtkEditable*) self->priv->artist_filter_entry, "changed", (GCallback) _gmpc_metadata_browser_browser_artist_entry_changed_gtk_editable_changed, self, 0);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) self->priv->artist_filter_entry, FALSE, FALSE, (guint) 0);
-		sw = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL));
-		gtk_scrolled_window_set_policy (sw, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-		gtk_scrolled_window_set_shadow_type (sw, GTK_SHADOW_ETCHED_IN);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) sw, TRUE, TRUE, (guint) 0);
-		self->priv->model_artist = (_tmp3_ = gmpc_mpddata_model_new (), _g_object_unref0 (self->priv->model_artist), _tmp3_);
-		self->priv->model_filter_artist = (_tmp4_ = (GtkTreeModelFilter*) gtk_tree_model_filter_new ((GtkTreeModel*) self->priv->model_artist, NULL), _g_object_unref0 (self->priv->model_filter_artist), _tmp4_);
-		gtk_tree_model_filter_set_visible_func (self->priv->model_filter_artist, _gmpc_metadata_browser_visible_func_artist_gtk_tree_model_filter_visible_func, g_object_ref (self), g_object_unref);
-		self->priv->tree_artist = (_tmp5_ = g_object_ref_sink ((GtkTreeView*) gtk_tree_view_new_with_model ((GtkTreeModel*) self->priv->model_filter_artist)), _g_object_unref0 (self->priv->tree_artist), _tmp5_);
-		gtk_tree_view_set_rules_hint (self->priv->tree_artist, TRUE);
-		_tmp6_ = g_object_ref_sink (gmpc_mpd_data_treeview_tooltip_new (self->priv->tree_artist, META_ARTIST_ART));
-		_g_object_unref0 (_tmp6_);
-		gtk_tree_view_set_enable_search (self->priv->tree_artist, FALSE);
-		g_signal_connect_object ((GtkWidget*) self->priv->tree_artist, "button-press-event", (GCallback) _gmpc_metadata_browser_browser_button_press_event_gtk_widget_button_press_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self->priv->tree_artist, "button-release-event", (GCallback) _gmpc_metadata_browser_artist_browser_button_release_event_gtk_widget_button_release_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self->priv->tree_artist, "key-press-event", (GCallback) _gmpc_metadata_browser_browser_artist_key_press_event_gtk_widget_key_press_event, self, 0);
-		gtk_container_add ((GtkContainer*) sw, (GtkWidget*) self->priv->tree_artist);
-		column = g_object_ref_sink (gtk_tree_view_column_new ());
-		if (cfg_get_single_value_as_int_with_default (config, "tag2-plugin", "show-image-column", 1) == 1) {
-			GtkCellRendererPixbuf* prenderer;
-			prenderer = g_object_ref_sink ((GtkCellRendererPixbuf*) gtk_cell_renderer_pixbuf_new ());
-			g_object_set ((GObject*) prenderer, "height", self->priv->model_artist->icon_size, NULL);
-			gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) prenderer, FALSE);
-			gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) prenderer, "pixbuf", 27);
-			_g_object_unref0 (prenderer);
-		}
-		trenderer = g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ());
-		gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, TRUE);
-		gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, "text", 7);
-		gtk_tree_view_append_column (self->priv->tree_artist, column);
-		gtk_tree_view_column_set_title (column, _ ("Artist"));
-		g_signal_connect_object (gtk_tree_view_get_selection (self->priv->tree_artist), "changed", (GCallback) _gmpc_metadata_browser_browser_artist_changed_gtk_tree_selection_changed, self, 0);
-		gtk_tree_view_column_set_sizing (column, GTK_TREE_VIEW_COLUMN_FIXED);
-		gtk_tree_view_set_fixed_height_mode (self->priv->tree_artist, TRUE);
-		box = (_tmp7_ = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6)), _g_object_unref0 (box), _tmp7_);
-		gtk_box_pack_start (self->priv->browser_box, (GtkWidget*) box, TRUE, TRUE, (guint) 0);
-		self->priv->album_filter_entry = (_tmp8_ = g_object_ref_sink ((GtkEntry*) gtk_entry_new ()), _g_object_unref0 (self->priv->album_filter_entry), _tmp8_);
-		gtk_widget_set_no_show_all ((GtkWidget*) self->priv->album_filter_entry, TRUE);
-		g_signal_connect_object ((GtkEditable*) self->priv->album_filter_entry, "changed", (GCallback) _gmpc_metadata_browser_browser_album_entry_changed_gtk_editable_changed, self, 0);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) self->priv->album_filter_entry, FALSE, FALSE, (guint) 0);
-		sw = (_tmp9_ = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL)), _g_object_unref0 (sw), _tmp9_);
-		gtk_scrolled_window_set_policy (sw, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-		gtk_scrolled_window_set_shadow_type (sw, GTK_SHADOW_ETCHED_IN);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) sw, TRUE, TRUE, (guint) 0);
-		self->priv->model_albums = (_tmp10_ = gmpc_mpddata_model_new (), _g_object_unref0 (self->priv->model_albums), _tmp10_);
-		self->priv->model_filter_album = (_tmp11_ = (GtkTreeModelFilter*) gtk_tree_model_filter_new ((GtkTreeModel*) self->priv->model_albums, NULL), _g_object_unref0 (self->priv->model_filter_album), _tmp11_);
-		gtk_tree_model_filter_set_visible_func (self->priv->model_filter_album, _gmpc_metadata_browser_visible_func_album_gtk_tree_model_filter_visible_func, g_object_ref (self), g_object_unref);
-		self->priv->tree_album = (_tmp12_ = g_object_ref_sink ((GtkTreeView*) gtk_tree_view_new_with_model ((GtkTreeModel*) self->priv->model_filter_album)), _g_object_unref0 (self->priv->tree_album), _tmp12_);
-		gtk_tree_view_set_rules_hint (self->priv->tree_album, TRUE);
-		gtk_tree_view_set_enable_search (self->priv->tree_album, FALSE);
-		_tmp13_ = g_object_ref_sink (gmpc_mpd_data_treeview_tooltip_new (self->priv->tree_album, META_ALBUM_ART));
-		_g_object_unref0 (_tmp13_);
-		g_signal_connect_object ((GtkWidget*) self->priv->tree_album, "button-press-event", (GCallback) _gmpc_metadata_browser_browser_button_press_event_gtk_widget_button_press_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self->priv->tree_album, "button-release-event", (GCallback) _gmpc_metadata_browser_album_browser_button_release_event_gtk_widget_button_release_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self->priv->tree_album, "key-press-event", (GCallback) _gmpc_metadata_browser_browser_album_key_press_event_gtk_widget_key_press_event, self, 0);
-		gtk_container_add ((GtkContainer*) sw, (GtkWidget*) self->priv->tree_album);
-		column = (_tmp14_ = g_object_ref_sink (gtk_tree_view_column_new ()), _g_object_unref0 (column), _tmp14_);
-		if (cfg_get_single_value_as_int_with_default (config, "tag2-plugin", "show-image-column", 1) == 1) {
-			GtkCellRendererPixbuf* prenderer;
-			prenderer = g_object_ref_sink ((GtkCellRendererPixbuf*) gtk_cell_renderer_pixbuf_new ());
-			g_object_set ((GObject*) prenderer, "height", self->priv->model_albums->icon_size, NULL);
-			gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) prenderer, FALSE);
-			gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) prenderer, "pixbuf", 27);
-			_g_object_unref0 (prenderer);
-		}
-		gtk_tree_view_append_column (self->priv->tree_album, column);
-		column = (_tmp15_ = g_object_ref_sink (gtk_tree_view_column_new ()), _g_object_unref0 (column), _tmp15_);
-		trenderer = (_tmp16_ = g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ()), _g_object_unref0 (trenderer), _tmp16_);
-		gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, TRUE);
-		gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, "text", 14);
-		gtk_tree_view_append_column (self->priv->tree_album, column);
-		gtk_tree_view_column_set_title (column, _ ("Year"));
-		column = (_tmp17_ = g_object_ref_sink (gtk_tree_view_column_new ()), _g_object_unref0 (column), _tmp17_);
-		trenderer = (_tmp18_ = g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ()), _g_object_unref0 (trenderer), _tmp18_);
-		gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, TRUE);
-		gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, "text", 6);
-		gtk_tree_view_append_column (self->priv->tree_album, column);
-		gtk_tree_view_column_set_title (column, _ ("Album"));
-		g_signal_connect_object (gtk_tree_view_get_selection (self->priv->tree_album), "changed", (GCallback) _gmpc_metadata_browser_browser_album_changed_gtk_tree_selection_changed, self, 0);
-		sw = (_tmp19_ = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL)), _g_object_unref0 (sw), _tmp19_);
-		gtk_scrolled_window_set_policy (sw, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-		gtk_scrolled_window_set_shadow_type (sw, GTK_SHADOW_ETCHED_IN);
-		gtk_box_pack_start (self->priv->browser_box, (GtkWidget*) sw, TRUE, TRUE, (guint) 0);
-		self->priv->model_songs = (_tmp20_ = gmpc_mpddata_model_new (), _g_object_unref0 (self->priv->model_songs), _tmp20_);
-		self->priv->tree_songs = (_tmp21_ = g_object_ref_sink ((GtkTreeView*) gtk_tree_view_new_with_model ((GtkTreeModel*) self->priv->model_songs)), _g_object_unref0 (self->priv->tree_songs), _tmp21_);
-		gtk_tree_view_set_rules_hint (self->priv->tree_songs, TRUE);
-		g_signal_connect_object ((GtkWidget*) self->priv->tree_songs, "button-press-event", (GCallback) _gmpc_metadata_browser_browser_button_press_event_gtk_widget_button_press_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self->priv->tree_songs, "button-release-event", (GCallback) _gmpc_metadata_browser_song_browser_button_release_event_gtk_widget_button_release_event, self, 0);
-		gtk_container_add ((GtkContainer*) sw, (GtkWidget*) self->priv->tree_songs);
-		column = (_tmp22_ = g_object_ref_sink (gtk_tree_view_column_new ()), _g_object_unref0 (column), _tmp22_);
-		if (cfg_get_single_value_as_int_with_default (config, "tag2-plugin", "show-image-column", 1) == 1) {
-			GtkCellRendererPixbuf* prenderer;
-			prenderer = g_object_ref_sink ((GtkCellRendererPixbuf*) gtk_cell_renderer_pixbuf_new ());
-			gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) prenderer, FALSE);
-			gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) prenderer, "icon-name", 23);
-			_g_object_unref0 (prenderer);
-		}
-		trenderer = (_tmp23_ = g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ()), _g_object_unref0 (trenderer), _tmp23_);
-		gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, FALSE);
-		gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, "text", 10);
-		gtk_tree_view_column_set_title (column, _ ("Track"));
-		gtk_tree_view_append_column (self->priv->tree_songs, column);
-		column = (_tmp24_ = g_object_ref_sink (gtk_tree_view_column_new ()), _g_object_unref0 (column), _tmp24_);
-		trenderer = (_tmp25_ = g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ()), _g_object_unref0 (trenderer), _tmp25_);
-		gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, TRUE);
-		gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) trenderer, "text", 7);
-		gtk_tree_view_append_column (self->priv->tree_songs, column);
-		gtk_tree_view_set_search_column (self->priv->tree_songs, 7);
-		gtk_tree_view_column_set_title (column, _ ("Songs"));
-		g_signal_connect_object (gtk_tree_view_get_selection (self->priv->tree_songs), "changed", (GCallback) _gmpc_metadata_browser_browser_songs_changed_gtk_tree_selection_changed, self, 0);
-		self->priv->metadata_sw = (_tmp26_ = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL)), _g_object_unref0 (self->priv->metadata_sw), _tmp26_);
-		gtk_scrolled_window_set_policy (self->priv->metadata_sw, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-		self->priv->metadata_box = (_tmp27_ = g_object_ref_sink ((GtkEventBox*) gtk_event_box_new ()), _g_object_unref0 (self->priv->metadata_box), _tmp27_);
-		gtk_event_box_set_visible_window (self->priv->metadata_box, TRUE);
-		gtk_scrolled_window_add_with_viewport (self->priv->metadata_sw, (GtkWidget*) self->priv->metadata_box);
-		gtk_paned_add2 (self->priv->paned, (GtkWidget*) self->priv->metadata_sw);
-		g_signal_connect_object ((GtkWidget*) self->priv->paned, "button-release-event", (GCallback) _gmpc_metadata_browser_browser_button_release_event_gtk_widget_button_release_event, self, 0);
-		gmpc_metadata_browser_reload_browsers (self);
-		_g_object_unref0 (box);
-		_g_object_unref0 (sw);
-		_g_object_unref0 (column);
-		_g_object_unref0 (trenderer);
-	}
-	gtk_widget_show_all ((GtkWidget*) self->priv->paned);
-}
-
-
-static void gmpc_metadata_browser_reload_browsers (GmpcMetadataBrowser* self) {
-	MpdData* data;
-	MpdData* _tmp0_;
-	g_return_if_fail (self != NULL);
-	if (self->priv->paned == NULL) {
-		return;
-	}
-	gmpc_mpddata_model_set_mpd_data (self->priv->model_songs, NULL);
-	gmpc_mpddata_model_set_mpd_data (self->priv->model_albums, NULL);
-	gmpc_mpddata_model_set_mpd_data (self->priv->model_artist, NULL);
-	gtk_entry_set_text (self->priv->artist_filter_entry, "");
-	gtk_entry_set_text (self->priv->album_filter_entry, "");
-	mpd_database_search_field_start (connection, MPD_TAG_ITEM_ARTIST);
-	data = mpd_database_search_commit (connection);
-	data = misc_sort_mpddata_by_album_disc_track (data);
-	gmpc_mpddata_model_set_mpd_data (self->priv->model_artist, (_tmp0_ = data, data = NULL, _tmp0_));
-	_mpd_data_free0 (data);
-}
-
-
-static char* gmpc_metadata_browser_browser_get_selected_artist (GmpcMetadataBrowser* self) {
-	char* result;
-	GtkTreeIter iter = {0};
-	GtkTreeSelection* sel;
-	GtkTreeModel* model;
-	GtkTreeModel* _tmp2_;
-	gboolean _tmp1_;
-	GtkTreeModel* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
-	sel = _g_object_ref0 (gtk_tree_view_get_selection (self->priv->tree_artist));
-	model = NULL;
-	if ((_tmp1_ = gtk_tree_selection_get_selected (sel, &_tmp0_, &iter), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_)) {
-		char* artist;
-		artist = NULL;
-		gtk_tree_model_get (model, &iter, 7, &artist, -1, -1);
-		result = artist;
-		_g_object_unref0 (sel);
-		_g_object_unref0 (model);
-		return result;
-	}
-	result = NULL;
-	_g_object_unref0 (sel);
-	_g_object_unref0 (model);
-	return result;
-}
-
-
-static char* gmpc_metadata_browser_browser_get_selected_album (GmpcMetadataBrowser* self) {
-	char* result;
-	GtkTreeIter iter = {0};
-	GtkTreeSelection* sel;
-	GtkTreeModel* model;
-	GtkTreeModel* _tmp2_;
-	gboolean _tmp1_;
-	GtkTreeModel* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
-	sel = _g_object_ref0 (gtk_tree_view_get_selection (self->priv->tree_album));
-	model = NULL;
-	if ((_tmp1_ = gtk_tree_selection_get_selected (sel, &_tmp0_, &iter), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_)) {
-		char* album;
-		album = NULL;
-		gtk_tree_model_get (model, &iter, 6, &album, -1, -1);
-		result = album;
-		_g_object_unref0 (sel);
-		_g_object_unref0 (model);
-		return result;
-	}
-	result = NULL;
-	_g_object_unref0 (sel);
-	_g_object_unref0 (model);
-	return result;
-}
-
-
-static mpd_Song* gmpc_metadata_browser_browser_get_selected_song (GmpcMetadataBrowser* self) {
-	mpd_Song* result;
-	GtkTreeIter iter = {0};
-	GtkTreeSelection* sel;
-	GtkTreeModel* model;
-	GtkTreeModel* _tmp2_;
-	gboolean _tmp1_;
-	GtkTreeModel* _tmp0_ = NULL;
-	g_return_val_if_fail (self != NULL, NULL);
-	sel = _g_object_ref0 (gtk_tree_view_get_selection (self->priv->tree_songs));
-	model = NULL;
-	if ((_tmp1_ = gtk_tree_selection_get_selected (sel, &_tmp0_, &iter), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_)) {
-		const mpd_Song* songs;
-		songs = NULL;
-		gtk_tree_model_get ((GtkTreeModel*) self->priv->model_songs, &iter, 0, &songs, -1, -1);
-		result = _mpd_songDup0 (songs);
-		_g_object_unref0 (sel);
-		_g_object_unref0 (model);
-		return result;
-	}
-	result = NULL;
-	_g_object_unref0 (sel);
-	_g_object_unref0 (model);
-	return result;
-}
-
-
-static void gmpc_metadata_browser_browser_artist_changed (GmpcMetadataBrowser* self, GtkTreeSelection* sel) {
-	char* artist;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (sel != NULL);
-	gmpc_mpddata_model_set_mpd_data (self->priv->model_albums, NULL);
-	gmpc_mpddata_model_set_mpd_data (self->priv->model_songs, NULL);
-	gmpc_metadata_browser_metadata_box_clear (self);
-	artist = gmpc_metadata_browser_browser_get_selected_artist (self);
-	if (artist != NULL) {
-		MpdData* data;
-		MpdData* list;
-		const MpdData* iter;
-		MpdData* _tmp7_;
-		MpdData* _tmp8_;
-		MpdData* _tmp9_;
-		mpd_database_search_field_start (connection, MPD_TAG_ITEM_ALBUM);
-		mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-		data = mpd_database_search_commit (connection);
-		data = misc_sort_mpddata_by_album_disc_track (data);
-		gmpc_mpddata_model_set_request_artist (self->priv->model_albums, artist);
-		list = NULL;
-		iter = mpd_data_get_first (data);
-		if (iter != NULL) {
-			{
-				gboolean _tmp0_;
-				_tmp0_ = TRUE;
-				while (TRUE) {
-					mpd_Song* _tmp1_;
-					char* _tmp2_;
-					char* _tmp3_;
-					MpdData* ydata;
-					if (!_tmp0_) {
-						if (!(iter != NULL)) {
-							break;
-						}
-					}
-					_tmp0_ = FALSE;
-					list = mpd_new_data_struct_append (list);
-					list->type = MPD_DATA_TYPE_SONG;
-					list->song = (_tmp1_ = mpd_newSong (), _mpd_freeSong0 (list->song), _tmp1_);
-					list->song->artist = (_tmp2_ = g_strdup (artist), _g_free0 (list->song->artist), _tmp2_);
-					list->song->album = (_tmp3_ = g_strdup (iter->tag), _g_free0 (list->song->album), _tmp3_);
-					mpd_database_search_field_start (connection, MPD_TAG_ITEM_DATE);
-					mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-					mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, iter->tag);
-					ydata = mpd_database_search_commit (connection);
-					if (ydata != NULL) {
-						const MpdData* yi;
-						yi = mpd_data_get_first (ydata);
-						while (TRUE) {
-							gboolean _tmp4_ = FALSE;
-							gboolean _tmp5_ = FALSE;
-							if (list->song->date == NULL) {
-								_tmp4_ = yi != NULL;
-							} else {
-								_tmp4_ = FALSE;
-							}
-							if (!_tmp4_) {
-								break;
-							}
-							if (yi->tag != NULL) {
-								_tmp5_ = string_get_length (yi->tag) > 0;
-							} else {
-								_tmp5_ = FALSE;
-							}
-							if (_tmp5_) {
-								char* _tmp6_;
-								list->song->date = (_tmp6_ = g_strdup (yi->tag), _g_free0 (list->song->date), _tmp6_);
-							}
-							yi = mpd_data_get_next_real (yi, FALSE);
-						}
-					}
-					iter = mpd_data_get_next_real (iter, FALSE);
-					_mpd_data_free0 (ydata);
-				}
-			}
-		}
-		list = misc_sort_mpddata_by_album_disc_track (list);
-		gmpc_mpddata_model_set_mpd_data (self->priv->model_albums, (_tmp7_ = list, list = NULL, _tmp7_));
-		mpd_database_search_start (connection, TRUE);
-		mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-		data = (_tmp8_ = mpd_database_search_commit (connection), _mpd_data_free0 (data), _tmp8_);
-		data = misc_sort_mpddata_by_album_disc_track (data);
-		gmpc_mpddata_model_set_mpd_data (self->priv->model_songs, (_tmp9_ = data, data = NULL, _tmp9_));
-		_mpd_data_free0 (data);
-		_mpd_data_free0 (list);
-	}
-	gmpc_metadata_browser_metadata_box_update (self);
-	_g_free0 (artist);
-}
-
-
-static void gmpc_metadata_browser_browser_album_changed (GmpcMetadataBrowser* self, GtkTreeSelection* album_sel) {
-	char* artist;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (album_sel != NULL);
-	gmpc_mpddata_model_set_mpd_data (self->priv->model_songs, NULL);
-	gmpc_metadata_browser_metadata_box_clear (self);
-	artist = gmpc_metadata_browser_browser_get_selected_artist (self);
-	if (artist != NULL) {
-		char* album;
-		char* albumartist;
-		gboolean _tmp0_ = FALSE;
-		gboolean _tmp2_ = FALSE;
-		MpdData* data;
-		MpdData* _tmp3_;
-		album = gmpc_metadata_browser_browser_get_selected_album (self);
-		albumartist = NULL;
-		if (album != NULL) {
-			_tmp0_ = mpd_server_tag_supported (connection, MPD_TAG_ITEM_ALBUM_ARTIST);
-		} else {
-			_tmp0_ = FALSE;
-		}
-		if (_tmp0_) {
-			MpdData* ydata;
-			mpd_database_search_field_start (connection, MPD_TAG_ITEM_ALBUM_ARTIST);
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, album);
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-			ydata = mpd_database_search_commit (connection);
-			if (ydata != NULL) {
-				if (string_get_length (ydata->tag) > 0) {
-					char* _tmp1_;
-					albumartist = (_tmp1_ = g_strdup (ydata->tag), _g_free0 (albumartist), _tmp1_);
-				}
-			}
-			_mpd_data_free0 (ydata);
-		}
-		mpd_database_search_start (connection, TRUE);
-		if (albumartist != NULL) {
-			_tmp2_ = string_get_length (albumartist) > 0;
-		} else {
-			_tmp2_ = FALSE;
-		}
-		if (_tmp2_) {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM_ARTIST, albumartist);
-		} else {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-		}
-		if (album != NULL) {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, album);
-		}
-		data = mpd_database_search_commit (connection);
-		data = misc_sort_mpddata_by_album_disc_track (data);
-		gmpc_mpddata_model_set_mpd_data (self->priv->model_songs, (_tmp3_ = data, data = NULL, _tmp3_));
-		_g_free0 (album);
-		_g_free0 (albumartist);
-		_mpd_data_free0 (data);
-	}
-	gmpc_metadata_browser_metadata_box_update (self);
-	_g_free0 (artist);
-}
-
-
-static void gmpc_metadata_browser_browser_songs_changed (GmpcMetadataBrowser* self, GtkTreeSelection* song_sel) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (song_sel != NULL);
-	gmpc_metadata_browser_metadata_box_clear (self);
-	gmpc_metadata_browser_metadata_box_update (self);
-}
-
-
-static void gmpc_metadata_browser_add_selected_song (GmpcMetadataBrowser* self, GtkButton* button) {
-	char* artist;
-	char* album;
-	mpd_Song* song;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (button != NULL);
-	artist = gmpc_metadata_browser_browser_get_selected_artist (self);
-	album = gmpc_metadata_browser_browser_get_selected_album (self);
-	song = gmpc_metadata_browser_browser_get_selected_song (self);
-	if (song != NULL) {
-		mpd_playlist_add (connection, song->file);
-		_g_free0 (artist);
-		_g_free0 (album);
-		_mpd_freeSong0 (song);
-		return;
-	}
-	if (artist != NULL) {
-		char* albumartist;
-		gboolean _tmp0_ = FALSE;
-		gboolean _tmp2_ = FALSE;
-		MpdData* data;
-		albumartist = NULL;
-		if (album != NULL) {
-			_tmp0_ = mpd_server_tag_supported (connection, MPD_TAG_ITEM_ALBUM_ARTIST);
-		} else {
-			_tmp0_ = FALSE;
-		}
-		if (_tmp0_) {
-			MpdData* ydata;
-			mpd_database_search_field_start (connection, MPD_TAG_ITEM_ALBUM_ARTIST);
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, album);
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-			ydata = mpd_database_search_commit (connection);
-			if (ydata != NULL) {
-				if (string_get_length (ydata->tag) > 0) {
-					char* _tmp1_;
-					albumartist = (_tmp1_ = g_strdup (ydata->tag), _g_free0 (albumartist), _tmp1_);
-				}
-			}
-			_mpd_data_free0 (ydata);
-		}
-		mpd_database_search_start (connection, TRUE);
-		if (albumartist != NULL) {
-			_tmp2_ = string_get_length (albumartist) > 0;
-		} else {
-			_tmp2_ = FALSE;
-		}
-		if (_tmp2_) {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM_ARTIST, albumartist);
-		} else {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-		}
-		if (album != NULL) {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, album);
-		}
-		data = mpd_database_search_commit (connection);
-		if (data != NULL) {
-			data = misc_sort_mpddata_by_album_disc_track (data);
-			while (TRUE) {
-				if (!(data != NULL)) {
-					break;
-				}
-				mpd_playlist_queue_add (connection, data->song->file);
-				data = mpd_data_get_next (data);
-			}
-			mpd_playlist_queue_commit (connection);
-		}
-		_g_free0 (albumartist);
-		_mpd_data_free0 (data);
-	}
-	_g_free0 (artist);
-	_g_free0 (album);
-	_mpd_freeSong0 (song);
-}
-
-
-static void gmpc_metadata_browser_replace_selected_song (GmpcMetadataBrowser* self, GtkButton* button) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (button != NULL);
-	mpd_playlist_clear (connection);
-	gmpc_metadata_browser_add_selected_song (self, button);
-	mpd_player_play (connection);
-}
-
-
-static void gmpc_metadata_browser_metadata_box_clear (GmpcMetadataBrowser* self) {
-	GList* list;
-	g_return_if_fail (self != NULL);
-	list = gtk_container_get_children ((GtkContainer*) self->priv->metadata_box);
-	{
-		GList* child_collection;
-		GList* child_it;
-		child_collection = list;
-		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
-			GtkWidget* child;
-			child = _g_object_ref0 ((GtkWidget*) child_it->data);
-			{
-				gtk_object_destroy ((GtkObject*) child);
-				_g_object_unref0 (child);
-			}
-		}
-	}
-	_g_list_free0 (list);
-}
-
-
-static void gmpc_metadata_browser_add_entry (GmpcMetadataBrowser* self, GtkTable* table, const char* entry_label, const char* value, GtkWidget* extra, gint* i, const char* image) {
-	gint j;
-	gboolean _tmp0_ = FALSE;
-	GtkHBox* box;
-	GtkLabel* label;
-	char* _tmp1_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (table != NULL);
-	g_return_if_fail (entry_label != NULL);
-	j = 0;
-	if (value == NULL) {
-		_tmp0_ = extra == NULL;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		return;
-	}
-	box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-	gtk_label_set_selectable (label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.0f);
-	gtk_label_set_markup (label, _tmp1_ = g_markup_printf_escaped ("<b>%s:</b>", entry_label));
-	_g_free0 (_tmp1_);
-	if (image != NULL) {
-		GtkImage* wimage;
-		wimage = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name (image, GTK_ICON_SIZE_MENU));
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) wimage, FALSE, FALSE, (guint) 0);
-		_g_object_unref0 (wimage);
-	}
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-	gtk_table_attach (table, (GtkWidget*) box, (guint) j, (guint) (j + 1), (guint) (*i), (guint) ((*i) + 1), GTK_SHRINK | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-	j++;
-	if (value != NULL) {
-		GtkLabel* pt_label;
-		pt_label = g_object_ref_sink ((GtkLabel*) gtk_label_new (value));
-		gtk_label_set_selectable (pt_label, TRUE);
-		gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.0f);
-		gtk_label_set_line_wrap (pt_label, TRUE);
-		gtk_table_attach (table, (GtkWidget*) pt_label, (guint) j, (guint) (j + 1), (guint) (*i), (guint) ((*i) + 1), GTK_EXPAND | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-		j++;
-		_g_object_unref0 (pt_label);
-	}
-	if (extra != NULL) {
-		gtk_table_attach (table, extra, (guint) j, (guint) (j + 1), (guint) (*i), (guint) ((*i) + 1), GTK_SHRINK | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-		j++;
-	}
-	(*i)++;
-	_g_object_unref0 (box);
-	_g_object_unref0 (label);
-}
-
-
-static void _gmpc_metadata_browser_add_selected_song_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_metadata_browser_add_selected_song (self, _sender);
-}
-
-
-static void _gmpc_metadata_browser_replace_selected_song_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_metadata_browser_replace_selected_song (self, _sender);
-}
-
-
-static void _lambda4_ (GtkButton* source, Block4Data* _data4_) {
-	Block3Data* _data3_;
-	GmpcMetadataBrowser * self;
-	_data3_ = _data4_->_data3_;
-	self = _data3_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:1536: notebook page %i clicked", _data4_->j);
-	gtk_notebook_set_current_page (_data3_->notebook, _data4_->j);
-}
-
-
-static void __lambda4__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda4_ (_sender, self);
-}
-
-
-static Block4Data* block4_data_ref (Block4Data* _data4_) {
-	++_data4_->_ref_count_;
-	return _data4_;
-}
-
-
-static void block4_data_unref (Block4Data* _data4_) {
-	if ((--_data4_->_ref_count_) == 0) {
-		block3_data_unref (_data4_->_data3_);
-		g_slice_free (Block4Data, _data4_);
-	}
-}
-
-
-static void _lambda5_ (GtkButton* source, Block5Data* _data5_) {
-	Block3Data* _data3_;
-	GmpcMetadataBrowser * self;
-	_data3_ = _data5_->_data3_;
-	self = _data3_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:1561: notebook page %i clicked", _data5_->j);
-	gtk_notebook_set_current_page (_data3_->notebook, _data5_->j);
-	if (!_data5_->text_view_queried) {
-		gmpc_meta_text_view_query_text_from_song (_data5_->text_view, _data3_->song);
-		_data5_->text_view_queried = TRUE;
-		gmpc_metadata_browser_change_color_style (self, (GtkWidget*) _data5_->text_view);
-	}
-}
-
-
-static void __lambda5__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda5_ (_sender, self);
-}
-
-
-static Block5Data* block5_data_ref (Block5Data* _data5_) {
-	++_data5_->_ref_count_;
-	return _data5_;
-}
-
-
-static void block5_data_unref (Block5Data* _data5_) {
-	if ((--_data5_->_ref_count_) == 0) {
-		block3_data_unref (_data5_->_data3_);
-		_g_object_unref0 (_data5_->text_view);
-		g_slice_free (Block5Data, _data5_);
-	}
-}
-
-
-static void _lambda6_ (GtkButton* source, Block6Data* _data6_) {
-	Block3Data* _data3_;
-	GmpcMetadataBrowser * self;
-	_data3_ = _data6_->_data3_;
-	self = _data3_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:1592: notebook page %i clicked", _data6_->j);
-	gtk_notebook_set_current_page (_data3_->notebook, _data6_->j);
-	if (!_data6_->similar_songs_queried) {
-		GmpcWidgetSimilarSongs* similar_songs;
-		similar_songs = g_object_ref_sink (gmpc_widget_similar_songs_new (_data3_->song));
-		gmpc_widget_similar_songs_update (similar_songs);
-		_data6_->similar_songs_queried = TRUE;
-		gtk_container_add ((GtkContainer*) _data6_->similar_songs_box, (GtkWidget*) similar_songs);
-		gmpc_metadata_browser_change_color_style (self, (GtkWidget*) _data6_->similar_songs_box);
-		gtk_widget_show_all ((GtkWidget*) _data6_->similar_songs_box);
-		_g_object_unref0 (similar_songs);
-	}
-}
-
-
-static void __lambda6__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda6_ (_sender, self);
-}
-
-
-static Block6Data* block6_data_ref (Block6Data* _data6_) {
-	++_data6_->_ref_count_;
-	return _data6_;
-}
-
-
-static void block6_data_unref (Block6Data* _data6_) {
-	if ((--_data6_->_ref_count_) == 0) {
-		block3_data_unref (_data6_->_data3_);
-		_g_object_unref0 (_data6_->similar_songs_box);
-		g_slice_free (Block6Data, _data6_);
-	}
-}
-
-
-static void _lambda7_ (GtkButton* source, Block7Data* _data7_) {
-	Block3Data* _data3_;
-	GmpcMetadataBrowser * self;
-	_data3_ = _data7_->_data3_;
-	self = _data3_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:1626: notebook page %i clicked", _data7_->j);
-	gtk_notebook_set_current_page (_data3_->notebook, _data7_->j);
-}
-
-
-static void __lambda7__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda7_ (_sender, self);
-}
-
-
-static Block7Data* block7_data_ref (Block7Data* _data7_) {
-	++_data7_->_ref_count_;
-	return _data7_;
-}
-
-
-static void block7_data_unref (Block7Data* _data7_) {
-	if ((--_data7_->_ref_count_) == 0) {
-		block3_data_unref (_data7_->_data3_);
-		g_slice_free (Block7Data, _data7_);
-	}
-}
-
-
-static void _lambda8_ (GtkButton* source, Block8Data* _data8_) {
-	Block3Data* _data3_;
-	GmpcMetadataBrowser * self;
-	_data3_ = _data8_->_data3_;
-	self = _data3_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:1642: notebook page %i clicked", _data8_->j);
-	gtk_notebook_set_current_page (_data3_->notebook, _data8_->j);
-}
-
-
-static void __lambda8__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda8_ (_sender, self);
-}
-
-
-static Block8Data* block8_data_ref (Block8Data* _data8_) {
-	++_data8_->_ref_count_;
-	return _data8_;
-}
-
-
-static void block8_data_unref (Block8Data* _data8_) {
-	if ((--_data8_->_ref_count_) == 0) {
-		block3_data_unref (_data8_->_data3_);
-		g_slice_free (Block8Data, _data8_);
-	}
-}
-
-
-static void _lambda9_ (GObject* source, GParamSpec* spec, Block3Data* _data3_) {
-	GmpcMetadataBrowser * self;
-	gint page;
-	self = _data3_->self;
-	g_return_if_fail (source != NULL);
-	g_return_if_fail (spec != NULL);
-	page = gtk_notebook_get_current_page (_data3_->notebook);
-	cfg_set_single_value_as_int (config, "MetaData", "song-last-page", (gint) page);
-}
-
-
-static void __lambda9__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self) {
-	_lambda9_ (_sender, pspec, self);
-}
-
-
-static Block3Data* block3_data_ref (Block3Data* _data3_) {
-	++_data3_->_ref_count_;
-	return _data3_;
-}
-
-
-static void block3_data_unref (Block3Data* _data3_) {
-	if ((--_data3_->_ref_count_) == 0) {
-		_g_object_unref0 (_data3_->self);
-		_g_object_unref0 (_data3_->notebook);
-		_mpd_freeSong0 (_data3_->song);
-		g_slice_free (Block3Data, _data3_);
-	}
-}
-
-
-GtkWidget* gmpc_metadata_browser_metadata_box_show_song (GmpcMetadataBrowser* self, const mpd_Song* song, gboolean show_controls) {
-	GtkWidget* result;
-	GError * _inner_error_;
-	Block3Data* _data3_;
-	GtkVBox* vbox;
-	GtkHBox* hist_box;
-	GtkHBox* hbox;
-	GtkAlignment* ali;
-	GmpcMetaImage* album_image;
-	GtkAlignment* _tmp0_;
-	GmpcMetaImage* artist_image;
-	GtkTable* info_box;
-	gint i;
-	GtkHSeparator* _tmp16_;
-	GtkHBox* control_hbox;
-	GtkButton* abutton;
-	GtkButton* _tmp17_;
-	GtkImage* _tmp18_;
-	GtkHSeparator* sep;
-	GtkHBox* hboxje;
-	GSList* group;
-	gboolean _tmp22_ = FALSE;
-	GtkAlignment* _tmp25_;
-	GtkHBox* bottom_hbox;
-	GtkVBox* metadata_vbox;
-	GtkHSeparator* _tmp26_;
-	g_return_val_if_fail (self != NULL, NULL);
-	g_return_val_if_fail (song != NULL, NULL);
-	_inner_error_ = NULL;
-	_data3_ = g_slice_new0 (Block3Data);
-	_data3_->_ref_count_ = 1;
-	_data3_->self = g_object_ref (self);
-	_data3_->song = _mpd_songDup0 (song);
-	vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	gtk_container_set_border_width ((GtkContainer*) vbox, (guint) 8);
-	hist_box = gmpc_metadata_browser_history_buttons (self);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) hist_box, FALSE, FALSE, (guint) 0);
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 0.f, 0.f));
-	album_image = g_object_ref_sink (gmpc_metaimage_new_size (META_ALBUM_ART, 200));
-	gmpc_metaimage_set_scale_up (album_image, TRUE);
-	gmpc_metaimage_set_squared (album_image, FALSE);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) album_image);
-	gmpc_metaimage_update_cover_from_song (album_image, _data3_->song);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	ali = (_tmp0_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (1.f, 0.f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp0_);
-	artist_image = g_object_ref_sink (gmpc_metaimage_new_size (META_ARTIST_ART, 200));
-	gmpc_metaimage_set_scale_up (artist_image, TRUE);
-	gmpc_metaimage_set_squared (artist_image, FALSE);
-	gmpc_metaimage_update_cover_from_song (artist_image, _data3_->song);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) artist_image);
-	gtk_box_pack_end ((GtkBox*) hbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	info_box = g_object_ref_sink ((GtkTable*) gtk_table_new ((guint) 4, (guint) 2, FALSE));
-	gtk_table_set_row_spacings (info_box, (guint) 3);
-	gtk_table_set_col_spacings (info_box, (guint) 8);
-	i = 0;
-	if (_data3_->song->title != NULL) {
-		GtkHBox* box;
-		GmpcFavoritesButton* fav_button;
-		GtkAlignment* _tmp1_;
-		GtkLabel* label;
-		char* _tmp2_;
-		box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-		fav_button = g_object_ref_sink (gmpc_favorites_button_new ());
-		gmpc_favorites_button_set_song (fav_button, _data3_->song);
-		ali = (_tmp1_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.5f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp1_);
-		gtk_container_add ((GtkContainer*) ali, (GtkWidget*) fav_button);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data3_->song->title));
-		gtk_label_set_selectable (label, TRUE);
-		gtk_label_set_markup (label, _tmp2_ = g_markup_printf_escaped ("<span color='%s' size='%i' weight='bold'>%s</span>", self->priv->title_color, PANGO_SCALE * 20, _data3_->song->title));
-		_g_free0 (_tmp2_);
-		gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-		gtk_box_pack_start ((GtkBox*) hist_box, (GtkWidget*) box, TRUE, TRUE, (guint) 0);
-		if (mpd_sticker_supported (connection)) {
-			GmpcRating* rating_button;
-			GtkAlignment* _tmp3_;
-			rating_button = g_object_ref_sink (gmpc_rating_new (connection, _data3_->song));
-			ali = (_tmp3_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.5f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp3_);
-			gtk_container_add ((GtkContainer*) ali, (GtkWidget*) rating_button);
-			gmpc_metadata_browser_add_entry (self, info_box, _ ("Rating"), NULL, (GtkWidget*) ali, &i, "rating");
-			_g_object_unref0 (rating_button);
-		}
-		_g_object_unref0 (box);
-		_g_object_unref0 (fav_button);
-		_g_object_unref0 (label);
-	} else {
-		if (_data3_->song->name != NULL) {
-			GtkLabel* label;
-			char* _tmp4_;
-			label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data3_->song->name));
-			gtk_label_set_selectable (label, TRUE);
-			gtk_label_set_markup (label, _tmp4_ = g_markup_printf_escaped ("<span color='%s' size='%i' weight='bold'>%s</span>", self->priv->title_color, PANGO_SCALE * 20, _data3_->song->name));
-			_g_free0 (_tmp4_);
-			gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-			gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-			gtk_box_pack_start ((GtkBox*) hist_box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-			_g_object_unref0 (label);
-		} else {
-			if (_data3_->song->file != NULL) {
-				char* filename;
-				GtkLabel* label;
-				char* _tmp9_;
-				filename = g_path_get_basename (_data3_->song->file);
-				label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data3_->song->name));
-				gtk_label_set_selectable (label, TRUE);
-				{
-					GRegex* regex;
-					char* _tmp5_;
-					char* _tmp6_;
-					regex = g_regex_new ("\\.[0-9a-zA-Z]*$", 0, 0, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						if (_inner_error_->domain == G_REGEX_ERROR) {
-							goto __catch5_g_regex_error;
-						}
-						_g_free0 (filename);
-						_g_object_unref0 (label);
-						_g_object_unref0 (vbox);
-						_g_object_unref0 (hist_box);
-						_g_object_unref0 (hbox);
-						_g_object_unref0 (ali);
-						_g_object_unref0 (album_image);
-						_g_object_unref0 (artist_image);
-						_g_object_unref0 (info_box);
-						block3_data_unref (_data3_);
-						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return NULL;
-					}
-					_tmp5_ = g_regex_replace_literal (regex, filename, (gssize) (-1), 0, "", 0, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						_g_regex_unref0 (regex);
-						if (_inner_error_->domain == G_REGEX_ERROR) {
-							goto __catch5_g_regex_error;
-						}
-						_g_regex_unref0 (regex);
-						_g_free0 (filename);
-						_g_object_unref0 (label);
-						_g_object_unref0 (vbox);
-						_g_object_unref0 (hist_box);
-						_g_object_unref0 (hbox);
-						_g_object_unref0 (ali);
-						_g_object_unref0 (album_image);
-						_g_object_unref0 (artist_image);
-						_g_object_unref0 (info_box);
-						block3_data_unref (_data3_);
-						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return NULL;
-					}
-					filename = (_tmp6_ = _tmp5_, _g_free0 (filename), _tmp6_);
-					_g_regex_unref0 (regex);
-				}
-				goto __finally5;
-				__catch5_g_regex_error:
-				{
-					GError * e;
-					e = _inner_error_;
-					_inner_error_ = NULL;
-					{
-						fprintf (stdout, "%s", e->message);
-						g_assert_not_reached ();
-						_g_error_free0 (e);
-					}
-				}
-				__finally5:
-				if (_inner_error_ != NULL) {
-					_g_free0 (filename);
-					_g_object_unref0 (label);
-					_g_object_unref0 (vbox);
-					_g_object_unref0 (hist_box);
-					_g_object_unref0 (hbox);
-					_g_object_unref0 (ali);
-					_g_object_unref0 (album_image);
-					_g_object_unref0 (artist_image);
-					_g_object_unref0 (info_box);
-					block3_data_unref (_data3_);
-					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-					g_clear_error (&_inner_error_);
-					return NULL;
-				}
-				{
-					GRegex* regex;
-					char* _tmp7_;
-					char* _tmp8_;
-					regex = g_regex_new ("_", 0, 0, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						if (_inner_error_->domain == G_REGEX_ERROR) {
-							goto __catch6_g_regex_error;
-						}
-						_g_free0 (filename);
-						_g_object_unref0 (label);
-						_g_object_unref0 (vbox);
-						_g_object_unref0 (hist_box);
-						_g_object_unref0 (hbox);
-						_g_object_unref0 (ali);
-						_g_object_unref0 (album_image);
-						_g_object_unref0 (artist_image);
-						_g_object_unref0 (info_box);
-						block3_data_unref (_data3_);
-						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return NULL;
-					}
-					_tmp7_ = g_regex_replace_literal (regex, filename, (gssize) (-1), 0, " ", 0, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						_g_regex_unref0 (regex);
-						if (_inner_error_->domain == G_REGEX_ERROR) {
-							goto __catch6_g_regex_error;
-						}
-						_g_regex_unref0 (regex);
-						_g_free0 (filename);
-						_g_object_unref0 (label);
-						_g_object_unref0 (vbox);
-						_g_object_unref0 (hist_box);
-						_g_object_unref0 (hbox);
-						_g_object_unref0 (ali);
-						_g_object_unref0 (album_image);
-						_g_object_unref0 (artist_image);
-						_g_object_unref0 (info_box);
-						block3_data_unref (_data3_);
-						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return NULL;
-					}
-					filename = (_tmp8_ = _tmp7_, _g_free0 (filename), _tmp8_);
-					_g_regex_unref0 (regex);
-				}
-				goto __finally6;
-				__catch6_g_regex_error:
-				{
-					GError * e;
-					e = _inner_error_;
-					_inner_error_ = NULL;
-					{
-						fprintf (stdout, "%s", e->message);
-						g_assert_not_reached ();
-						_g_error_free0 (e);
-					}
-				}
-				__finally6:
-				if (_inner_error_ != NULL) {
-					_g_free0 (filename);
-					_g_object_unref0 (label);
-					_g_object_unref0 (vbox);
-					_g_object_unref0 (hist_box);
-					_g_object_unref0 (hbox);
-					_g_object_unref0 (ali);
-					_g_object_unref0 (album_image);
-					_g_object_unref0 (artist_image);
-					_g_object_unref0 (info_box);
-					block3_data_unref (_data3_);
-					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-					g_clear_error (&_inner_error_);
-					return NULL;
-				}
-				gtk_label_set_markup (label, _tmp9_ = g_markup_printf_escaped ("<span color='%s' size='%i' weight='bold'>%s</span>", self->priv->title_color, PANGO_SCALE * 20, filename));
-				_g_free0 (_tmp9_);
-				gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-				gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-				gtk_box_pack_start ((GtkBox*) hist_box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-				_g_free0 (filename);
-				_g_object_unref0 (label);
-			}
-		}
-	}
-	if (_data3_->song->artist != NULL) {
-		gmpc_metadata_browser_add_entry (self, info_box, _ ("Artist"), _data3_->song->artist, NULL, &i, "media-artist");
-	}
-	if (_data3_->song->album != NULL) {
-		gmpc_metadata_browser_add_entry (self, info_box, _ ("Album"), _data3_->song->album, NULL, &i, "media-album");
-	}
-	if (_data3_->song->genre != NULL) {
-		gmpc_metadata_browser_add_entry (self, info_box, _ ("Genre"), _data3_->song->genre, NULL, &i, "media-genre");
-	}
-	if (_data3_->song->date != NULL) {
-		gmpc_metadata_browser_add_entry (self, info_box, _ ("Date"), _data3_->song->date, NULL, &i, "media-date");
-	}
-	if (_data3_->song->file != NULL) {
-		char* extension;
-		char* _tmp10_;
-		extension = NULL;
-		extension = (_tmp10_ = gmpc_metadata_browser_get_extension (self, _data3_->song->file), _g_free0 (extension), _tmp10_);
-		if (extension != NULL) {
-			gmpc_metadata_browser_add_entry (self, info_box, _ ("Codec"), extension, NULL, &i, "media-codec");
-		}
-		_g_free0 (extension);
-	}
-	if (_data3_->song->time > 0) {
-		char* _tmp11_;
-		gmpc_metadata_browser_add_entry (self, info_box, _ ("Length"), _tmp11_ = format_time_real ((gulong) _data3_->song->time, ""), NULL, &i, "media-track-length");
-		_g_free0 (_tmp11_);
-	}
-	if (_data3_->song->track != NULL) {
-		GtkLabel* label;
-		char* _tmp12_;
-		char* _tmp15_;
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-		gtk_label_set_selectable (label, TRUE);
-		gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-		_tmp12_ = NULL;
-		if (_data3_->song->disc != NULL) {
-			char* _tmp13_;
-			_tmp12_ = (_tmp13_ = g_strdup_printf ("[%s]", _data3_->song->disc), _g_free0 (_tmp12_), _tmp13_);
-		} else {
-			char* _tmp14_;
-			_tmp12_ = (_tmp14_ = g_strdup (""), _g_free0 (_tmp12_), _tmp14_);
-		}
-		gtk_label_set_markup (label, _tmp15_ = g_markup_printf_escaped ("%s %s", _data3_->song->track, _tmp12_));
-		_g_free0 (_tmp15_);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gmpc_metadata_browser_add_entry (self, info_box, _ ("Track"), NULL, (GtkWidget*) label, &i, "media-num-tracks");
-		_g_object_unref0 (label);
-		_g_free0 (_tmp12_);
-	}
-	gtk_table_attach (info_box, (GtkWidget*) (_tmp16_ = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ())), (guint) 0, (guint) 2, (guint) i, (guint) (i + 1), GTK_SHRINK | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-	_g_object_unref0 (_tmp16_);
-	i++;
-	control_hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	abutton = g_object_ref_sink ((GtkButton*) gtk_button_new_from_stock ("gtk-add"));
-	gtk_button_set_relief (abutton, GTK_RELIEF_NONE);
-	g_signal_connect_object (abutton, "clicked", (GCallback) _gmpc_metadata_browser_add_selected_song_gtk_button_clicked, self, 0);
-	gtk_box_pack_start ((GtkBox*) control_hbox, (GtkWidget*) abutton, FALSE, FALSE, (guint) 0);
-	abutton = (_tmp17_ = g_object_ref_sink ((GtkButton*) gtk_button_new_with_mnemonic (_ ("_Replace"))), _g_object_unref0 (abutton), _tmp17_);
-	gtk_button_set_image (abutton, (GtkWidget*) (_tmp18_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-redo", GTK_ICON_SIZE_BUTTON))));
-	_g_object_unref0 (_tmp18_);
-	gtk_button_set_relief (abutton, GTK_RELIEF_NONE);
-	g_signal_connect_object (abutton, "clicked", (GCallback) _gmpc_metadata_browser_replace_selected_song_gtk_button_clicked, self, 0);
-	gtk_box_pack_start ((GtkBox*) control_hbox, (GtkWidget*) abutton, FALSE, FALSE, (guint) 0);
-	gtk_table_attach (info_box, (GtkWidget*) control_hbox, (guint) 0, (guint) 2, (guint) i, (guint) (i + 1), GTK_SHRINK | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-	i++;
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) info_box, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) hbox, FALSE, FALSE, (guint) 0);
-	sep = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ());
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 4);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) sep, FALSE, FALSE, (guint) 0);
-	hboxje = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	_data3_->notebook = g_object_ref_sink ((GtkNotebook*) gtk_notebook_new ());
-	gtk_notebook_set_show_border (_data3_->notebook, FALSE);
-	gtk_notebook_set_show_tabs (_data3_->notebook, FALSE);
-	i = 0;
-	group = NULL;
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-lyrics", 1) == 1) {
-		Block4Data* _data4_;
-		GtkAlignment* alib;
-		GmpcMetaTextView* text_view;
-		GtkLabel* _tmp19_;
-		GtkRadioButton* button;
-		_data4_ = g_slice_new0 (Block4Data);
-		_data4_->_ref_count_ = 1;
-		_data4_->_data3_ = block3_data_ref (_data3_);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		text_view = g_object_ref_sink (gmpc_meta_text_view_new (META_SONG_TXT));
-		gtk_text_view_set_left_margin ((GtkTextView*) text_view, 8);
-		gmpc_meta_text_view_query_text_from_song (text_view, _data3_->song);
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) text_view);
-		gtk_notebook_append_page (_data3_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp19_ = g_object_ref_sink ((GtkLabel*) gtk_label_new ("Lyrics"))));
-		_g_object_unref0 (_tmp19_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, "Lyrics"));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data4_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda4__gtk_button_clicked, block4_data_ref (_data4_), (GClosureNotify) block4_data_unref, 0);
-		i++;
-		gtk_widget_show ((GtkWidget*) alib);
-		_g_object_unref0 (alib);
-		_g_object_unref0 (text_view);
-		_g_object_unref0 (button);
-		block4_data_unref (_data4_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-guitar-tabs", 1) == 1) {
-		Block5Data* _data5_;
-		GtkAlignment* alib;
-		GtkLabel* _tmp20_;
-		GtkRadioButton* button;
-		_data5_ = g_slice_new0 (Block5Data);
-		_data5_->_ref_count_ = 1;
-		_data5_->_data3_ = block3_data_ref (_data3_);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		_data5_->text_view = g_object_ref_sink (gmpc_meta_text_view_new (META_SONG_GUITAR_TAB));
-		_data5_->text_view->use_monospace = TRUE;
-		gtk_text_view_set_left_margin ((GtkTextView*) _data5_->text_view, 8);
-		_data5_->text_view_queried = FALSE;
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) _data5_->text_view);
-		gtk_notebook_append_page (_data3_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp20_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Guitar Tabs")))));
-		_g_object_unref0 (_tmp20_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Guitar Tabs")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data5_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda5__gtk_button_clicked, block5_data_ref (_data5_), (GClosureNotify) block5_data_unref, 0);
-		if (i == 0) {
-			gmpc_meta_text_view_query_text_from_song (_data5_->text_view, _data3_->song);
-			_data5_->text_view_queried = TRUE;
-		}
-		gtk_widget_show ((GtkWidget*) alib);
-		i++;
-		_g_object_unref0 (alib);
-		_g_object_unref0 (button);
-		block5_data_unref (_data5_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-similar-songs", 1) == 1) {
-		Block6Data* _data6_;
-		GtkLabel* _tmp21_;
-		GtkRadioButton* button;
-		_data6_ = g_slice_new0 (Block6Data);
-		_data6_->_ref_count_ = 1;
-		_data6_->_data3_ = block3_data_ref (_data3_);
-		_data6_->similar_songs_queried = FALSE;
-		_data6_->similar_songs_box = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 0.f, 0.f));
-		gtk_notebook_append_page (_data3_->notebook, (GtkWidget*) _data6_->similar_songs_box, (GtkWidget*) (_tmp21_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Similar Songs")))));
-		_g_object_unref0 (_tmp21_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Similar Songs")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data6_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda6__gtk_button_clicked, block6_data_ref (_data6_), (GClosureNotify) block6_data_unref, 0);
-		if (i == 0) {
-			GmpcWidgetSimilarSongs* similar_songs;
-			similar_songs = g_object_ref_sink (gmpc_widget_similar_songs_new (_data3_->song));
-			gmpc_widget_similar_songs_update (similar_songs);
-			_data6_->similar_songs_queried = TRUE;
-			gtk_container_add ((GtkContainer*) _data6_->similar_songs_box, (GtkWidget*) similar_songs);
-			gtk_widget_show_all ((GtkWidget*) _data6_->similar_songs_box);
-			_g_object_unref0 (similar_songs);
-		}
-		gtk_widget_show ((GtkWidget*) _data6_->similar_songs_box);
-		i++;
-		_g_object_unref0 (button);
-		block6_data_unref (_data6_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-similar-artist", 1) == 1) {
-		_tmp22_ = _data3_->song->artist != NULL;
-	} else {
-		_tmp22_ = FALSE;
-	}
-	if (_tmp22_) {
-		Block7Data* _data7_;
-		GmpcWidgetSimilarArtist* similar_artist;
-		GtkLabel* _tmp23_;
-		GtkRadioButton* button;
-		_data7_ = g_slice_new0 (Block7Data);
-		_data7_->_ref_count_ = 1;
-		_data7_->_data3_ = block3_data_ref (_data3_);
-		similar_artist = g_object_ref_sink (gmpc_widget_similar_artist_new (connection, _data3_->song));
-		gtk_notebook_append_page (_data3_->notebook, (GtkWidget*) similar_artist, (GtkWidget*) (_tmp23_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Similar Artist")))));
-		_g_object_unref0 (_tmp23_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Similar Artist")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data7_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda7__gtk_button_clicked, block7_data_ref (_data7_), (GClosureNotify) block7_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) similar_artist);
-		i++;
-		_g_object_unref0 (similar_artist);
-		_g_object_unref0 (button);
-		block7_data_unref (_data7_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-web-links", 1) == 1) {
-		Block8Data* _data8_;
-		GmpcSongLinks* song_links;
-		GtkLabel* _tmp24_;
-		GtkRadioButton* button;
-		_data8_ = g_slice_new0 (Block8Data);
-		_data8_->_ref_count_ = 1;
-		_data8_->_data3_ = block3_data_ref (_data3_);
-		song_links = g_object_ref_sink (gmpc_song_links_new (GMPC_SONG_LINKS_TYPE_SONG, _data3_->song));
-		gtk_notebook_append_page (_data3_->notebook, (GtkWidget*) song_links, (GtkWidget*) (_tmp24_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Web Links")))));
-		_g_object_unref0 (_tmp24_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Web Links")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data8_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda8__gtk_button_clicked, block8_data_ref (_data8_), (GClosureNotify) block8_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) song_links);
-		i++;
-		_g_object_unref0 (song_links);
-		_g_object_unref0 (button);
-		block8_data_unref (_data8_);
-	}
-	g_signal_connect_data ((GObject*) _data3_->notebook, "notify::page", (GCallback) __lambda9__g_object_notify, block3_data_ref (_data3_), (GClosureNotify) block3_data_unref, 0);
-	if (i > 0) {
-		gint page;
-		page = cfg_get_single_value_as_int_with_default (config, "MetaData", "song-last-page", 0);
-		if (page > i) {
-			gtk_notebook_set_current_page (_data3_->notebook, 0);
-		} else {
-			GtkRadioButton* w;
-			w = _g_object_ref0 ((GtkRadioButton*) g_slist_nth_data (group, (guint) ((i - page) - 1)));
-			gtk_toggle_button_set_active ((GtkToggleButton*) w, TRUE);
-			gtk_notebook_set_current_page (_data3_->notebook, page);
-			_g_object_unref0 (w);
-		}
-	}
-	ali = (_tmp25_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.5f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp25_);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) hboxje);
-	bottom_hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	metadata_vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	sep = (_tmp26_ = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ()), _g_object_unref0 (sep), _tmp26_);
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 1);
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) sep, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) _data3_->notebook, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) bottom_hbox, (GtkWidget*) metadata_vbox, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) bottom_hbox, TRUE, TRUE, (guint) 0);
-	result = (GtkWidget*) vbox;
-	_g_object_unref0 (hist_box);
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (ali);
-	_g_object_unref0 (album_image);
-	_g_object_unref0 (artist_image);
-	_g_object_unref0 (info_box);
-	_g_object_unref0 (control_hbox);
-	_g_object_unref0 (abutton);
-	_g_object_unref0 (sep);
-	_g_object_unref0 (hboxje);
-	_g_object_unref0 (bottom_hbox);
-	_g_object_unref0 (metadata_vbox);
-	block3_data_unref (_data3_);
-	return result;
-}
-
-
-static void gmpc_metadata_browser_album_song_tree_row_activated (GmpcMetadataBrowser* self, GtkTreeView* tree, GtkTreePath* path, GtkTreeViewColumn* column) {
-	GtkTreeIter iter = {0};
-	GtkTreeModel* model;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (tree != NULL);
-	g_return_if_fail (path != NULL);
-	g_return_if_fail (column != NULL);
-	model = _g_object_ref0 (gtk_tree_view_get_model (tree));
-	if (gtk_tree_model_get_iter (model, &iter, path)) {
-		const mpd_Song* song;
-		song = NULL;
-		gtk_tree_model_get (model, &iter, 0, &song, -1, -1);
-		if (song != NULL) {
-			gmpc_metadata_browser_set_song (self, song);
-		}
-	}
-	_g_object_unref0 (model);
-}
-
-
-static void gmpc_metadata_browser_album_song_browser_play_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	GtkTreeView* tree;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	tree = _g_object_ref0 (GTK_TREE_VIEW (g_object_get_data ((GObject*) item, "tree")));
-	if (tree != NULL) {
-		GtkTreeIter iter = {0};
-		GtkTreeModel* model;
-		GtkTreeSelection* sel;
-		GtkTreeModel* _tmp2_;
-		GList* _tmp1_;
-		GtkTreeModel* _tmp0_ = NULL;
-		GList* list;
-		model = _g_object_ref0 (gtk_tree_view_get_model (tree));
-		sel = _g_object_ref0 (gtk_tree_view_get_selection (tree));
-		list = (_tmp1_ = gtk_tree_selection_get_selected_rows (sel, &_tmp0_), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_);
-		{
-			GList* path_collection;
-			GList* path_it;
-			path_collection = list;
-			for (path_it = path_collection; path_it != NULL; path_it = path_it->next) {
-				GtkTreePath* path;
-				path = _gtk_tree_path_copy0 ((GtkTreePath*) path_it->data);
-				{
-					if (gtk_tree_model_get_iter (model, &iter, path)) {
-						const mpd_Song* song;
-						song = NULL;
-						gtk_tree_model_get (model, &iter, 0, &song, -1, -1);
-						if (song != NULL) {
-							play_path (song->file);
-							_gtk_tree_path_free0 (path);
-							_g_object_unref0 (model);
-							_g_object_unref0 (sel);
-							__g_list_free_gtk_tree_path_free0 (list);
-							_g_object_unref0 (tree);
-							return;
-						}
-					}
-					_gtk_tree_path_free0 (path);
-				}
-			}
-		}
-		_g_object_unref0 (model);
-		_g_object_unref0 (sel);
-		__g_list_free_gtk_tree_path_free0 (list);
-	}
-	_g_object_unref0 (tree);
-}
-
-
-static void gmpc_metadata_browser_album_song_browser_add_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	GtkTreeView* tree;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	tree = _g_object_ref0 (GTK_TREE_VIEW (g_object_get_data ((GObject*) item, "tree")));
-	if (tree != NULL) {
-		GtkTreeIter iter = {0};
-		GtkTreeModel* model;
-		GtkTreeSelection* sel;
-		GtkTreeModel* _tmp2_;
-		GList* _tmp1_;
-		GtkTreeModel* _tmp0_ = NULL;
-		GList* list;
-		model = _g_object_ref0 (gtk_tree_view_get_model (tree));
-		sel = _g_object_ref0 (gtk_tree_view_get_selection (tree));
-		list = (_tmp1_ = gtk_tree_selection_get_selected_rows (sel, &_tmp0_), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_);
-		{
-			GList* path_collection;
-			GList* path_it;
-			path_collection = list;
-			for (path_it = path_collection; path_it != NULL; path_it = path_it->next) {
-				GtkTreePath* path;
-				path = _gtk_tree_path_copy0 ((GtkTreePath*) path_it->data);
-				{
-					if (gtk_tree_model_get_iter (model, &iter, path)) {
-						const mpd_Song* song;
-						song = NULL;
-						gtk_tree_model_get (model, &iter, 0, &song, -1, -1);
-						if (song != NULL) {
-							mpd_playlist_queue_add (connection, song->file);
-						}
-					}
-					_gtk_tree_path_free0 (path);
-				}
-			}
-		}
-		mpd_playlist_queue_commit (connection);
-		_g_object_unref0 (model);
-		_g_object_unref0 (sel);
-		__g_list_free_gtk_tree_path_free0 (list);
-	}
-	_g_object_unref0 (tree);
-}
-
-
-static void gmpc_metadata_browser_album_song_browser_replace_clicked (GmpcMetadataBrowser* self, GtkImageMenuItem* item) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	mpd_playlist_clear (connection);
-	gmpc_metadata_browser_album_song_browser_add_clicked (self, item);
-	mpd_player_play (connection);
-}
-
-
-static void _gmpc_metadata_browser_album_song_browser_play_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_album_song_browser_play_clicked (self, _sender);
-}
-
-
-static void _gmpc_metadata_browser_album_song_browser_add_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_album_song_browser_add_clicked (self, _sender);
-}
-
-
-static void _gmpc_metadata_browser_album_song_browser_replace_clicked_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_album_song_browser_replace_clicked (self, _sender);
-}
-
-
-static gboolean gmpc_metadata_browser_album_song_tree_button_press_event (GmpcMetadataBrowser* self, GmpcMpdDataTreeview* tree, GdkEventButton* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (tree != NULL, FALSE);
-	if ((*event).button == 3) {
-		GtkMenu* menu;
-		GtkImageMenuItem* item;
-		GtkImageMenuItem* _tmp0_;
-		GtkImage* _tmp1_;
-		menu = g_object_ref_sink ((GtkMenu*) gtk_menu_new ());
-		if (gtk_tree_selection_count_selected_rows (gtk_tree_view_get_selection ((GtkTreeView*) tree)) == 1) {
-			GtkImageMenuItem* item;
-			item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_from_stock ("gtk-media-play", NULL));
-			g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_album_song_browser_play_clicked_gtk_menu_item_activate, self, 0);
-			g_object_set_data ((GObject*) item, "tree", (void*) tree);
-			gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-			_g_object_unref0 (item);
-		}
-		item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_from_stock ("gtk-add", NULL));
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_album_song_browser_add_clicked_gtk_menu_item_activate, self, 0);
-		g_object_set_data ((GObject*) item, "tree", (void*) tree);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		item = (_tmp0_ = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_mnemonic (_ ("_Replace"))), _g_object_unref0 (item), _tmp0_);
-		gtk_image_menu_item_set_image (item, (GtkWidget*) (_tmp1_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-redo", GTK_ICON_SIZE_MENU))));
-		_g_object_unref0 (_tmp1_);
-		g_object_set_data ((GObject*) item, "tree", (void*) tree);
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_album_song_browser_replace_clicked_gtk_menu_item_activate, self, 0);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		if (gtk_tree_selection_count_selected_rows (gtk_tree_view_get_selection ((GtkTreeView*) tree)) == 1) {
-			GtkTreeModel* model;
-			GtkTreeModel* _tmp4_;
-			GList* _tmp3_;
-			GtkTreeModel* _tmp2_ = NULL;
-			GList* list;
-			model = NULL;
-			list = (_tmp3_ = gtk_tree_selection_get_selected_rows (gtk_tree_view_get_selection ((GtkTreeView*) tree), &_tmp2_), model = (_tmp4_ = _g_object_ref0 (_tmp2_), _g_object_unref0 (model), _tmp4_), _tmp3_);
-			if (list != NULL) {
-				GtkTreePath* path;
-				GtkTreeIter iter = {0};
-				const mpd_Song* song;
-				path = (GtkTreePath*) list->data;
-				song = NULL;
-				if (gtk_tree_model_get_iter (model, &iter, path)) {
-					gtk_tree_model_get (model, &iter, 0, &song, -1);
-					submenu_for_song ((GtkWidget*) menu, song);
-				}
-			}
-			_g_object_unref0 (model);
-			__g_list_free_gtk_tree_path_free0 (list);
-		}
-		gmpc_mpddata_treeview_right_mouse_intergration (tree, menu);
-		gtk_menu_popup (menu, NULL, NULL, NULL, NULL, (*event).button, (*event).time);
-		gtk_widget_show_all ((GtkWidget*) menu);
-		result = TRUE;
-		_g_object_unref0 (menu);
-		_g_object_unref0 (item);
-		return result;
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static void _lambda10_ (GtkButton* source, Block10Data* _data10_) {
-	Block9Data* _data9_;
-	GmpcMetadataBrowser * self;
-	_data9_ = _data10_->_data9_;
-	self = _data9_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:1919: notebook page %i clicked", _data10_->j);
-	gtk_notebook_set_current_page (_data9_->notebook, _data10_->j);
-}
-
-
-static void __lambda10__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda10_ (_sender, self);
-}
-
-
-static Block10Data* block10_data_ref (Block10Data* _data10_) {
-	++_data10_->_ref_count_;
-	return _data10_;
-}
-
-
-static void block10_data_unref (Block10Data* _data10_) {
-	if ((--_data10_->_ref_count_) == 0) {
-		block9_data_unref (_data10_->_data9_);
-		g_slice_free (Block10Data, _data10_);
-	}
-}
-
-
-static gboolean _gmpc_metadata_browser_album_song_tree_button_press_event_gtk_widget_button_release_event (GmpcMpdDataTreeview* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_metadata_browser_album_song_tree_button_press_event (self, _sender, event);
-}
-
-
-static void _gmpc_metadata_browser_album_song_tree_row_activated_gtk_tree_view_row_activated (GmpcMpdDataTreeview* _sender, GtkTreePath* path, GtkTreeViewColumn* column, gpointer self) {
-	gmpc_metadata_browser_album_song_tree_row_activated (self, _sender, path, column);
-}
-
-
-static void _lambda11_ (GtkButton* source, Block11Data* _data11_) {
-	Block9Data* _data9_;
-	GmpcMetadataBrowser * self;
-	_data9_ = _data11_->_data9_;
-	self = _data9_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:1969: notebook page %i clicked", _data11_->j);
-	gtk_notebook_set_current_page (_data9_->notebook, _data11_->j);
-}
-
-
-static void __lambda11__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda11_ (_sender, self);
-}
-
-
-static Block11Data* block11_data_ref (Block11Data* _data11_) {
-	++_data11_->_ref_count_;
-	return _data11_;
-}
-
-
-static void block11_data_unref (Block11Data* _data11_) {
-	if ((--_data11_->_ref_count_) == 0) {
-		block9_data_unref (_data11_->_data9_);
-		g_slice_free (Block11Data, _data11_);
-	}
-}
-
-
-static void _lambda12_ (GtkButton* source, Block12Data* _data12_) {
-	Block9Data* _data9_;
-	GmpcMetadataBrowser * self;
-	_data9_ = _data12_->_data9_;
-	self = _data9_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:2012: notebook page %i clicked", _data12_->j);
-	gtk_notebook_set_current_page (_data9_->notebook, _data12_->j);
-}
-
-
-static void __lambda12__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda12_ (_sender, self);
-}
-
-
-static Block12Data* block12_data_ref (Block12Data* _data12_) {
-	++_data12_->_ref_count_;
-	return _data12_;
-}
-
-
-static void block12_data_unref (Block12Data* _data12_) {
-	if ((--_data12_->_ref_count_) == 0) {
-		block9_data_unref (_data12_->_data9_);
-		g_slice_free (Block12Data, _data12_);
-	}
-}
-
-
-static void _lambda13_ (GObject* source, GParamSpec* spec, Block9Data* _data9_) {
-	GmpcMetadataBrowser * self;
-	gint page;
-	self = _data9_->self;
-	g_return_if_fail (source != NULL);
-	g_return_if_fail (spec != NULL);
-	page = gtk_notebook_get_current_page (_data9_->notebook);
-	cfg_set_single_value_as_int (config, "MetaData", "album-last-page", (gint) page);
-}
-
-
-static void __lambda13__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self) {
-	_lambda13_ (_sender, pspec, self);
-}
-
-
-static Block9Data* block9_data_ref (Block9Data* _data9_) {
-	++_data9_->_ref_count_;
-	return _data9_;
-}
-
-
-static void block9_data_unref (Block9Data* _data9_) {
-	if ((--_data9_->_ref_count_) == 0) {
-		_g_object_unref0 (_data9_->self);
-		_g_object_unref0 (_data9_->notebook);
-		g_slice_free (Block9Data, _data9_);
-	}
-}
-
-
-static void gmpc_metadata_browser_metadata_box_show_album (GmpcMetadataBrowser* self, const char* artist, const char* album) {
-	Block9Data* _data9_;
-	GtkVBox* vbox;
-	GtkHBox* box;
-	GtkLabel* label;
-	const char* _tmp0_;
-	const char* _tmp1_;
-	char* _tmp2_;
-	GtkHBox* hbox;
-	GtkAlignment* ali;
-	GmpcMetaImage* artist_image;
-	mpd_Song* song;
-	char* _tmp3_;
-	char* _tmp4_;
-	GtkTable* info_box;
-	gint i;
-	GmpcStatsLabel* pt_label;
-	GmpcStatsLabel* _tmp5_;
-	GmpcStatsLabel* _tmp6_;
-	GmpcStatsLabel* _tmp7_;
-	GtkHSeparator* _tmp8_;
-	GtkHBox* _tmp9_;
-	GtkButton* button;
-	GtkButton* _tmp10_;
-	GtkImage* _tmp11_;
-	GtkHSeparator* sep;
-	GtkHBox* hboxje;
-	GSList* group;
-	GtkAlignment* _tmp18_;
-	GtkHBox* bottom_hbox;
-	GtkVBox* metadata_vbox;
-	GtkHSeparator* _tmp19_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (artist != NULL);
-	g_return_if_fail (album != NULL);
-	_data9_ = g_slice_new0 (Block9Data);
-	_data9_->_ref_count_ = 1;
-	_data9_->self = g_object_ref (self);
-	vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	gtk_container_set_border_width ((GtkContainer*) vbox, (guint) 8);
-	box = gmpc_metadata_browser_history_buttons (self);
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-	gtk_label_set_selectable (label, TRUE);
-	_tmp0_ = NULL;
-	if (artist != NULL) {
-		_tmp0_ = artist;
-	} else {
-		_tmp0_ = _ ("Unknown");
-	}
-	_tmp1_ = NULL;
-	if (album != NULL) {
-		_tmp1_ = album;
-	} else {
-		_tmp1_ = _ ("Unknown");
-	}
-	gtk_label_set_markup (label, _tmp2_ = g_markup_printf_escaped ("<span size='xx-large' weight='bold'>%s - %s</span>", _tmp0_, _tmp1_));
-	_g_free0 (_tmp2_);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 0.f, 0.f));
-	artist_image = g_object_ref_sink (gmpc_metaimage_new_size (META_ALBUM_ART, 250));
-	gmpc_metaimage_set_squared (artist_image, FALSE);
-	song = mpd_newSong ();
-	song->artist = (_tmp3_ = g_strdup (artist), _g_free0 (song->artist), _tmp3_);
-	song->album = (_tmp4_ = g_strdup (album), _g_free0 (song->album), _tmp4_);
-	gmpc_metaimage_update_cover_from_song (artist_image, song);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) artist_image);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	info_box = g_object_ref_sink ((GtkTable*) gtk_table_new ((guint) 4, (guint) 2, FALSE));
-	gtk_table_set_row_spacings (info_box, (guint) 3);
-	gtk_table_set_col_spacings (info_box, (guint) 8);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) info_box, FALSE, FALSE, (guint) 0);
-	i = 0;
-	if (song->artist != NULL) {
-		gmpc_metadata_browser_add_entry (self, info_box, _ ("Artist"), song->artist, NULL, &i, "media-artist");
-	}
-	pt_label = g_object_ref_sink (gmpc_stats_label_new (ALBUM_GENRES_SONGS, song));
-	gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.5f);
-	gtk_label_set_line_wrap ((GtkLabel*) pt_label, TRUE);
-	gmpc_metadata_browser_add_entry (self, info_box, _ ("Genres"), NULL, (GtkWidget*) pt_label, &i, "media-genre");
-	pt_label = (_tmp5_ = g_object_ref_sink (gmpc_stats_label_new (ALBUM_DATES_SONGS, song)), _g_object_unref0 (pt_label), _tmp5_);
-	gtk_label_set_line_wrap ((GtkLabel*) pt_label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.5f);
-	gmpc_metadata_browser_add_entry (self, info_box, _ ("Dates"), NULL, (GtkWidget*) pt_label, &i, "media-date");
-	pt_label = (_tmp6_ = g_object_ref_sink (gmpc_stats_label_new (ALBUM_NUM_SONGS, song)), _g_object_unref0 (pt_label), _tmp6_);
-	gtk_label_set_line_wrap ((GtkLabel*) pt_label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.5f);
-	gmpc_metadata_browser_add_entry (self, info_box, _ ("Songs"), NULL, (GtkWidget*) pt_label, &i, "media-num-tracks");
-	pt_label = (_tmp7_ = g_object_ref_sink (gmpc_stats_label_new (ALBUM_PLAYTIME_SONGS, song)), _g_object_unref0 (pt_label), _tmp7_);
-	gtk_label_set_line_wrap ((GtkLabel*) pt_label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.5f);
-	gmpc_metadata_browser_add_entry (self, info_box, _ ("Playtime"), NULL, (GtkWidget*) pt_label, &i, "media-track-length");
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) hbox, FALSE, FALSE, (guint) 0);
-	gtk_table_attach (info_box, (GtkWidget*) (_tmp8_ = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ())), (guint) 0, (guint) 2, (guint) i, (guint) (i + 1), GTK_SHRINK | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-	_g_object_unref0 (_tmp8_);
-	i++;
-	hbox = (_tmp9_ = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6)), _g_object_unref0 (hbox), _tmp9_);
-	button = g_object_ref_sink ((GtkButton*) gtk_button_new_from_stock ("gtk-add"));
-	gtk_button_set_relief (button, GTK_RELIEF_NONE);
-	g_signal_connect_object (button, "clicked", (GCallback) _gmpc_metadata_browser_add_selected_song_gtk_button_clicked, self, 0);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-	button = (_tmp10_ = g_object_ref_sink ((GtkButton*) gtk_button_new_with_mnemonic (_ ("_Replace"))), _g_object_unref0 (button), _tmp10_);
-	gtk_button_set_image (button, (GtkWidget*) (_tmp11_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-redo", GTK_ICON_SIZE_BUTTON))));
-	_g_object_unref0 (_tmp11_);
-	gtk_button_set_relief (button, GTK_RELIEF_NONE);
-	g_signal_connect_object (button, "clicked", (GCallback) _gmpc_metadata_browser_replace_selected_song_gtk_button_clicked, self, 0);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-	gtk_table_attach (info_box, (GtkWidget*) hbox, (guint) 0, (guint) 2, (guint) i, (guint) (i + 1), GTK_SHRINK | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-	i++;
-	sep = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ());
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 4);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) sep, FALSE, FALSE, (guint) 0);
-	hboxje = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	_data9_->notebook = g_object_ref_sink ((GtkNotebook*) gtk_notebook_new ());
-	gtk_notebook_set_show_border (_data9_->notebook, FALSE);
-	gtk_notebook_set_show_tabs (_data9_->notebook, FALSE);
-	i = 0;
-	group = NULL;
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-album-information", 1) == 1) {
-		Block10Data* _data10_;
-		GtkAlignment* alib;
-		GmpcMetaTextView* text_view;
-		GtkLabel* _tmp12_;
-		GtkRadioButton* rbutton;
-		_data10_ = g_slice_new0 (Block10Data);
-		_data10_->_ref_count_ = 1;
-		_data10_->_data9_ = block9_data_ref (_data9_);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		text_view = g_object_ref_sink (gmpc_meta_text_view_new (META_ALBUM_TXT));
-		gtk_text_view_set_left_margin ((GtkTextView*) text_view, 8);
-		gmpc_meta_text_view_query_text_from_song (text_view, song);
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) text_view);
-		gtk_notebook_append_page (_data9_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp12_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Album information")))));
-		_g_object_unref0 (_tmp12_);
-		rbutton = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Album information")));
-		group = gtk_radio_button_get_group (rbutton);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) rbutton, FALSE, FALSE, (guint) 0);
-		_data10_->j = i;
-		g_signal_connect_data ((GtkButton*) rbutton, "clicked", (GCallback) __lambda10__gtk_button_clicked, block10_data_ref (_data10_), (GClosureNotify) block10_data_unref, 0);
-		i++;
-		gtk_widget_show ((GtkWidget*) alib);
-		_g_object_unref0 (alib);
-		_g_object_unref0 (text_view);
-		_g_object_unref0 (rbutton);
-		block10_data_unref (_data10_);
-	}
-	{
-		Block11Data* _data11_;
-		GmpcMpdDataModel* songs;
-		GtkScrolledWindow* sw;
-		char* albumartist;
-		gboolean _tmp14_ = FALSE;
-		MpdData* data;
-		MpdData* _tmp15_;
-		GmpcMpdDataTreeview* song_tree;
-		GtkAlignment* alib;
-		GtkLabel* _tmp16_;
-		GtkRadioButton* rbutton;
-		_data11_ = g_slice_new0 (Block11Data);
-		_data11_->_ref_count_ = 1;
-		_data11_->_data9_ = block9_data_ref (_data9_);
-		songs = gmpc_mpddata_model_new ();
-		sw = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL));
-		gtk_scrolled_window_set_policy (sw, GTK_POLICY_AUTOMATIC, GTK_POLICY_NEVER);
-		gtk_scrolled_window_set_shadow_type (sw, GTK_SHADOW_ETCHED_IN);
-		albumartist = NULL;
-		if (mpd_server_tag_supported (connection, MPD_TAG_ITEM_ALBUM_ARTIST)) {
-			MpdData* ydata;
-			mpd_database_search_field_start (connection, MPD_TAG_ITEM_ALBUM_ARTIST);
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, album);
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-			ydata = mpd_database_search_commit (connection);
-			if (ydata != NULL) {
-				if (string_get_length (ydata->tag) > 0) {
-					char* _tmp13_;
-					albumartist = (_tmp13_ = g_strdup (ydata->tag), _g_free0 (albumartist), _tmp13_);
-				}
-			}
-			_mpd_data_free0 (ydata);
-		}
-		mpd_database_search_start (connection, TRUE);
-		if (albumartist != NULL) {
-			_tmp14_ = string_get_length (albumartist) > 0;
-		} else {
-			_tmp14_ = FALSE;
-		}
-		if (_tmp14_) {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM_ARTIST, albumartist);
-		} else {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-		}
-		if (album != NULL) {
-			mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, album);
-		}
-		data = mpd_database_search_commit (connection);
-		data = misc_sort_mpddata_by_album_disc_track (data);
-		gmpc_mpddata_model_set_mpd_data (songs, (_tmp15_ = data, data = NULL, _tmp15_));
-		song_tree = g_object_ref_sink (gmpc_mpddata_treeview_new ("metadata-album-songs", TRUE, (GtkTreeModel*) songs));
-		gmpc_mpddata_treeview_enable_click_fix (song_tree);
-		g_signal_connect_object ((GtkWidget*) song_tree, "button-release-event", (GCallback) _gmpc_metadata_browser_album_song_tree_button_press_event_gtk_widget_button_release_event, self, 0);
-		g_signal_connect_object ((GtkTreeView*) song_tree, "row-activated", (GCallback) _gmpc_metadata_browser_album_song_tree_row_activated_gtk_tree_view_row_activated, self, 0);
-		gtk_container_add ((GtkContainer*) sw, (GtkWidget*) song_tree);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) sw);
-		gtk_notebook_append_page (_data9_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp16_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Song list")))));
-		_g_object_unref0 (_tmp16_);
-		rbutton = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Song list")));
-		group = gtk_radio_button_get_group (rbutton);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) rbutton, FALSE, FALSE, (guint) 0);
-		_data11_->j = i;
-		g_signal_connect_data ((GtkButton*) rbutton, "clicked", (GCallback) __lambda11__gtk_button_clicked, block11_data_ref (_data11_), (GClosureNotify) block11_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) alib);
-		i++;
-		_g_object_unref0 (songs);
-		_g_object_unref0 (sw);
-		_g_free0 (albumartist);
-		_mpd_data_free0 (data);
-		_g_object_unref0 (song_tree);
-		_g_object_unref0 (alib);
-		_g_object_unref0 (rbutton);
-		block11_data_unref (_data11_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-web-links", 1) == 1) {
-		Block12Data* _data12_;
-		GmpcSongLinks* song_links;
-		GtkLabel* _tmp17_;
-		GtkRadioButton* rbutton;
-		_data12_ = g_slice_new0 (Block12Data);
-		_data12_->_ref_count_ = 1;
-		_data12_->_data9_ = block9_data_ref (_data9_);
-		song_links = g_object_ref_sink (gmpc_song_links_new (GMPC_SONG_LINKS_TYPE_ALBUM, song));
-		gtk_notebook_append_page (_data9_->notebook, (GtkWidget*) song_links, (GtkWidget*) (_tmp17_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Web Links")))));
-		_g_object_unref0 (_tmp17_);
-		rbutton = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Web Links")));
-		group = gtk_radio_button_get_group (rbutton);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) rbutton, FALSE, FALSE, (guint) 0);
-		_data12_->j = i;
-		g_signal_connect_data ((GtkButton*) rbutton, "clicked", (GCallback) __lambda12__gtk_button_clicked, block12_data_ref (_data12_), (GClosureNotify) block12_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) song_links);
-		i++;
-		_g_object_unref0 (song_links);
-		_g_object_unref0 (rbutton);
-		block12_data_unref (_data12_);
-	}
-	g_signal_connect_data ((GObject*) _data9_->notebook, "notify::page", (GCallback) __lambda13__g_object_notify, block9_data_ref (_data9_), (GClosureNotify) block9_data_unref, 0);
-	if (i > 0) {
-		gint page;
-		page = cfg_get_single_value_as_int_with_default (config, "MetaData", "album-last-page", 0);
-		if (page > i) {
-			gtk_notebook_set_current_page (_data9_->notebook, 0);
-		} else {
-			GtkRadioButton* w;
-			w = _g_object_ref0 ((GtkRadioButton*) g_slist_nth_data (group, (guint) ((i - page) - 1)));
-			gtk_toggle_button_set_active ((GtkToggleButton*) w, TRUE);
-			gtk_notebook_set_current_page (_data9_->notebook, page);
-			_g_object_unref0 (w);
-		}
-	}
-	ali = (_tmp18_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.5f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp18_);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) hboxje);
-	bottom_hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	metadata_vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	sep = (_tmp19_ = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ()), _g_object_unref0 (sep), _tmp19_);
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 1);
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) sep, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) _data9_->notebook, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) bottom_hbox, (GtkWidget*) metadata_vbox, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) bottom_hbox, TRUE, TRUE, (guint) 0);
-	gtk_container_add ((GtkContainer*) self->priv->metadata_box, (GtkWidget*) vbox);
-	gmpc_metadata_browser_change_color_style (self, (GtkWidget*) self->priv->metadata_sw);
-	gtk_widget_show_all ((GtkWidget*) self->priv->metadata_sw);
-	_g_object_unref0 (vbox);
-	_g_object_unref0 (box);
-	_g_object_unref0 (label);
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (ali);
-	_g_object_unref0 (artist_image);
-	_mpd_freeSong0 (song);
-	_g_object_unref0 (info_box);
-	_g_object_unref0 (pt_label);
-	_g_object_unref0 (button);
-	_g_object_unref0 (sep);
-	_g_object_unref0 (hboxje);
-	_g_object_unref0 (bottom_hbox);
-	_g_object_unref0 (metadata_vbox);
-	block9_data_unref (_data9_);
-}
-
-
-static void _lambda14_ (GtkButton* source, Block14Data* _data14_) {
-	Block13Data* _data13_;
-	GmpcMetadataBrowser * self;
-	_data13_ = _data14_->_data13_;
-	self = _data13_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:2176: notebook page %i clicked", _data14_->j);
-	gtk_notebook_set_current_page (_data13_->notebook, _data14_->j);
-}
-
-
-static void __lambda14__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda14_ (_sender, self);
-}
-
-
-static Block14Data* block14_data_ref (Block14Data* _data14_) {
-	++_data14_->_ref_count_;
-	return _data14_;
-}
-
-
-static void block14_data_unref (Block14Data* _data14_) {
-	if ((--_data14_->_ref_count_) == 0) {
-		block13_data_unref (_data14_->_data13_);
-		g_slice_free (Block14Data, _data14_);
-	}
-}
-
-
-static void _lambda15_ (GtkButton* source, Block15Data* _data15_) {
-	Block13Data* _data13_;
-	GmpcMetadataBrowser * self;
-	_data13_ = _data15_->_data13_;
-	self = _data13_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:2197: notebook page %i clicked", _data15_->j);
-	gtk_notebook_set_current_page (_data13_->notebook, _data15_->j);
-}
-
-
-static void __lambda15__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda15_ (_sender, self);
-}
-
-
-static Block15Data* block15_data_ref (Block15Data* _data15_) {
-	++_data15_->_ref_count_;
-	return _data15_;
-}
-
-
-static void block15_data_unref (Block15Data* _data15_) {
-	if ((--_data15_->_ref_count_) == 0) {
-		block13_data_unref (_data15_->_data13_);
-		g_slice_free (Block15Data, _data15_);
-	}
-}
-
-
-static void _lambda16_ (GtkButton* source, Block16Data* _data16_) {
-	Block13Data* _data13_;
-	GmpcMetadataBrowser * self;
-	_data13_ = _data16_->_data13_;
-	self = _data13_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:2228: notebook page %i clicked", _data16_->j);
-	gtk_notebook_set_current_page (_data13_->notebook, _data16_->j);
-}
-
-
-static void __lambda16__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda16_ (_sender, self);
-}
-
-
-static Block16Data* block16_data_ref (Block16Data* _data16_) {
-	++_data16_->_ref_count_;
-	return _data16_;
-}
-
-
-static void block16_data_unref (Block16Data* _data16_) {
-	if ((--_data16_->_ref_count_) == 0) {
-		block13_data_unref (_data16_->_data13_);
-		g_slice_free (Block16Data, _data16_);
-	}
-}
-
-
-static void _lambda17_ (GtkButton* source, Block17Data* _data17_) {
-	Block13Data* _data13_;
-	GmpcMetadataBrowser * self;
-	_data13_ = _data17_->_data13_;
-	self = _data13_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:2245: notebook page %i clicked", _data17_->j);
-	gtk_notebook_set_current_page (_data13_->notebook, _data17_->j);
-}
-
-
-static void __lambda17__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda17_ (_sender, self);
-}
-
-
-static Block17Data* block17_data_ref (Block17Data* _data17_) {
-	++_data17_->_ref_count_;
-	return _data17_;
-}
-
-
-static void block17_data_unref (Block17Data* _data17_) {
-	if ((--_data17_->_ref_count_) == 0) {
-		block13_data_unref (_data17_->_data13_);
-		g_slice_free (Block17Data, _data17_);
-	}
-}
-
-
-static void _lambda18_ (GObject* source, GParamSpec* spec, Block13Data* _data13_) {
-	GmpcMetadataBrowser * self;
-	gint page;
-	self = _data13_->self;
-	g_return_if_fail (source != NULL);
-	g_return_if_fail (spec != NULL);
-	page = gtk_notebook_get_current_page (_data13_->notebook);
-	cfg_set_single_value_as_int (config, "MetaData", "artist-last-page", (gint) page);
-}
-
-
-static void __lambda18__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self) {
-	_lambda18_ (_sender, pspec, self);
-}
-
-
-static void _lambda19_ (GtkButton* source, Block18Data* _data18_) {
-	Block13Data* _data13_;
-	GmpcMetadataBrowser * self;
-	_data13_ = _data18_->_data13_;
-	self = _data13_->self;
-	g_return_if_fail (source != NULL);
-	info2_fill_album_view (_data13_->song->artist, _data18_->but_song->album);
-}
-
-
-static void __lambda19__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda19_ (_sender, self);
-}
-
-
-static Block18Data* block18_data_ref (Block18Data* _data18_) {
-	++_data18_->_ref_count_;
-	return _data18_;
-}
-
-
-static void block18_data_unref (Block18Data* _data18_) {
-	if ((--_data18_->_ref_count_) == 0) {
-		block13_data_unref (_data18_->_data13_);
-		_mpd_freeSong0 (_data18_->but_song);
-		g_slice_free (Block18Data, _data18_);
-	}
-}
-
-
-static Block13Data* block13_data_ref (Block13Data* _data13_) {
-	++_data13_->_ref_count_;
-	return _data13_;
-}
-
-
-static void block13_data_unref (Block13Data* _data13_) {
-	if ((--_data13_->_ref_count_) == 0) {
-		_g_object_unref0 (_data13_->self);
-		_mpd_freeSong0 (_data13_->song);
-		_g_object_unref0 (_data13_->notebook);
-		g_slice_free (Block13Data, _data13_);
-	}
-}
-
-
-static void gmpc_metadata_browser_metadata_box_show_artist (GmpcMetadataBrowser* self, const char* artist) {
-	Block13Data* _data13_;
-	GtkVBox* vbox;
-	gint i;
-	GtkHBox* box;
-	GtkLabel* label;
-	const char* _tmp0_;
-	char* _tmp1_;
-	char* _tmp2_;
-	GtkHBox* hbox;
-	GtkAlignment* ali;
-	GmpcMetaImage* artist_image;
-	GtkTable* info_box;
-	GmpcStatsLabel* pt_label;
-	GmpcStatsLabel* _tmp3_;
-	GmpcStatsLabel* _tmp4_;
-	GmpcStatsLabel* _tmp5_;
-	GtkHSeparator* _tmp6_;
-	GtkHBox* _tmp7_;
-	GtkButton* button;
-	GtkButton* _tmp8_;
-	GtkImage* _tmp9_;
-	GtkHBox* hboxje;
-	GtkHSeparator* sep;
-	GSList* group;
-	GtkAlignment* _tmp15_;
-	GtkHBox* bottom_hbox;
-	GtkVBox* metadata_vbox;
-	GtkHSeparator* _tmp16_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (artist != NULL);
-	_data13_ = g_slice_new0 (Block13Data);
-	_data13_->_ref_count_ = 1;
-	_data13_->self = g_object_ref (self);
-	vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	i = 0;
-	gtk_container_set_border_width ((GtkContainer*) vbox, (guint) 8);
-	box = gmpc_metadata_browser_history_buttons (self);
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-	gtk_label_set_selectable (label, TRUE);
-	_tmp0_ = NULL;
-	if (artist != NULL) {
-		_tmp0_ = artist;
-	} else {
-		_tmp0_ = _ ("Unknown");
-	}
-	gtk_label_set_markup (label, _tmp1_ = g_markup_printf_escaped ("<span size='xx-large' weight='bold'>%s</span>", _tmp0_));
-	_g_free0 (_tmp1_);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-	_data13_->song = mpd_newSong ();
-	_data13_->song->artist = (_tmp2_ = g_strdup (artist), _g_free0 (_data13_->song->artist), _tmp2_);
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 0.f, 0.f));
-	artist_image = g_object_ref_sink (gmpc_metaimage_new_size (META_ARTIST_ART, 250));
-	gmpc_metaimage_set_squared (artist_image, FALSE);
-	gmpc_metaimage_update_cover_from_song (artist_image, _data13_->song);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) artist_image);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	info_box = g_object_ref_sink ((GtkTable*) gtk_table_new ((guint) 4, (guint) 2, FALSE));
-	gtk_table_set_row_spacings (info_box, (guint) 3);
-	gtk_table_set_col_spacings (info_box, (guint) 8);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) info_box, FALSE, FALSE, (guint) 0);
-	pt_label = g_object_ref_sink (gmpc_stats_label_new (ARTIST_GENRES_SONGS, _data13_->song));
-	gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.5f);
-	gtk_label_set_line_wrap ((GtkLabel*) pt_label, TRUE);
-	gmpc_metadata_browser_add_entry (self, info_box, _ ("Genres"), NULL, (GtkWidget*) pt_label, &i, "media-genre");
-	pt_label = (_tmp3_ = g_object_ref_sink (gmpc_stats_label_new (ARTIST_DATES_SONGS, _data13_->song)), _g_object_unref0 (pt_label), _tmp3_);
-	gtk_label_set_line_wrap ((GtkLabel*) pt_label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.5f);
-	gmpc_metadata_browser_add_entry (self, info_box, _ ("Dates"), NULL, (GtkWidget*) pt_label, &i, "media-date");
-	pt_label = (_tmp4_ = g_object_ref_sink (gmpc_stats_label_new (ARTIST_NUM_SONGS, _data13_->song)), _g_object_unref0 (pt_label), _tmp4_);
-	gtk_label_set_line_wrap ((GtkLabel*) pt_label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.5f);
-	gmpc_metadata_browser_add_entry (self, info_box, _ ("Songs"), NULL, (GtkWidget*) pt_label, &i, "media-num-tracks");
-	pt_label = (_tmp5_ = g_object_ref_sink (gmpc_stats_label_new (ARTIST_PLAYTIME_SONGS, _data13_->song)), _g_object_unref0 (pt_label), _tmp5_);
-	gtk_label_set_line_wrap ((GtkLabel*) pt_label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) pt_label, 0.0f, 0.5f);
-	gmpc_metadata_browser_add_entry (self, info_box, _ ("Playtime"), NULL, (GtkWidget*) pt_label, &i, "media-track-length");
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) hbox, FALSE, FALSE, (guint) 0);
-	gtk_table_attach (info_box, (GtkWidget*) (_tmp6_ = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ())), (guint) 0, (guint) 2, (guint) i, (guint) (i + 1), GTK_SHRINK | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-	_g_object_unref0 (_tmp6_);
-	i++;
-	hbox = (_tmp7_ = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6)), _g_object_unref0 (hbox), _tmp7_);
-	button = g_object_ref_sink ((GtkButton*) gtk_button_new_from_stock ("gtk-add"));
-	gtk_button_set_relief (button, GTK_RELIEF_NONE);
-	g_signal_connect_object (button, "clicked", (GCallback) _gmpc_metadata_browser_add_selected_song_gtk_button_clicked, self, 0);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-	button = (_tmp8_ = g_object_ref_sink ((GtkButton*) gtk_button_new_with_mnemonic (_ ("_Replace"))), _g_object_unref0 (button), _tmp8_);
-	gtk_button_set_image (button, (GtkWidget*) (_tmp9_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-redo", GTK_ICON_SIZE_BUTTON))));
-	_g_object_unref0 (_tmp9_);
-	gtk_button_set_relief (button, GTK_RELIEF_NONE);
-	g_signal_connect_object (button, "clicked", (GCallback) _gmpc_metadata_browser_replace_selected_song_gtk_button_clicked, self, 0);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-	gtk_table_attach (info_box, (GtkWidget*) hbox, (guint) 0, (guint) 2, (guint) i, (guint) (i + 1), GTK_SHRINK | GTK_FILL, GTK_SHRINK | GTK_FILL, (guint) 0, (guint) 0);
-	i++;
-	hboxje = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	sep = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ());
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 4);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) sep, FALSE, FALSE, (guint) 0);
-	_data13_->notebook = g_object_ref_sink ((GtkNotebook*) gtk_notebook_new ());
-	gtk_notebook_set_show_border (_data13_->notebook, FALSE);
-	gtk_notebook_set_show_tabs (_data13_->notebook, FALSE);
-	i = 0;
-	group = NULL;
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-artist-information", 1) == 1) {
-		Block14Data* _data14_;
-		GtkAlignment* alib;
-		GmpcMetaTextView* text_view;
-		GtkLabel* _tmp10_;
-		GtkRadioButton* button_sai;
-		_data14_ = g_slice_new0 (Block14Data);
-		_data14_->_ref_count_ = 1;
-		_data14_->_data13_ = block13_data_ref (_data13_);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		text_view = g_object_ref_sink (gmpc_meta_text_view_new (META_ARTIST_TXT));
-		gtk_text_view_set_left_margin ((GtkTextView*) text_view, 8);
-		gmpc_meta_text_view_query_text_from_song (text_view, _data13_->song);
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) text_view);
-		gtk_notebook_append_page (_data13_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp10_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Artist information")))));
-		_g_object_unref0 (_tmp10_);
-		button_sai = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Artist information")));
-		group = gtk_radio_button_get_group (button_sai);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button_sai, FALSE, FALSE, (guint) 0);
-		_data14_->j = i;
-		g_signal_connect_data ((GtkButton*) button_sai, "clicked", (GCallback) __lambda14__gtk_button_clicked, block14_data_ref (_data14_), (GClosureNotify) block14_data_unref, 0);
-		i++;
-		gtk_widget_show ((GtkWidget*) alib);
-		_g_object_unref0 (alib);
-		_g_object_unref0 (text_view);
-		_g_object_unref0 (button_sai);
-		block14_data_unref (_data14_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-similar-artist", 1) == 1) {
-		Block15Data* _data15_;
-		GmpcWidgetSimilarArtist* similar_artist;
-		GtkLabel* _tmp11_;
-		GtkRadioButton* button_sa;
-		_data15_ = g_slice_new0 (Block15Data);
-		_data15_->_ref_count_ = 1;
-		_data15_->_data13_ = block13_data_ref (_data13_);
-		similar_artist = g_object_ref_sink (gmpc_widget_similar_artist_new (connection, _data13_->song));
-		gtk_notebook_append_page (_data13_->notebook, (GtkWidget*) similar_artist, (GtkWidget*) (_tmp11_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Similar Artist")))));
-		_g_object_unref0 (_tmp11_);
-		button_sa = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Similar Artist")));
-		group = gtk_radio_button_get_group (button_sa);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button_sa, FALSE, FALSE, (guint) 0);
-		_data15_->j = i;
-		g_signal_connect_data ((GtkButton*) button_sa, "clicked", (GCallback) __lambda15__gtk_button_clicked, block15_data_ref (_data15_), (GClosureNotify) block15_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) similar_artist);
-		i++;
-		_g_object_unref0 (similar_artist);
-		_g_object_unref0 (button_sa);
-		block15_data_unref (_data15_);
-	}
-	{
-		Block16Data* _data16_;
-		GmpcMpdDataModel* songs;
-		GtkScrolledWindow* sw;
-		MpdData* data;
-		MpdData* _tmp12_;
-		GmpcMpdDataTreeview* song_tree;
-		GtkAlignment* alib;
-		GtkLabel* _tmp13_;
-		GtkRadioButton* rbutton;
-		_data16_ = g_slice_new0 (Block16Data);
-		_data16_->_ref_count_ = 1;
-		_data16_->_data13_ = block13_data_ref (_data13_);
-		songs = gmpc_mpddata_model_new ();
-		sw = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL));
-		gtk_scrolled_window_set_policy (sw, GTK_POLICY_AUTOMATIC, GTK_POLICY_NEVER);
-		gtk_scrolled_window_set_shadow_type (sw, GTK_SHADOW_ETCHED_IN);
-		mpd_database_search_start (connection, TRUE);
-		mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, artist);
-		data = mpd_database_search_commit (connection);
-		data = misc_sort_mpddata_by_album_disc_track (data);
-		gmpc_mpddata_model_set_mpd_data (songs, (_tmp12_ = data, data = NULL, _tmp12_));
-		song_tree = g_object_ref_sink (gmpc_mpddata_treeview_new ("metadata-artist-songs", TRUE, (GtkTreeModel*) songs));
-		gmpc_mpddata_treeview_enable_click_fix (song_tree);
-		g_signal_connect_object ((GtkWidget*) song_tree, "button-release-event", (GCallback) _gmpc_metadata_browser_album_song_tree_button_press_event_gtk_widget_button_release_event, self, 0);
-		g_signal_connect_object ((GtkTreeView*) song_tree, "row-activated", (GCallback) _gmpc_metadata_browser_album_song_tree_row_activated_gtk_tree_view_row_activated, self, 0);
-		gtk_container_add ((GtkContainer*) sw, (GtkWidget*) song_tree);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) sw);
-		gtk_notebook_append_page (_data13_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp13_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Song list")))));
-		_g_object_unref0 (_tmp13_);
-		rbutton = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Song list")));
-		group = gtk_radio_button_get_group (rbutton);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) rbutton, FALSE, FALSE, (guint) 0);
-		_data16_->j = i;
-		g_signal_connect_data ((GtkButton*) rbutton, "clicked", (GCallback) __lambda16__gtk_button_clicked, block16_data_ref (_data16_), (GClosureNotify) block16_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) alib);
-		i++;
-		_g_object_unref0 (songs);
-		_g_object_unref0 (sw);
-		_mpd_data_free0 (data);
-		_g_object_unref0 (song_tree);
-		_g_object_unref0 (alib);
-		_g_object_unref0 (rbutton);
-		block16_data_unref (_data16_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-web-links", 1) == 1) {
-		Block17Data* _data17_;
-		GmpcSongLinks* song_links;
-		GtkLabel* _tmp14_;
-		GtkRadioButton* button_sl;
-		_data17_ = g_slice_new0 (Block17Data);
-		_data17_->_ref_count_ = 1;
-		_data17_->_data13_ = block13_data_ref (_data13_);
-		song_links = g_object_ref_sink (gmpc_song_links_new (GMPC_SONG_LINKS_TYPE_ARTIST, _data13_->song));
-		gtk_notebook_append_page (_data13_->notebook, (GtkWidget*) song_links, (GtkWidget*) (_tmp14_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Web Links")))));
-		_g_object_unref0 (_tmp14_);
-		button_sl = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Web Links")));
-		group = gtk_radio_button_get_group (button_sl);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button_sl, FALSE, FALSE, (guint) 0);
-		_data17_->j = i;
-		g_signal_connect_data ((GtkButton*) button_sl, "clicked", (GCallback) __lambda17__gtk_button_clicked, block17_data_ref (_data17_), (GClosureNotify) block17_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) song_links);
-		i++;
-		_g_object_unref0 (song_links);
-		_g_object_unref0 (button_sl);
-		block17_data_unref (_data17_);
-	}
-	g_signal_connect_data ((GObject*) _data13_->notebook, "notify::page", (GCallback) __lambda18__g_object_notify, block13_data_ref (_data13_), (GClosureNotify) block13_data_unref, 0);
-	if (i > 0) {
-		gint page;
-		page = cfg_get_single_value_as_int_with_default (config, "MetaData", "artist-last-page", 0);
-		if (page > i) {
-			gtk_notebook_set_current_page (_data13_->notebook, 0);
-		} else {
-			GtkRadioButton* w;
-			w = _g_object_ref0 ((GtkRadioButton*) g_slist_nth_data (group, (guint) ((i - page) - 1)));
-			gtk_toggle_button_set_active ((GtkToggleButton*) w, TRUE);
-			gtk_notebook_set_current_page (_data13_->notebook, page);
-			_g_object_unref0 (w);
-		}
-	}
-	ali = (_tmp15_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.5f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp15_);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) hboxje);
-	bottom_hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	metadata_vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	sep = (_tmp16_ = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ()), _g_object_unref0 (sep), _tmp16_);
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 1);
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) sep, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) _data13_->notebook, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) bottom_hbox, (GtkWidget*) metadata_vbox, TRUE, TRUE, (guint) 0);
-	if (_data13_->song->artist != NULL) {
-		GtkVSeparator* sep2;
-		gint albums;
-		GtkAlignment* _tmp17_;
-		GtkVBox* album_hbox;
-		GtkLabel* _tmp18_;
-		char* _tmp19_;
-		MpdData* list;
-		MpdData* data;
-		sep2 = g_object_ref_sink ((GtkVSeparator*) gtk_vseparator_new ());
-		gtk_widget_set_size_request ((GtkWidget*) sep2, -1, 4);
-		gtk_box_pack_start ((GtkBox*) bottom_hbox, (GtkWidget*) sep2, FALSE, FALSE, (guint) 0);
-		albums = 0;
-		ali = (_tmp17_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.0f, 0.0f, 0.0f)), _g_object_unref0 (ali), _tmp17_);
-		album_hbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-		gtk_widget_set_size_request ((GtkWidget*) album_hbox, 250, -1);
-		gtk_container_add ((GtkContainer*) ali, (GtkWidget*) album_hbox);
-		gtk_box_pack_start ((GtkBox*) bottom_hbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-		label = (_tmp18_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data13_->song->artist)), _g_object_unref0 (label), _tmp18_);
-		gtk_label_set_selectable (label, TRUE);
-		gtk_widget_set_size_request ((GtkWidget*) label, 240, -1);
-		gtk_label_set_markup (label, _tmp19_ = g_markup_printf_escaped ("<span size='x-large' weight='bold' color='%s'>%s</span><span size='x-large' weight='bold'> %s</span>", self->priv->item_color, _ ("Albums by"), _data13_->song->artist));
-		_g_free0 (_tmp19_);
-		gtk_label_set_line_wrap_mode (label, PANGO_WRAP_WORD_CHAR);
-		gtk_label_set_line_wrap (label, TRUE);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) album_hbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-		mpd_database_search_field_start (connection, MPD_TAG_ITEM_ALBUM);
-		mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, _data13_->song->artist);
-		list = NULL;
-		data = mpd_database_search_commit (connection);
-		if (data != NULL) {
-			const MpdData* iter;
-			iter = mpd_data_get_first (data);
-			{
-				gboolean _tmp20_;
-				_tmp20_ = TRUE;
-				while (TRUE) {
-					mpd_Song* _tmp21_;
-					char* _tmp22_;
-					char* _tmp23_;
-					MpdData* ydata;
-					if (!_tmp20_) {
-						if (!(iter != NULL)) {
-							break;
-						}
-					}
-					_tmp20_ = FALSE;
-					if (_vala_strcmp0 (iter->tag, _data13_->song->album) == 0) {
-						iter = mpd_data_get_next_real (iter, FALSE);
-						continue;
-					}
-					list = mpd_new_data_struct_append (list);
-					list->type = MPD_DATA_TYPE_SONG;
-					list->song = (_tmp21_ = mpd_newSong (), _mpd_freeSong0 (list->song), _tmp21_);
-					list->song->artist = (_tmp22_ = g_strdup (_data13_->song->artist), _g_free0 (list->song->artist), _tmp22_);
-					list->song->album = (_tmp23_ = g_strdup (iter->tag), _g_free0 (list->song->album), _tmp23_);
-					mpd_database_search_field_start (connection, MPD_TAG_ITEM_DATE);
-					mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, _data13_->song->artist);
-					mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, iter->tag);
-					ydata = mpd_database_search_commit (connection);
-					if (ydata != NULL) {
-						const MpdData* yi;
-						yi = mpd_data_get_first (ydata);
-						while (TRUE) {
-							gboolean _tmp24_ = FALSE;
-							gboolean _tmp25_ = FALSE;
-							if (list->song->date == NULL) {
-								_tmp24_ = yi != NULL;
-							} else {
-								_tmp24_ = FALSE;
-							}
-							if (!_tmp24_) {
-								break;
-							}
-							if (yi->tag != NULL) {
-								_tmp25_ = string_get_length (yi->tag) > 0;
-							} else {
-								_tmp25_ = FALSE;
-							}
-							if (_tmp25_) {
-								char* _tmp26_;
-								list->song->date = (_tmp26_ = g_strdup (yi->tag), _g_free0 (list->song->date), _tmp26_);
-							}
-							yi = mpd_data_get_next_real (yi, FALSE);
-						}
-					}
-					iter = mpd_data_get_next_real (iter, FALSE);
-					_mpd_data_free0 (ydata);
-				}
-			}
-		}
-		list = misc_sort_mpddata_by_album_disc_track (list);
-		if (list != NULL) {
-			const MpdData* iter;
-			iter = mpd_data_get_first (list);
-			{
-				gboolean _tmp27_;
-				_tmp27_ = TRUE;
-				while (TRUE) {
-					Block18Data* _data18_;
-					GtkButton* _tmp28_;
-					GtkHBox* but_hbox;
-					GmpcMetaImage* image;
-					GtkLabel* but_label;
-					char* strlabel;
-					gboolean _tmp29_ = FALSE;
-					char* _tmp34_;
-					_data18_ = g_slice_new0 (Block18Data);
-					_data18_->_ref_count_ = 1;
-					_data18_->_data13_ = block13_data_ref (_data13_);
-					if (!_tmp27_) {
-						if (!(iter != NULL)) {
-							block18_data_unref (_data18_);
-							break;
-						}
-					}
-					_tmp27_ = FALSE;
-					button = (_tmp28_ = g_object_ref_sink ((GtkButton*) gtk_button_new ()), _g_object_unref0 (button), _tmp28_);
-					gtk_button_set_relief (button, GTK_RELIEF_NONE);
-					but_hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-					gtk_container_add ((GtkContainer*) button, (GtkWidget*) but_hbox);
-					image = g_object_ref_sink (gmpc_metaimage_new_size (META_ALBUM_ART, 48));
-					_data18_->but_song = _mpd_songDup0 (iter->song);
-					gmpc_metaimage_set_squared (image, TRUE);
-					gmpc_metaimage_update_cover_from_song_delayed (image, _data18_->but_song);
-					gtk_box_pack_start ((GtkBox*) but_hbox, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-					but_label = g_object_ref_sink ((GtkLabel*) gtk_label_new (iter->song->album));
-					gtk_label_set_selectable (but_label, TRUE);
-					gtk_misc_set_alignment ((GtkMisc*) but_label, 0.0f, 0.5f);
-					strlabel = g_strdup ("");
-					if (iter->song->date != NULL) {
-						_tmp29_ = string_get_length (iter->song->date) > 0;
-					} else {
-						_tmp29_ = FALSE;
-					}
-					if (_tmp29_) {
-						char* _tmp31_;
-						char* _tmp30_;
-						strlabel = (_tmp31_ = g_strconcat (strlabel, _tmp30_ = g_strdup_printf ("%s\n", iter->song->date), NULL), _g_free0 (strlabel), _tmp31_);
-						_g_free0 (_tmp30_);
-					}
-					if (iter->song->album != NULL) {
-						char* _tmp32_;
-						strlabel = (_tmp32_ = g_strconcat (strlabel, iter->song->album, NULL), _g_free0 (strlabel), _tmp32_);
-					} else {
-						char* _tmp33_;
-						strlabel = (_tmp33_ = g_strconcat (strlabel, _ ("No Album"), NULL), _g_free0 (strlabel), _tmp33_);
-					}
-					gtk_label_set_markup (but_label, _tmp34_ = g_markup_printf_escaped ("<b>%s</b>", strlabel));
-					_g_free0 (_tmp34_);
-					gtk_label_set_ellipsize (but_label, PANGO_ELLIPSIZE_END);
-					gtk_box_pack_start ((GtkBox*) but_hbox, (GtkWidget*) but_label, TRUE, TRUE, (guint) 0);
-					gtk_box_pack_start ((GtkBox*) album_hbox, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-					g_signal_connect_data (button, "clicked", (GCallback) __lambda19__gtk_button_clicked, block18_data_ref (_data18_), (GClosureNotify) block18_data_unref, 0);
-					albums++;
-					iter = mpd_data_get_next_real (iter, FALSE);
-					_g_object_unref0 (but_hbox);
-					_g_object_unref0 (image);
-					_g_object_unref0 (but_label);
-					_g_free0 (strlabel);
-					block18_data_unref (_data18_);
-				}
-			}
-		}
-		if (albums == 0) {
-			gtk_object_destroy ((GtkObject*) album_hbox);
-			gtk_object_destroy ((GtkObject*) sep2);
-		}
-		_g_object_unref0 (sep2);
-		_g_object_unref0 (album_hbox);
-		_mpd_data_free0 (list);
-		_mpd_data_free0 (data);
-	}
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) bottom_hbox, TRUE, TRUE, (guint) 0);
-	gtk_container_add ((GtkContainer*) self->priv->metadata_box, (GtkWidget*) vbox);
-	gmpc_metadata_browser_change_color_style (self, (GtkWidget*) self->priv->metadata_sw);
-	gtk_widget_show_all ((GtkWidget*) self->priv->metadata_box);
-	_g_object_unref0 (vbox);
-	_g_object_unref0 (box);
-	_g_object_unref0 (label);
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (ali);
-	_g_object_unref0 (artist_image);
-	_g_object_unref0 (info_box);
-	_g_object_unref0 (pt_label);
-	_g_object_unref0 (button);
-	_g_object_unref0 (hboxje);
-	_g_object_unref0 (sep);
-	_g_object_unref0 (bottom_hbox);
-	_g_object_unref0 (metadata_vbox);
-	block13_data_unref (_data13_);
-}
-
-
-static gboolean _gmpc_metadata_browser_metadata_box_update_real_gsource_func (gpointer self) {
-	return gmpc_metadata_browser_metadata_box_update_real (self);
-}
-
-
-static void gmpc_metadata_browser_metadata_box_update (GmpcMetadataBrowser* self) {
-	g_return_if_fail (self != NULL);
-	if (self->priv->update_timeout > 0) {
-		g_source_remove (self->priv->update_timeout);
-	}
-	self->priv->update_timeout = g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, _gmpc_metadata_browser_metadata_box_update_real_gsource_func, g_object_ref (self), g_object_unref);
-}
-
-
-static gboolean gmpc_metadata_browser_metadata_box_update_real (GmpcMetadataBrowser* self) {
-	gboolean result;
-	char* artist;
-	char* album;
-	mpd_Song* song;
-	g_return_val_if_fail (self != NULL, FALSE);
-	if (self->priv->block_update > 0) {
-		self->priv->update_timeout = (guint) 0;
-		result = FALSE;
-		return result;
-	}
-	artist = gmpc_metadata_browser_browser_get_selected_artist (self);
-	album = gmpc_metadata_browser_browser_get_selected_album (self);
-	song = gmpc_metadata_browser_browser_get_selected_song (self);
-	if (song != NULL) {
-		GmpcMetadataBrowserHitem _tmp0_ = {0};
-		GmpcMetadataBrowserHitem item;
-		mpd_Song* _tmp1_;
-		GtkWidget* view;
-		item = (memset (&_tmp0_, 0, sizeof (GmpcMetadataBrowserHitem)), _tmp0_);
-		item.song = (_tmp1_ = _mpd_songDup0 (song), _mpd_freeSong0 (item.song), _tmp1_);
-		item.type = GMPC_METADATA_BROWSER_HITEM_TYPE_SONG;
-		gmpc_metadata_browser_history_add (self, &item);
-		view = gmpc_metadata_browser_metadata_box_show_song (self, song, TRUE);
-		gtk_container_add ((GtkContainer*) self->priv->metadata_box, view);
-		gmpc_metadata_browser_change_color_style (self, (GtkWidget*) self->priv->metadata_sw);
-		gtk_widget_show_all ((GtkWidget*) self->priv->metadata_box);
-		gmpc_metadata_browser_hitem_destroy (&item);
-		_g_object_unref0 (view);
-	} else {
-		gboolean _tmp2_ = FALSE;
-		if (album != NULL) {
-			_tmp2_ = artist != NULL;
-		} else {
-			_tmp2_ = FALSE;
-		}
-		if (_tmp2_) {
-			GmpcMetadataBrowserHitem _tmp3_ = {0};
-			GmpcMetadataBrowserHitem item;
-			mpd_Song* _tmp4_;
-			char* _tmp5_;
-			char* _tmp6_;
-			item = (memset (&_tmp3_, 0, sizeof (GmpcMetadataBrowserHitem)), _tmp3_);
-			item.song = (_tmp4_ = mpd_newSong (), _mpd_freeSong0 (item.song), _tmp4_);
-			item.song->artist = (_tmp5_ = g_strdup (artist), _g_free0 (item.song->artist), _tmp5_);
-			item.song->album = (_tmp6_ = g_strdup (album), _g_free0 (item.song->album), _tmp6_);
-			item.type = GMPC_METADATA_BROWSER_HITEM_TYPE_ALBUM;
-			gmpc_metadata_browser_history_add (self, &item);
-			gmpc_metadata_browser_metadata_box_show_album (self, artist, album);
-			gmpc_metadata_browser_hitem_destroy (&item);
-		} else {
-			if (artist != NULL) {
-				GmpcMetadataBrowserHitem _tmp7_ = {0};
-				GmpcMetadataBrowserHitem item;
-				mpd_Song* _tmp8_;
-				char* _tmp9_;
-				item = (memset (&_tmp7_, 0, sizeof (GmpcMetadataBrowserHitem)), _tmp7_);
-				item.song = (_tmp8_ = mpd_newSong (), _mpd_freeSong0 (item.song), _tmp8_);
-				item.song->artist = (_tmp9_ = g_strdup (artist), _g_free0 (item.song->artist), _tmp9_);
-				item.type = GMPC_METADATA_BROWSER_HITEM_TYPE_ARTIST;
-				gmpc_metadata_browser_history_add (self, &item);
-				gmpc_metadata_browser_metadata_box_show_artist (self, artist);
-				gmpc_metadata_browser_hitem_destroy (&item);
-			}
-		}
-	}
-	self->priv->update_timeout = (guint) 0;
-	result = FALSE;
-	_g_free0 (artist);
-	_g_free0 (album);
-	_mpd_freeSong0 (song);
-	return result;
-}
-
-
-static void gmpc_metadata_browser_real_browser_add (GmpcPluginBrowserIface* base, GtkWidget* category_tree) {
-	GmpcMetadataBrowser * self;
-	GtkTreeView* tree;
-	GtkListStore* store;
-	GtkTreeModel* model;
-	GtkTreeIter iter = {0};
-	GtkTreeRowReference* _tmp1_;
-	GtkTreePath* _tmp0_;
-	self = (GmpcMetadataBrowser*) base;
-	g_return_if_fail (category_tree != NULL);
-	tree = _g_object_ref0 (GTK_TREE_VIEW (category_tree));
-	store = _g_object_ref0 (GTK_LIST_STORE (gtk_tree_view_get_model (tree)));
-	model = _g_object_ref0 (gtk_tree_view_get_model (tree));
-	playlist3_insert_browser (&iter, cfg_get_single_value_as_int_with_default (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "position", 100));
-	gtk_list_store_set (store, &iter, 0, ((GmpcPluginBase*) self)->id, 1, _ (gmpc_plugin_base_get_name ((GmpcPluginBase*) self)), 3, "gmpc-metabrowser", -1);
-	self->priv->rref = (_tmp1_ = gtk_tree_row_reference_new (model, _tmp0_ = gtk_tree_model_get_path (model, &iter)), _gtk_tree_row_reference_free0 (self->priv->rref), _tmp1_);
-	_gtk_tree_path_free0 (_tmp0_);
-	_g_object_unref0 (tree);
-	_g_object_unref0 (store);
-	_g_object_unref0 (model);
-}
-
-
-static void gmpc_metadata_browser_real_browser_selected (GmpcPluginBrowserIface* base, GtkContainer* container) {
-	GmpcMetadataBrowser * self;
-	char* artist;
-	char* _tmp0_;
-	self = (GmpcMetadataBrowser*) base;
-	g_return_if_fail (container != NULL);
-	artist = NULL;
-	self->priv->selected = TRUE;
-	gmpc_metadata_browser_browser_init (self);
-	gtk_container_add (container, (GtkWidget*) self->priv->paned);
-	artist = (_tmp0_ = gmpc_metadata_browser_browser_get_selected_artist (self), _g_free0 (artist), _tmp0_);
-	if (artist == NULL) {
-		gmpc_metadata_browser_metadata_box_clear (self);
-		gmpc_metadata_browser_metadata_box_update (self);
-	}
-	_g_free0 (artist);
-}
-
-
-static void gmpc_metadata_browser_real_browser_unselected (GmpcPluginBrowserIface* base, GtkContainer* container) {
-	GmpcMetadataBrowser * self;
-	self = (GmpcMetadataBrowser*) base;
-	g_return_if_fail (container != NULL);
-	self->priv->selected = FALSE;
-	gtk_container_remove (container, (GtkWidget*) self->priv->paned);
-}
-
-
-static void gmpc_metadata_browser_con_changed (GmpcMetadataBrowser* self, GmpcConnection* conn, MpdObj* server, gint connect) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (conn != NULL);
-	g_return_if_fail (server != NULL);
-	if (self->priv->paned == NULL) {
-		return;
-	}
-	gmpc_metadata_browser_history_clear (self);
-	gmpc_metadata_browser_reload_browsers (self);
-	gmpc_metadata_browser_metadata_box_clear (self);
-	gmpc_metadata_browser_metadata_box_update (self);
-}
-
-
-static void gmpc_metadata_browser_status_changed (GmpcMetadataBrowser* self, GmpcConnection* conn, MpdObj* server, ChangedStatusType what) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (conn != NULL);
-	g_return_if_fail (server != NULL);
-	if (self->priv->paned == NULL) {
-		return;
-	}
-	if ((what & MPD_CST_DATABASE) != 0) {
-		gmpc_metadata_browser_reload_browsers (self);
-		if (self->priv->current != NULL) {
-			gmpc_metadata_browser_show_hitem (self, (GmpcMetadataBrowserHitem*) self->priv->current->data);
-		}
-	}
-}
-
-
-static void gmpc_metadata_browser_show_hitem (GmpcMetadataBrowser* self, GmpcMetadataBrowserHitem* hi) {
-	g_return_if_fail (self != NULL);
-	switch ((*hi).type) {
-		case GMPC_METADATA_BROWSER_HITEM_TYPE_ARTIST:
-		{
-			gmpc_metadata_browser_set_artist (self, (*hi).song->artist);
-			break;
-		}
-		case GMPC_METADATA_BROWSER_HITEM_TYPE_ALBUM:
-		{
-			gmpc_metadata_browser_set_album (self, (*hi).song->artist, (*hi).song->album);
-			break;
-		}
-		case GMPC_METADATA_BROWSER_HITEM_TYPE_SONG:
-		{
-			gmpc_metadata_browser_set_song (self, (*hi).song);
-			break;
-		}
-		default:
-		{
-			gmpc_metadata_browser_metadata_box_clear (self);
-			break;
-		}
-	}
-}
-
-
-static void gmpc_metadata_browser_history_previous (GmpcMetadataBrowser* self) {
-	gboolean _tmp0_ = FALSE;
-	g_return_if_fail (self != NULL);
-	if (self->priv->history == NULL) {
-		_tmp0_ = TRUE;
-	} else {
-		_tmp0_ = self->priv->current == NULL;
-	}
-	if (_tmp0_) {
-		return;
-	}
-	if (self->priv->current->next == NULL) {
-		return;
-	}
-	self->priv->current = self->priv->current->next;
-	if (self->priv->current != NULL) {
-		gmpc_metadata_browser_show_hitem (self, (GmpcMetadataBrowserHitem*) self->priv->current->data);
-	} else {
-		gmpc_metadata_browser_metadata_box_clear (self);
-	}
-}
-
-
-static void gmpc_metadata_browser_history_next (GmpcMetadataBrowser* self) {
-	gboolean _tmp0_ = FALSE;
-	g_return_if_fail (self != NULL);
-	if (self->priv->history == NULL) {
-		_tmp0_ = TRUE;
-	} else {
-		_tmp0_ = self->priv->current == NULL;
-	}
-	if (_tmp0_) {
-		return;
-	}
-	if (self->priv->current->prev == NULL) {
-		return;
-	}
-	self->priv->current = self->priv->current->prev;
-	if (self->priv->current != NULL) {
-		gmpc_metadata_browser_show_hitem (self, (GmpcMetadataBrowserHitem*) self->priv->current->data);
-	} else {
-		gmpc_metadata_browser_metadata_box_clear (self);
-	}
-}
-
-
-static void gmpc_metadata_browser_history_show_list_clicked (GmpcMetadataBrowser* self, GtkMenuItem* item) {
-	GList* a;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	a = (GList*) g_object_get_data ((GObject*) item, "current");
-	if (a != NULL) {
-		self->priv->current = a;
-		gmpc_metadata_browser_show_hitem (self, (GmpcMetadataBrowserHitem*) self->priv->current->data);
-	}
-}
-
-
-static gpointer _gmpc_metadata_browser_hitem_dup0 (gpointer self) {
-	return self ? gmpc_metadata_browser_hitem_dup (self) : NULL;
-}
-
-
-static void _gmpc_metadata_browser_history_show_list_clicked_gtk_menu_item_activate (GtkMenuItem* _sender, gpointer self) {
-	gmpc_metadata_browser_history_show_list_clicked (self, _sender);
-}
-
-
-static void gmpc_metadata_browser_history_show_list (GmpcMetadataBrowser* self) {
-	GtkMenu* menu;
-	GList* iter;
-	g_return_if_fail (self != NULL);
-	menu = g_object_ref_sink ((GtkMenu*) gtk_menu_new ());
-	iter = g_list_last (self->priv->history);
-	while (TRUE) {
-		GmpcMetadataBrowserHitem* i;
-		char* label;
-		GtkCheckMenuItem* item;
-		gboolean _tmp4_ = FALSE;
-		if (!(iter != NULL)) {
-			break;
-		}
-		i = _gmpc_metadata_browser_hitem_dup0 ((GmpcMetadataBrowserHitem*) iter->data);
-		label = g_strdup ("");
-		if ((*i).type == GMPC_METADATA_BROWSER_HITEM_TYPE_ARTIST) {
-			char* _tmp0_;
-			label = (_tmp0_ = g_strdup ((*i).song->artist), _g_free0 (label), _tmp0_);
-		} else {
-			if ((*i).type == GMPC_METADATA_BROWSER_HITEM_TYPE_ALBUM) {
-				char* _tmp1_;
-				label = (_tmp1_ = g_strdup_printf ("%s - %s", (*i).song->artist, (*i).song->album), _g_free0 (label), _tmp1_);
-			} else {
-				if ((*i).type == GMPC_METADATA_BROWSER_HITEM_TYPE_SONG) {
-					if ((*i).song->title != NULL) {
-						char* _tmp2_;
-						label = (_tmp2_ = g_strdup ((*i).song->title), _g_free0 (label), _tmp2_);
-					} else {
-						char* _tmp3_;
-						label = (_tmp3_ = g_strdup (_ ("Unknown")), _g_free0 (label), _tmp3_);
-					}
-				}
-			}
-		}
-		item = g_object_ref_sink ((GtkCheckMenuItem*) gtk_check_menu_item_new_with_label (label));
-		gtk_check_menu_item_set_draw_as_radio (item, TRUE);
-		if (self->priv->current != NULL) {
-			_tmp4_ = self->priv->current == iter;
-		} else {
-			_tmp4_ = FALSE;
-		}
-		if (_tmp4_) {
-			gtk_check_menu_item_set_active (item, TRUE);
-		}
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_metadata_browser_history_show_list_clicked_gtk_menu_item_activate, self, 0);
-		g_object_set_data ((GObject*) item, "current", (void*) iter);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		iter = iter->prev;
-		_gmpc_metadata_browser_hitem_free0 (i);
-		_g_free0 (label);
-		_g_object_unref0 (item);
-	}
-	gtk_widget_show_all ((GtkWidget*) menu);
-	gtk_menu_popup (menu, NULL, NULL, NULL, NULL, (guint) 0, gtk_get_current_event_time ());
-	_g_object_unref0 (menu);
-}
-
-
-static void _gmpc_metadata_browser_history_next_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_metadata_browser_history_next (self);
-}
-
-
-static void _gmpc_metadata_browser_history_show_list_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_metadata_browser_history_show_list (self);
-}
-
-
-static void _gmpc_metadata_browser_history_previous_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_metadata_browser_history_previous (self);
-}
-
-
-static GtkHBox* gmpc_metadata_browser_history_buttons (GmpcMetadataBrowser* self) {
-	GtkHBox* result;
-	GtkHBox* box;
-	gboolean _tmp0_ = FALSE;
-	GtkButton* next_but;
-	gboolean _tmp1_ = FALSE;
-	gboolean _tmp2_ = FALSE;
-	GtkButton* back_but;
-	gboolean _tmp4_ = FALSE;
-	g_return_val_if_fail (self != NULL, NULL);
-	box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 0));
-	if (self->priv->history == NULL) {
-		_tmp0_ = self->priv->current == NULL;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		result = box;
-		return result;
-	}
-	next_but = g_object_ref_sink ((GtkButton*) gtk_button_new_from_stock ("gtk-go-forward"));
-	if (self->priv->current == NULL) {
-		_tmp1_ = TRUE;
-	} else {
-		_tmp1_ = self->priv->current->prev == NULL;
-	}
-	if (_tmp1_) {
-		gtk_widget_set_sensitive ((GtkWidget*) next_but, FALSE);
-	}
-	g_signal_connect_object (next_but, "clicked", (GCallback) _gmpc_metadata_browser_history_next_gtk_button_clicked, self, 0);
-	gtk_box_pack_end ((GtkBox*) box, (GtkWidget*) next_but, FALSE, FALSE, (guint) 0);
-	if (self->priv->current != NULL) {
-		gboolean _tmp3_ = FALSE;
-		if (self->priv->current->next != NULL) {
-			_tmp3_ = TRUE;
-		} else {
-			_tmp3_ = self->priv->current->prev != NULL;
-		}
-		_tmp2_ = _tmp3_;
-	} else {
-		_tmp2_ = FALSE;
-	}
-	if (_tmp2_) {
-		GtkButton* dd_but;
-		dd_but = g_object_ref_sink ((GtkButton*) gtk_button_new_with_label ("L"));
-		g_signal_connect_object (dd_but, "clicked", (GCallback) _gmpc_metadata_browser_history_show_list_gtk_button_clicked, self, 0);
-		gtk_box_pack_end ((GtkBox*) box, (GtkWidget*) dd_but, FALSE, FALSE, (guint) 0);
-		_g_object_unref0 (dd_but);
-	}
-	back_but = g_object_ref_sink ((GtkButton*) gtk_button_new_from_stock ("gtk-go-back"));
-	if (self->priv->current == NULL) {
-		_tmp4_ = TRUE;
-	} else {
-		_tmp4_ = self->priv->current->next == NULL;
-	}
-	if (_tmp4_) {
-		gtk_widget_set_sensitive ((GtkWidget*) back_but, FALSE);
-	}
-	g_signal_connect_object (back_but, "clicked", (GCallback) _gmpc_metadata_browser_history_previous_gtk_button_clicked, self, 0);
-	gtk_box_pack_end ((GtkBox*) box, (GtkWidget*) back_but, FALSE, FALSE, (guint) 0);
-	result = box;
-	_g_object_unref0 (next_but);
-	_g_object_unref0 (back_but);
-	return result;
-}
-
-
-static void gmpc_metadata_browser_history_add (GmpcMetadataBrowser* self, GmpcMetadataBrowserHitem* hi) {
-	g_return_if_fail (self != NULL);
-	if (self->priv->history != NULL) {
-		GmpcMetadataBrowserHitem a;
-		a = *((GmpcMetadataBrowserHitem*) self->priv->current->data);
-		if (a.type == (*hi).type) {
-			char* _tmp1_;
-			char* _tmp0_;
-			gboolean _tmp2_;
-			if ((_tmp2_ = _vala_strcmp0 (_tmp0_ = mpd_song_checksum (a.song), _tmp1_ = mpd_song_checksum ((*hi).song)) == 0, _g_free0 (_tmp1_), _g_free0 (_tmp0_), _tmp2_)) {
-				return;
-			}
-		}
-	}
-	self->priv->history = g_list_prepend (self->priv->history, _gmpc_metadata_browser_hitem_dup0 (hi));
-	if (g_list_length (self->priv->history) > 25) {
-		GList* a;
-		a = g_list_last (self->priv->history);
-		self->priv->history = g_list_remove (self->priv->history, (GmpcMetadataBrowserHitem*) a->data);
-	}
-	self->priv->current = self->priv->history;
-}
-
-
-static void gmpc_metadata_browser_history_clear (GmpcMetadataBrowser* self) {
-	GList* _tmp0_;
-	g_return_if_fail (self != NULL);
-	self->priv->current = NULL;
-	self->priv->history = (_tmp0_ = NULL, __g_list_free_gmpc_metadata_browser_hitem_free0 (self->priv->history), _tmp0_);
-}
-
-
-void gmpc_metadata_browser_set_artist (GmpcMetadataBrowser* self, const char* artist) {
-	GtkTreeIter iter = {0};
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (artist != NULL);
-	if (!gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		return;
-	}
-	self->priv->block_update++;
-	gtk_tree_selection_unselect_all (gtk_tree_view_get_selection (self->priv->tree_artist));
-	gtk_tree_selection_unselect_all (gtk_tree_view_get_selection (self->priv->tree_album));
-	gtk_entry_set_text (self->priv->artist_filter_entry, "");
-	if (gtk_tree_model_get_iter_first ((GtkTreeModel*) self->priv->model_filter_artist, &iter)) {
-		{
-			gboolean _tmp0_;
-			_tmp0_ = TRUE;
-			while (TRUE) {
-				char* lartist;
-				gboolean _tmp1_ = FALSE;
-				if (!_tmp0_) {
-					if (!gtk_tree_model_iter_next ((GtkTreeModel*) self->priv->model_filter_artist, &iter)) {
-						break;
-					}
-				}
-				_tmp0_ = FALSE;
-				lartist = NULL;
-				gtk_tree_model_get ((GtkTreeModel*) self->priv->model_filter_artist, &iter, 7, &lartist, -1, -1);
-				if (lartist != NULL) {
-					_tmp1_ = g_utf8_collate (lartist, artist) == 0;
-				} else {
-					_tmp1_ = FALSE;
-				}
-				if (_tmp1_) {
-					GtkTreePath* _tmp2_;
-					gtk_tree_selection_select_iter (gtk_tree_view_get_selection (self->priv->tree_artist), &iter);
-					gtk_tree_view_scroll_to_cell (self->priv->tree_artist, _tmp2_ = gtk_tree_model_get_path ((GtkTreeModel*) self->priv->model_filter_artist, &iter), NULL, TRUE, 0.5f, 0.f);
-					_gtk_tree_path_free0 (_tmp2_);
-					self->priv->block_update--;
-					gmpc_metadata_browser_metadata_box_clear (self);
-					gmpc_metadata_browser_metadata_box_update (self);
-					_g_free0 (lartist);
-					return;
-				}
-				_g_free0 (lartist);
-			}
-		}
-	}
-	self->priv->block_update--;
-	gmpc_metadata_browser_metadata_box_clear (self);
-	gmpc_metadata_browser_metadata_box_update (self);
-}
-
-
-void gmpc_metadata_browser_set_album (GmpcMetadataBrowser* self, const char* artist, const char* album) {
-	GtkTreeIter iter = {0};
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (artist != NULL);
-	g_return_if_fail (album != NULL);
-	if (!gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		return;
-	}
-	self->priv->block_update++;
-	gmpc_metadata_browser_set_artist (self, artist);
-	gtk_entry_set_text (self->priv->album_filter_entry, "");
-	if (gtk_tree_model_get_iter_first ((GtkTreeModel*) self->priv->model_filter_album, &iter)) {
-		{
-			gboolean _tmp0_;
-			_tmp0_ = TRUE;
-			while (TRUE) {
-				char* lalbum;
-				gboolean _tmp1_ = FALSE;
-				if (!_tmp0_) {
-					if (!gtk_tree_model_iter_next ((GtkTreeModel*) self->priv->model_filter_album, &iter)) {
-						break;
-					}
-				}
-				_tmp0_ = FALSE;
-				lalbum = NULL;
-				gtk_tree_model_get ((GtkTreeModel*) self->priv->model_filter_album, &iter, 6, &lalbum, -1, -1);
-				if (lalbum != NULL) {
-					_tmp1_ = g_utf8_collate (lalbum, album) == 0;
-				} else {
-					_tmp1_ = FALSE;
-				}
-				if (_tmp1_) {
-					GtkTreePath* _tmp2_;
-					gtk_tree_selection_select_iter (gtk_tree_view_get_selection (self->priv->tree_album), &iter);
-					gtk_tree_view_scroll_to_cell (self->priv->tree_album, _tmp2_ = gtk_tree_model_get_path ((GtkTreeModel*) self->priv->model_filter_album, &iter), NULL, TRUE, 0.5f, 0.f);
-					_gtk_tree_path_free0 (_tmp2_);
-					gtk_tree_selection_unselect_all (gtk_tree_view_get_selection (self->priv->tree_songs));
-					self->priv->block_update--;
-					gmpc_metadata_browser_metadata_box_update (self);
-					_g_free0 (lalbum);
-					return;
-				}
-				_g_free0 (lalbum);
-			}
-		}
-	}
-	gtk_tree_selection_unselect_all (gtk_tree_view_get_selection (self->priv->tree_songs));
-	self->priv->block_update--;
-	gmpc_metadata_browser_metadata_box_clear (self);
-	gmpc_metadata_browser_metadata_box_update (self);
-}
-
-
-void gmpc_metadata_browser_set_song (GmpcMetadataBrowser* self, const mpd_Song* song) {
-	GtkTreeIter iter = {0};
-	GmpcMetadataBrowserHitem _tmp3_ = {0};
-	GmpcMetadataBrowserHitem item;
-	mpd_Song* _tmp4_;
-	GtkWidget* view;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (song != NULL);
-	if (!gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		return;
-	}
-	self->priv->block_update++;
-	if (song->artist != NULL) {
-		gmpc_metadata_browser_set_artist (self, song->artist);
-		if (song->album != NULL) {
-			gmpc_metadata_browser_set_album (self, song->artist, song->album);
-		}
-	}
-	if (gtk_tree_model_get_iter_first ((GtkTreeModel*) self->priv->model_songs, &iter)) {
-		{
-			gboolean _tmp0_;
-			_tmp0_ = TRUE;
-			while (TRUE) {
-				char* ltitle;
-				gboolean _tmp1_ = FALSE;
-				if (!_tmp0_) {
-					if (!gtk_tree_model_iter_next ((GtkTreeModel*) self->priv->model_songs, &iter)) {
-						break;
-					}
-				}
-				_tmp0_ = FALSE;
-				ltitle = NULL;
-				gtk_tree_model_get ((GtkTreeModel*) self->priv->model_songs, &iter, 7, &ltitle, -1, -1);
-				if (ltitle != NULL) {
-					_tmp1_ = g_utf8_collate (ltitle, song->title) == 0;
-				} else {
-					_tmp1_ = FALSE;
-				}
-				if (_tmp1_) {
-					GtkTreePath* _tmp2_;
-					gtk_tree_selection_select_iter (gtk_tree_view_get_selection (self->priv->tree_songs), &iter);
-					gtk_tree_view_scroll_to_cell (self->priv->tree_songs, _tmp2_ = gtk_tree_model_get_path ((GtkTreeModel*) self->priv->model_songs, &iter), NULL, TRUE, 0.5f, 0.f);
-					_gtk_tree_path_free0 (_tmp2_);
-					self->priv->block_update--;
-					gmpc_metadata_browser_metadata_box_update (self);
-					_g_free0 (ltitle);
-					return;
-				}
-				_g_free0 (ltitle);
-			}
-		}
-	}
-	self->priv->block_update--;
-	gmpc_metadata_browser_metadata_box_clear (self);
-	if (self->priv->update_timeout > 0) {
-		g_source_remove (self->priv->update_timeout);
-		self->priv->update_timeout = (guint) 0;
-	}
-	item = (memset (&_tmp3_, 0, sizeof (GmpcMetadataBrowserHitem)), _tmp3_);
-	item.song = (_tmp4_ = _mpd_songDup0 (song), _mpd_freeSong0 (item.song), _tmp4_);
-	item.type = GMPC_METADATA_BROWSER_HITEM_TYPE_SONG;
-	gmpc_metadata_browser_history_add (self, &item);
-	view = gmpc_metadata_browser_metadata_box_show_song (self, song, TRUE);
-	gtk_container_add ((GtkContainer*) self->priv->metadata_box, view);
-	gmpc_metadata_browser_change_color_style (self, (GtkWidget*) self->priv->metadata_sw);
-	gtk_widget_show_all ((GtkWidget*) self->priv->metadata_box);
-	gmpc_metadata_browser_hitem_destroy (&item);
-	_g_object_unref0 (view);
-}
-
-
-void gmpc_metadata_browser_select_browser (GmpcMetadataBrowser* self, GtkTreeView* tree) {
-	g_return_if_fail (self != NULL);
-	if (self->priv->rref != NULL) {
-		GtkTreeView* category_tree;
-		GtkTreeSelection* sel;
-		GtkTreePath* path;
-		category_tree = playlist3_get_category_tree_view ();
-		sel = _g_object_ref0 (gtk_tree_view_get_selection (category_tree));
-		path = gtk_tree_row_reference_get_path (self->priv->rref);
-		if (path != NULL) {
-			gtk_tree_selection_select_path (sel, path);
-		}
-		_g_object_unref0 (sel);
-		_gtk_tree_path_free0 (path);
-	}
-}
-
-
-static void _lambda20_ (GtkToggleButton* source, GmpcMetadataBrowser* self) {
-	g_return_if_fail (source != NULL);
-	cfg_set_single_value_as_int (config, "MetaData", "show-artist-information", (gint) gtk_toggle_button_get_active (source));
-}
-
-
-static void __lambda20__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self) {
-	_lambda20_ (_sender, self);
-}
-
-
-static void _lambda21_ (GtkToggleButton* source, GmpcMetadataBrowser* self) {
-	g_return_if_fail (source != NULL);
-	cfg_set_single_value_as_int (config, "MetaData", "show-album-information", (gint) gtk_toggle_button_get_active (source));
-}
-
-
-static void __lambda21__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self) {
-	_lambda21_ (_sender, self);
-}
-
-
-static void _lambda22_ (GtkToggleButton* source, GmpcMetadataBrowser* self) {
-	g_return_if_fail (source != NULL);
-	cfg_set_single_value_as_int (config, "MetaData", "show-similar-artist", (gint) gtk_toggle_button_get_active (source));
-}
-
-
-static void __lambda22__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self) {
-	_lambda22_ (_sender, self);
-}
-
-
-static void _lambda23_ (GtkToggleButton* source, GmpcMetadataBrowser* self) {
-	g_return_if_fail (source != NULL);
-	cfg_set_single_value_as_int (config, "MetaData", "show-lyrics", (gint) gtk_toggle_button_get_active (source));
-}
-
-
-static void __lambda23__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self) {
-	_lambda23_ (_sender, self);
-}
-
-
-static void _lambda24_ (GtkToggleButton* source, GmpcMetadataBrowser* self) {
-	g_return_if_fail (source != NULL);
-	cfg_set_single_value_as_int (config, "MetaData", "show-guitar-tabs", (gint) gtk_toggle_button_get_active (source));
-}
-
-
-static void __lambda24__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self) {
-	_lambda24_ (_sender, self);
-}
-
-
-static void _lambda25_ (GtkToggleButton* source, GmpcMetadataBrowser* self) {
-	g_return_if_fail (source != NULL);
-	cfg_set_single_value_as_int (config, "MetaData", "show-similar-songs", (gint) gtk_toggle_button_get_active (source));
-}
-
-
-static void __lambda25__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self) {
-	_lambda25_ (_sender, self);
-}
-
-
-static void _lambda26_ (GtkToggleButton* source, GmpcMetadataBrowser* self) {
-	g_return_if_fail (source != NULL);
-	cfg_set_single_value_as_int (config, "MetaData", "show-web-links", (gint) gtk_toggle_button_get_active (source));
-}
-
-
-static void __lambda26__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self) {
-	_lambda26_ (_sender, self);
-}
-
-
-static void gmpc_metadata_browser_real_preferences_pane_construct (GmpcPluginPreferencesIface* base, GtkContainer* container) {
-	GmpcMetadataBrowser * self;
-	GtkVBox* box;
-	GtkLabel* label;
-	GtkCheckButton* chk;
-	GtkCheckButton* _tmp0_;
-	GtkCheckButton* _tmp1_;
-	GtkCheckButton* _tmp2_;
-	GtkCheckButton* _tmp3_;
-	GtkCheckButton* _tmp4_;
-	GtkCheckButton* _tmp5_;
-	self = (GmpcMetadataBrowser*) base;
-	g_return_if_fail (container != NULL);
-	box = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Enable/disable metadata options")));
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-	chk = g_object_ref_sink ((GtkCheckButton*) gtk_check_button_new_with_label (_ ("Artist information")));
-	gtk_toggle_button_set_active ((GtkToggleButton*) chk, cfg_get_single_value_as_int_with_default (config, "MetaData", "show-artist-information", 1) == 1);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) chk, FALSE, FALSE, (guint) 0);
-	g_signal_connect_object ((GtkToggleButton*) chk, "toggled", (GCallback) __lambda20__gtk_toggle_button_toggled, self, 0);
-	chk = (_tmp0_ = g_object_ref_sink ((GtkCheckButton*) gtk_check_button_new_with_label (_ ("Album information"))), _g_object_unref0 (chk), _tmp0_);
-	gtk_toggle_button_set_active ((GtkToggleButton*) chk, cfg_get_single_value_as_int_with_default (config, "MetaData", "show-album-information", 1) == 1);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) chk, FALSE, FALSE, (guint) 0);
-	g_signal_connect_object ((GtkToggleButton*) chk, "toggled", (GCallback) __lambda21__gtk_toggle_button_toggled, self, 0);
-	chk = (_tmp1_ = g_object_ref_sink ((GtkCheckButton*) gtk_check_button_new_with_label (_ ("Similar Artist"))), _g_object_unref0 (chk), _tmp1_);
-	gtk_toggle_button_set_active ((GtkToggleButton*) chk, cfg_get_single_value_as_int_with_default (config, "MetaData", "show-similar-artist", 1) == 1);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) chk, FALSE, FALSE, (guint) 0);
-	g_signal_connect_object ((GtkToggleButton*) chk, "toggled", (GCallback) __lambda22__gtk_toggle_button_toggled, self, 0);
-	chk = (_tmp2_ = g_object_ref_sink ((GtkCheckButton*) gtk_check_button_new_with_label (_ ("Lyrics"))), _g_object_unref0 (chk), _tmp2_);
-	gtk_toggle_button_set_active ((GtkToggleButton*) chk, cfg_get_single_value_as_int_with_default (config, "MetaData", "show-lyrics", 1) == 1);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) chk, FALSE, FALSE, (guint) 0);
-	g_signal_connect_object ((GtkToggleButton*) chk, "toggled", (GCallback) __lambda23__gtk_toggle_button_toggled, self, 0);
-	chk = (_tmp3_ = g_object_ref_sink ((GtkCheckButton*) gtk_check_button_new_with_label (_ ("Guitar Tabs"))), _g_object_unref0 (chk), _tmp3_);
-	gtk_toggle_button_set_active ((GtkToggleButton*) chk, cfg_get_single_value_as_int_with_default (config, "MetaData", "show-guitar-tabs", 1) == 1);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) chk, FALSE, FALSE, (guint) 0);
-	g_signal_connect_object ((GtkToggleButton*) chk, "toggled", (GCallback) __lambda24__gtk_toggle_button_toggled, self, 0);
-	chk = (_tmp4_ = g_object_ref_sink ((GtkCheckButton*) gtk_check_button_new_with_label (_ ("Similar Songs"))), _g_object_unref0 (chk), _tmp4_);
-	gtk_toggle_button_set_active ((GtkToggleButton*) chk, cfg_get_single_value_as_int_with_default (config, "MetaData", "show-similar-songs", 1) == 1);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) chk, FALSE, FALSE, (guint) 0);
-	g_signal_connect_object ((GtkToggleButton*) chk, "toggled", (GCallback) __lambda25__gtk_toggle_button_toggled, self, 0);
-	chk = (_tmp5_ = g_object_ref_sink ((GtkCheckButton*) gtk_check_button_new_with_label (_ ("Web links"))), _g_object_unref0 (chk), _tmp5_);
-	gtk_toggle_button_set_active ((GtkToggleButton*) chk, cfg_get_single_value_as_int_with_default (config, "MetaData", "show-web-links", 1) == 1);
-	gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) chk, FALSE, FALSE, (guint) 0);
-	g_signal_connect_object ((GtkToggleButton*) chk, "toggled", (GCallback) __lambda26__gtk_toggle_button_toggled, self, 0);
-	gtk_container_add (container, (GtkWidget*) box);
-	gtk_widget_show_all ((GtkWidget*) box);
-	_g_object_unref0 (box);
-	_g_object_unref0 (label);
-	_g_object_unref0 (chk);
-}
-
-
-static void gmpc_metadata_browser_real_preferences_pane_destroy (GmpcPluginPreferencesIface* base, GtkContainer* container) {
-	GmpcMetadataBrowser * self;
-	self = (GmpcMetadataBrowser*) base;
-	g_return_if_fail (container != NULL);
-	{
-		GList* child_collection;
-		GList* child_it;
-		child_collection = gtk_container_get_children (container);
-		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
-			GtkWidget* child;
-			child = _g_object_ref0 ((GtkWidget*) child_it->data);
-			{
-				gtk_container_remove (container, child);
-				_g_object_unref0 (child);
-			}
-		}
-		_g_list_free0 (child_collection);
-	}
-}
-
-
-static void gmpc_metadata_browser_change_color_style (GmpcMetadataBrowser* self, GtkWidget* bg) {
-	gboolean _tmp0_ = FALSE;
-	gboolean _tmp1_ = FALSE;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (bg != NULL);
-	g_debug ("gmpc-metadata-browser2.vala:2880: change style");
-	if (GTK_IS_SEPARATOR (bg)) {
-		_tmp1_ = TRUE;
-	} else {
-		_tmp1_ = GTK_IS_NOTEBOOK (bg);
-	}
-	if (_tmp1_) {
-		_tmp0_ = TRUE;
-	} else {
-		_tmp0_ = GTK_IS_CHECK_BUTTON (bg);
-	}
-	if (_tmp0_) {
-	} else {
-		if (self->priv->theme_colors) {
-			GdkColor _tmp2_;
-			gtk_widget_modify_bg (bg, GTK_STATE_NORMAL, (_tmp2_ = gtk_widget_get_style ((GtkWidget*) self->priv->paned)->base[GTK_STATE_NORMAL], &_tmp2_));
-		} else {
-			gtk_widget_modify_bg (bg, GTK_STATE_NORMAL, &self->priv->background);
-			gtk_widget_modify_base (bg, GTK_STATE_NORMAL, &self->priv->background);
-			gtk_widget_modify_text (bg, GTK_STATE_NORMAL, &self->priv->foreground);
-			gtk_widget_modify_fg (bg, GTK_STATE_NORMAL, &self->priv->foreground);
-			gtk_widget_modify_text (bg, GTK_STATE_ACTIVE, &self->priv->foreground);
-			gtk_widget_modify_fg (bg, GTK_STATE_ACTIVE, &self->priv->foreground);
-			gtk_widget_modify_bg (bg, GTK_STATE_INSENSITIVE, &self->priv->background);
-			gtk_widget_modify_base (bg, GTK_STATE_INSENSITIVE, &self->priv->background);
-		}
-	}
-	if (GTK_IS_CONTAINER (bg)) {
-		{
-			GList* child_collection;
-			GList* child_it;
-			child_collection = gtk_container_get_children (GTK_CONTAINER (bg));
-			for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
-				GtkWidget* child;
-				child = _g_object_ref0 ((GtkWidget*) child_it->data);
-				{
-					gmpc_metadata_browser_change_color_style (self, child);
-					_g_object_unref0 (child);
-				}
-			}
-			_g_list_free0 (child_collection);
-		}
-	}
-}
-
-
-static char* string_substring (const char* self, glong offset, glong len) {
-	char* result;
-	glong string_length;
-	const char* start;
-	g_return_val_if_fail (self != NULL, NULL);
-	string_length = g_utf8_strlen (self, -1);
-	if (offset < 0) {
-		offset = string_length + offset;
-		g_return_val_if_fail (offset >= 0, NULL);
-	} else {
-		g_return_val_if_fail (offset <= string_length, NULL);
-	}
-	if (len < 0) {
-		len = string_length - offset;
-	}
-	g_return_val_if_fail ((offset + len) <= string_length, NULL);
-	start = g_utf8_offset_to_pointer (self, offset);
-	result = g_strndup (start, ((gchar*) g_utf8_offset_to_pointer (start, len)) - ((gchar*) start));
-	return result;
-}
-
-
-static char* gmpc_metadata_browser_get_extension (GmpcMetadataBrowser* self, const char* path) {
-	char* result;
-	glong length;
-	glong i;
-	char* retv;
-	g_return_val_if_fail (self != NULL, NULL);
-	g_return_val_if_fail (path != NULL, NULL);
-	length = string_get_length (path);
-	i = length;
-	retv = NULL;
-	{
-		gboolean _tmp0_;
-		_tmp0_ = TRUE;
-		while (TRUE) {
-			gboolean _tmp1_ = FALSE;
-			if (!_tmp0_) {
-				i--;
-			}
-			_tmp0_ = FALSE;
-			if (i > 0) {
-				_tmp1_ = (length - i) < 8;
-			} else {
-				_tmp1_ = FALSE;
-			}
-			if (!_tmp1_) {
-				break;
-			}
-			if (g_utf8_get_char (g_utf8_offset_to_pointer (path, i)) == '.') {
-				char* _tmp2_;
-				retv = (_tmp2_ = string_substring (path, i + 1, -1), _g_free0 (retv), _tmp2_);
-				result = retv;
-				return result;
-			}
-		}
-	}
-	result = retv;
-	return result;
-}
-
-
-GmpcMetadataBrowser* gmpc_metadata_browser_construct (GType object_type) {
-	GmpcMetadataBrowser * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcMetadataBrowser* gmpc_metadata_browser_new (void) {
-	return gmpc_metadata_browser_construct (GMPC_TYPE_METADATA_BROWSER);
-}
-
-
-static void _gmpc_metadata_browser_con_changed_gmpc_connection_connection_changed (GmpcConnection* _sender, MpdObj* mi, gint connect, gpointer self) {
-	gmpc_metadata_browser_con_changed (self, _sender, mi, connect);
-}
-
-
-static void _gmpc_metadata_browser_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self) {
-	gmpc_metadata_browser_status_changed (self, _sender, mi, what);
-}
-
-
-static GObject * gmpc_metadata_browser_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcMetadataBrowser * self;
-	parent_class = G_OBJECT_CLASS (gmpc_metadata_browser_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_METADATA_BROWSER (obj);
-	{
-		char* background;
-		char* foreground;
-		((GmpcPluginBase*) self)->plugin_type = 2 | 8;
-		g_signal_connect_object (gmpcconn, "connection-changed", (GCallback) _gmpc_metadata_browser_con_changed_gmpc_connection_connection_changed, self, 0);
-		g_signal_connect_object (gmpcconn, "status-changed", (GCallback) _gmpc_metadata_browser_status_changed_gmpc_connection_status_changed, self, 0);
-		background = cfg_get_single_value_as_string_with_default (config, "Now Playing", "background-color", "#000");
-		foreground = cfg_get_single_value_as_string_with_default (config, "Now Playing", "foreground-color", "#FFF");
-		gdk_color_parse (background, &self->priv->background);
-		gdk_color_parse (foreground, &self->priv->foreground);
-		_g_free0 (background);
-		_g_free0 (foreground);
-	}
-	return obj;
-}
-
-
-static void gmpc_metadata_browser_hitem_copy (const GmpcMetadataBrowserHitem* self, GmpcMetadataBrowserHitem* dest) {
-	dest->type = self->type;
-	dest->song = _mpd_songDup0 (self->song);
-}
-
-
-static void gmpc_metadata_browser_hitem_destroy (GmpcMetadataBrowserHitem* self) {
-	_mpd_freeSong0 (self->song);
-}
-
-
-static GmpcMetadataBrowserHitem* gmpc_metadata_browser_hitem_dup (const GmpcMetadataBrowserHitem* self) {
-	GmpcMetadataBrowserHitem* dup;
-	dup = g_new0 (GmpcMetadataBrowserHitem, 1);
-	gmpc_metadata_browser_hitem_copy (self, dup);
-	return dup;
-}
-
-
-static void gmpc_metadata_browser_hitem_free (GmpcMetadataBrowserHitem* self) {
-	gmpc_metadata_browser_hitem_destroy (self);
-	g_free (self);
-}
-
-
-static GType gmpc_metadata_browser_hitem_get_type (void) {
-	static GType gmpc_metadata_browser_hitem_type_id = 0;
-	if (gmpc_metadata_browser_hitem_type_id == 0) {
-		gmpc_metadata_browser_hitem_type_id = g_boxed_type_register_static ("GmpcMetadataBrowserHitem", (GBoxedCopyFunc) gmpc_metadata_browser_hitem_dup, (GBoxedFreeFunc) gmpc_metadata_browser_hitem_free);
-	}
-	return gmpc_metadata_browser_hitem_type_id;
-}
-
-
-static void gmpc_metadata_browser_class_init (GmpcMetadataBrowserClass * klass) {
-	gmpc_metadata_browser_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcMetadataBrowserPrivate));
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_version = gmpc_metadata_browser_real_get_version;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_name = gmpc_metadata_browser_real_get_name;
-	GMPC_PLUGIN_BASE_CLASS (klass)->save_yourself = gmpc_metadata_browser_real_save_yourself;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_metadata_browser_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_metadata_browser_finalize;
-}
-
-
-static void gmpc_metadata_browser_gmpc_plugin_browser_iface_interface_init (GmpcPluginBrowserIfaceIface * iface) {
-	gmpc_metadata_browser_gmpc_plugin_browser_iface_parent_iface = g_type_interface_peek_parent (iface);
-	iface->browser_add_go_menu = gmpc_metadata_browser_real_browser_add_go_menu;
-	iface->browser_add = gmpc_metadata_browser_real_browser_add;
-	iface->browser_selected = gmpc_metadata_browser_real_browser_selected;
-	iface->browser_unselected = gmpc_metadata_browser_real_browser_unselected;
-}
-
-
-static void gmpc_metadata_browser_gmpc_plugin_preferences_iface_interface_init (GmpcPluginPreferencesIfaceIface * iface) {
-	gmpc_metadata_browser_gmpc_plugin_preferences_iface_parent_iface = g_type_interface_peek_parent (iface);
-	iface->preferences_pane_construct = gmpc_metadata_browser_real_preferences_pane_construct;
-	iface->preferences_pane_destroy = gmpc_metadata_browser_real_preferences_pane_destroy;
-}
-
-
-static void gmpc_metadata_browser_instance_init (GmpcMetadataBrowser * self) {
-	self->priv = GMPC_METADATA_BROWSER_GET_PRIVATE (self);
-	self->priv->block_update = 0;
-	self->priv->rref = NULL;
-	self->priv->title_color = cfg_get_single_value_as_string_with_default (config, "Now Playing", "title-color", "#4d90dd");
-	self->priv->item_color = cfg_get_single_value_as_string_with_default (config, "Now Playing", "item-color", "#304ab8");
-	self->priv->theme_colors = (gboolean) cfg_get_single_value_as_int_with_default (config, "Now Playing", "use-theme-color", 1);
-	self->priv->paned = NULL;
-	self->priv->browser_box = NULL;
-	self->priv->tree_artist = NULL;
-	self->priv->model_artist = NULL;
-	self->priv->model_filter_artist = NULL;
-	self->priv->artist_filter_entry = NULL;
-	self->priv->tree_album = NULL;
-	self->priv->model_albums = NULL;
-	self->priv->model_filter_album = NULL;
-	self->priv->album_filter_entry = NULL;
-	self->priv->tree_songs = NULL;
-	self->priv->model_songs = NULL;
-	self->priv->metadata_sw = NULL;
-	self->priv->metadata_box = NULL;
-	self->priv->update_timeout = (guint) 0;
-	self->priv->selected = FALSE;
-	self->priv->history = NULL;
-	self->priv->current = NULL;
-}
-
-
-static void gmpc_metadata_browser_finalize (GObject* obj) {
-	GmpcMetadataBrowser * self;
-	self = GMPC_METADATA_BROWSER (obj);
-	_gtk_tree_row_reference_free0 (self->priv->rref);
-	_g_free0 (self->priv->title_color);
-	_g_free0 (self->priv->item_color);
-	_g_object_unref0 (self->priv->paned);
-	_g_object_unref0 (self->priv->browser_box);
-	_g_object_unref0 (self->priv->tree_artist);
-	_g_object_unref0 (self->priv->model_artist);
-	_g_object_unref0 (self->priv->model_filter_artist);
-	_g_object_unref0 (self->priv->artist_filter_entry);
-	_g_object_unref0 (self->priv->tree_album);
-	_g_object_unref0 (self->priv->model_albums);
-	_g_object_unref0 (self->priv->model_filter_album);
-	_g_object_unref0 (self->priv->album_filter_entry);
-	_g_object_unref0 (self->priv->tree_songs);
-	_g_object_unref0 (self->priv->model_songs);
-	_g_object_unref0 (self->priv->metadata_sw);
-	_g_object_unref0 (self->priv->metadata_box);
-	__g_list_free_gmpc_metadata_browser_hitem_free0 (self->priv->history);
-	G_OBJECT_CLASS (gmpc_metadata_browser_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_metadata_browser_get_type (void) {
-	static GType gmpc_metadata_browser_type_id = 0;
-	if (gmpc_metadata_browser_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcMetadataBrowserClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_metadata_browser_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcMetadataBrowser), 0, (GInstanceInitFunc) gmpc_metadata_browser_instance_init, NULL };
-		static const GInterfaceInfo gmpc_plugin_browser_iface_info = { (GInterfaceInitFunc) gmpc_metadata_browser_gmpc_plugin_browser_iface_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
-		static const GInterfaceInfo gmpc_plugin_preferences_iface_info = { (GInterfaceInitFunc) gmpc_metadata_browser_gmpc_plugin_preferences_iface_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
-		gmpc_metadata_browser_type_id = g_type_register_static (GMPC_PLUGIN_TYPE_BASE, "GmpcMetadataBrowser", &g_define_type_info, 0);
-		g_type_add_interface_static (gmpc_metadata_browser_type_id, GMPC_PLUGIN_TYPE_BROWSER_IFACE, &gmpc_plugin_browser_iface_info);
-		g_type_add_interface_static (gmpc_metadata_browser_type_id, GMPC_PLUGIN_TYPE_PREFERENCES_IFACE, &gmpc_plugin_preferences_iface_info);
-	}
-	return gmpc_metadata_browser_type_id;
-}
-
-
-static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func) {
-	if ((array != NULL) && (destroy_func != NULL)) {
-		int i;
-		for (i = 0; i < array_length; i = i + 1) {
-			if (((gpointer*) array)[i] != NULL) {
-				destroy_func (((gpointer*) array)[i]);
-			}
-		}
-	}
-}
-
-
-static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func) {
-	_vala_array_destroy (array, array_length, destroy_func);
-	g_free (array);
-}
-
-
-static gint _vala_array_length (gpointer array) {
-	int length;
-	length = 0;
-	if (array) {
-		while (((gpointer*) array)[length]) {
-			length++;
-		}
-	}
-	return length;
-}
-
-
-static int _vala_strcmp0 (const char * str1, const char * str2) {
-	if (str1 == NULL) {
-		return -(str1 != str2);
-	}
-	if (str2 == NULL) {
-		return str1 != str2;
-	}
-	return strcmp (str1, str2);
-}
-
-
-
-
diff --git a/src/browsers/gmpc-nowplaying2.c b/src/browsers/gmpc-nowplaying2.c
deleted file mode 100644
index fa93d71..0000000
--- a/src/browsers/gmpc-nowplaying2.c
+++ /dev/null
@@ -1,2003 +0,0 @@
-/* gmpc-nowplaying2.c generated by valac, the Vala compiler
- * generated from gmpc-nowplaying2.vala, do not modify */
-
-/* Gnome Music Player Client Multimedia Keys plugin (gmpc-mmkeys)
- * Copyright (C) 2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include "gmpc-extras.h"
-#include <gdk/gdk.h>
-#include <plugin.h>
-#include <config1.h>
-#include <libmpd/libmpd.h>
-#include <glib/gi18n-lib.h>
-#include <libmpd/libmpdclient.h>
-#include <misc.h>
-#include <metadata.h>
-#include <gmpc-metaimage.h>
-#include <pango/pango.h>
-#include <stdio.h>
-#include <gmpc-meta-text-view.h>
-#include <gdk-pixbuf/gdk-pixdata.h>
-#include <main.h>
-
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _gtk_tree_row_reference_free0(var) ((var == NULL) ? NULL : (var = (gtk_tree_row_reference_free (var), NULL)))
-#define _gtk_tree_path_free0(var) ((var == NULL) ? NULL : (var = (gtk_tree_path_free (var), NULL)))
-#define _g_list_free0(var) ((var == NULL) ? NULL : (var = (g_list_free (var), NULL)))
-#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-typedef struct _Block20Data Block20Data;
-typedef struct _Block21Data Block21Data;
-typedef struct _Block22Data Block22Data;
-typedef struct _Block23Data Block23Data;
-typedef struct _Block24Data Block24Data;
-typedef struct _Block25Data Block25Data;
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-#define _mpd_data_free0(var) ((var == NULL) ? NULL : (var = (mpd_data_free (var), NULL)))
-typedef struct _Block26Data Block26Data;
-typedef struct _Block19Data Block19Data;
-#define _gtk_icon_info_free0(var) ((var == NULL) ? NULL : (var = (gtk_icon_info_free (var), NULL)))
-
-struct _GmpcPluginMockupPrivate {
-	gboolean theme_colors;
-	char* title_color;
-	char* item_color;
-	GdkColor background;
-	GdkColor foreground;
-	GtkLabel* bitrate_label;
-	GtkTreeRowReference* np_ref;
-	GtkScrolledWindow* paned;
-	GtkEventBox* container;
-	gboolean selected;
-	char* song_checksum;
-};
-
-struct _Block20Data {
-	int _ref_count_;
-	Block19Data * _data19_;
-	gint j;
-};
-
-struct _Block21Data {
-	int _ref_count_;
-	Block19Data * _data19_;
-	GmpcMetaTextView* text_view;
-	gboolean text_view_queried;
-	gint j;
-};
-
-struct _Block22Data {
-	int _ref_count_;
-	Block19Data * _data19_;
-	gboolean similar_songs_queried;
-	GtkAlignment* similar_songs_box;
-	gint j;
-};
-
-struct _Block23Data {
-	int _ref_count_;
-	Block19Data * _data19_;
-	gint j;
-};
-
-struct _Block24Data {
-	int _ref_count_;
-	Block19Data * _data19_;
-	gint j;
-};
-
-struct _Block25Data {
-	int _ref_count_;
-	Block19Data * _data19_;
-	GmpcMetaTextView* text_view;
-	gboolean text_view_queried;
-	gint j;
-};
-
-struct _Block26Data {
-	int _ref_count_;
-	Block19Data * _data19_;
-	mpd_Song* but_song;
-};
-
-struct _Block19Data {
-	int _ref_count_;
-	GmpcPluginMockup * self;
-	mpd_Song* song;
-	GtkNotebook* notebook;
-};
-
-
-static gpointer gmpc_plugin_mockup_parent_class = NULL;
-static GmpcPluginBrowserIfaceIface* gmpc_plugin_mockup_gmpc_plugin_browser_iface_parent_iface = NULL;
-
-#define use_transition_mb2 TRUE
-#define some_unique_name_mb2 VERSION
-#define GMPC_PLUGIN_MOCKUP_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_PLUGIN_TYPE_MOCKUP, GmpcPluginMockupPrivate))
-enum  {
-	GMPC_PLUGIN_MOCKUP_DUMMY_PROPERTY
-};
-static gint* gmpc_plugin_mockup_real_get_version (GmpcPluginBase* base, int* result_length1);
-static const char* gmpc_plugin_mockup_real_get_name (GmpcPluginBase* base);
-static void gmpc_plugin_mockup_browser_init (GmpcPluginMockup* self);
-static void gmpc_plugin_mockup_real_set_enabled (GmpcPluginBase* base, gboolean state);
-static void gmpc_plugin_mockup_real_save_yourself (GmpcPluginBase* base);
-static void gmpc_plugin_mockup_update (GmpcPluginMockup* self);
-static void gmpc_plugin_mockup_status_changed (GmpcPluginMockup* self, GmpcConnection* conn, MpdObj* server, ChangedStatusType what);
-static void gmpc_plugin_mockup_real_browser_add (GmpcPluginBrowserIface* base, GtkWidget* category_tree);
-static void gmpc_plugin_mockup_real_browser_selected (GmpcPluginBrowserIface* base, GtkContainer* container);
-static void gmpc_plugin_mockup_real_browser_unselected (GmpcPluginBrowserIface* base, GtkContainer* container);
-static void gmpc_plugin_mockup_change_color_style (GmpcPluginMockup* self, GtkWidget* bg);
-static void gmpc_plugin_mockup_browser_bg_style_changed (GmpcPluginMockup* self, GtkContainer* bg, GtkStyle* style);
-static void _gmpc_plugin_mockup_browser_bg_style_changed_gtk_widget_style_set (GtkScrolledWindow* _sender, GtkStyle* previous_style, gpointer self);
-static void gmpc_plugin_mockup_clear (GmpcPluginMockup* self);
-static char* gmpc_plugin_mockup_get_extension (GmpcPluginMockup* self, const char* path);
-static void gmpc_plugin_mockup_update_not_playing (GmpcPluginMockup* self);
-static gboolean _lambda27_ (GtkWidget* widget, GdkEventButton* event, GmpcPluginMockup* self);
-static gboolean __lambda27__gtk_widget_button_press_event (GtkWidget* _sender, GdkEventButton* event, gpointer self);
-static gboolean _lambda28_ (GtkWidget* widget, GdkEventButton* event, GmpcPluginMockup* self);
-static gboolean __lambda28__gtk_widget_button_press_event (GtkWidget* _sender, GdkEventButton* event, gpointer self);
-static void _lambda29_ (GtkButton* source, Block20Data* _data20_);
-static void __lambda29__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block20Data* block20_data_ref (Block20Data* _data20_);
-static void block20_data_unref (Block20Data* _data20_);
-static void _lambda30_ (GtkButton* source, Block21Data* _data21_);
-static void __lambda30__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block21Data* block21_data_ref (Block21Data* _data21_);
-static void block21_data_unref (Block21Data* _data21_);
-static void _lambda31_ (GtkButton* source, Block22Data* _data22_);
-static void __lambda31__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block22Data* block22_data_ref (Block22Data* _data22_);
-static void block22_data_unref (Block22Data* _data22_);
-static void _lambda32_ (GtkButton* source, Block23Data* _data23_);
-static void __lambda32__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block23Data* block23_data_ref (Block23Data* _data23_);
-static void block23_data_unref (Block23Data* _data23_);
-static void _lambda33_ (GtkButton* source, Block24Data* _data24_);
-static void __lambda33__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block24Data* block24_data_ref (Block24Data* _data24_);
-static void block24_data_unref (Block24Data* _data24_);
-static void _lambda34_ (GtkButton* source, Block25Data* _data25_);
-static void __lambda34__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block25Data* block25_data_ref (Block25Data* _data25_);
-static void block25_data_unref (Block25Data* _data25_);
-static void _lambda35_ (GObject* source, GParamSpec* spec, Block19Data* _data19_);
-static void __lambda35__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self);
-static void _lambda36_ (GtkButton* source, Block26Data* _data26_);
-static void __lambda36__gtk_button_clicked (GtkButton* _sender, gpointer self);
-static Block26Data* block26_data_ref (Block26Data* _data26_);
-static void block26_data_unref (Block26Data* _data26_);
-static Block19Data* block19_data_ref (Block19Data* _data19_);
-static void block19_data_unref (Block19Data* _data19_);
-static void gmpc_plugin_mockup_update_playing (GmpcPluginMockup* self);
-static void gmpc_plugin_mockup_select_now_playing_browser (GmpcPluginMockup* self, GtkImageMenuItem* item);
-static void _gmpc_plugin_mockup_select_now_playing_browser_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static gint gmpc_plugin_mockup_real_browser_add_go_menu (GmpcPluginBrowserIface* base, GtkMenu* menu);
-static void _gmpc_plugin_mockup_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self);
-static void _lambda37_ (MpdObj* source, gint connect, GmpcPluginMockup* self);
-static void __lambda37__gmpc_connection_connection_changed (GmpcConnection* _sender, MpdObj* mi, gint connect, gpointer self);
-static GObject * gmpc_plugin_mockup_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_plugin_mockup_finalize (GObject* obj);
-static int _vala_strcmp0 (const char * str1, const char * str2);
-
-
-
-static gint* gmpc_plugin_mockup_real_get_version (GmpcPluginBase* base, int* result_length1) {
-	GmpcPluginMockup * self;
-	gint* result;
-	gint* _tmp0_;
-	self = (GmpcPluginMockup*) base;
-	result = (_tmp0_ = GMPC_PLUGIN_MOCKUP_version, *result_length1 = G_N_ELEMENTS (GMPC_PLUGIN_MOCKUP_version), _tmp0_);
-	return result;
-}
-
-
-static const char* gmpc_plugin_mockup_real_get_name (GmpcPluginBase* base) {
-	GmpcPluginMockup * self;
-	const char* result;
-	self = (GmpcPluginMockup*) base;
-	result = "Now Playing";
-	return result;
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static void gmpc_plugin_mockup_real_set_enabled (GmpcPluginBase* base, gboolean state) {
-	GmpcPluginMockup * self;
-	self = (GmpcPluginMockup*) base;
-	if (state) {
-		if (self->priv->paned == NULL) {
-			gmpc_plugin_browser_iface_browser_add ((GmpcPluginBrowserIface*) self, (GtkWidget*) playlist3_get_category_tree_view ());
-			gmpc_plugin_mockup_browser_init (self);
-		}
-	} else {
-		if (self->priv->np_ref != NULL) {
-			GtkTreePath* path;
-			path = gtk_tree_row_reference_get_path (self->priv->np_ref);
-			if (path != NULL) {
-				gint* _tmp0_;
-				gint indices_size;
-				gint indices_length1;
-				gint* indices;
-				GtkListStore* model;
-				GtkTreeIter iter = {0};
-				indices = (_tmp0_ = gtk_tree_path_get_indices (path), indices_length1 = -1, indices_size = indices_length1, _tmp0_);
-				cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "position", indices[0]);
-				model = _g_object_ref0 (GTK_LIST_STORE (gtk_tree_row_reference_get_model (self->priv->np_ref)));
-				if (gtk_tree_model_get_iter ((GtkTreeModel*) model, &iter, path)) {
-					gtk_list_store_remove (model, &iter);
-				}
-				_g_object_unref0 (model);
-			}
-			_gtk_tree_path_free0 (path);
-		}
-		if (self->priv->paned != NULL) {
-			GtkScrolledWindow* _tmp1_;
-			char* _tmp2_;
-			gtk_object_destroy ((GtkObject*) self->priv->paned);
-			self->priv->paned = (_tmp1_ = NULL, _g_object_unref0 (self->priv->paned), _tmp1_);
-			self->priv->song_checksum = (_tmp2_ = NULL, _g_free0 (self->priv->song_checksum), _tmp2_);
-		}
-	}
-	if (gmpc_plugin_base_get_name ((GmpcPluginBase*) self) != NULL) {
-		cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "enabled", (gint) state);
-	}
-}
-
-
-static void gmpc_plugin_mockup_real_save_yourself (GmpcPluginBase* base) {
-	GmpcPluginMockup * self;
-	self = (GmpcPluginMockup*) base;
-	if (self->priv->np_ref != NULL) {
-		GtkTreePath* path;
-		path = gtk_tree_row_reference_get_path (self->priv->np_ref);
-		if (path != NULL) {
-			gint* _tmp0_;
-			gint indices_size;
-			gint indices_length1;
-			gint* indices;
-			indices = (_tmp0_ = gtk_tree_path_get_indices (path), indices_length1 = -1, indices_size = indices_length1, _tmp0_);
-			cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "position", indices[0]);
-		}
-		_gtk_tree_path_free0 (path);
-	}
-}
-
-
-static void gmpc_plugin_mockup_status_changed (GmpcPluginMockup* self, GmpcConnection* conn, MpdObj* server, ChangedStatusType what) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (conn != NULL);
-	g_return_if_fail (server != NULL);
-	if (!gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		return;
-	}
-	if (!self->priv->selected) {
-		return;
-	}
-	if ((what & MPD_CST_STATE) == MPD_CST_STATE) {
-		gmpc_plugin_mockup_update (self);
-	} else {
-		if ((what & (MPD_CST_SONGID | MPD_CST_PLAYLIST)) > 0) {
-			gmpc_plugin_mockup_update (self);
-		}
-	}
-	if ((what & (MPD_CST_BITRATE | MPD_CST_AUDIOFORMAT)) > 0) {
-		if (self->priv->bitrate_label != NULL) {
-			gint channels;
-			gint bitrate;
-			char* _tmp0_;
-			channels = mpd_status_get_channels (connection);
-			g_debug ("gmpc-nowplaying2.vala:138: bitrate changed");
-			bitrate = mpd_status_get_bitrate (connection);
-			gtk_label_set_markup (self->priv->bitrate_label, _tmp0_ = g_markup_printf_escaped ("<span color='%s' weight='bold'>%s:</span> %i %s, %.1f %s, %i %s", self->priv->item_color, _ ("Format"), channels, ngettext (N_ ("Channel"), N_ ("Channels"), (gulong) channels), mpd_status_get_samplerate (connection) / 1000.0, _ ("kHz"), bitrate, _ ("kbps")));
-			_g_free0 (_tmp0_);
-		}
-	}
-}
-
-
-static void gmpc_plugin_mockup_real_browser_add (GmpcPluginBrowserIface* base, GtkWidget* category_tree) {
-	GmpcPluginMockup * self;
-	GtkTreeView* tree;
-	GtkListStore* store;
-	GtkTreeModel* model;
-	GtkTreeIter iter = {0};
-	GtkTreeRowReference* _tmp1_;
-	GtkTreePath* _tmp0_;
-	self = (GmpcPluginMockup*) base;
-	g_return_if_fail (category_tree != NULL);
-	tree = _g_object_ref0 (GTK_TREE_VIEW (category_tree));
-	store = _g_object_ref0 (GTK_LIST_STORE (gtk_tree_view_get_model (tree)));
-	model = _g_object_ref0 (gtk_tree_view_get_model (tree));
-	playlist3_insert_browser (&iter, cfg_get_single_value_as_int_with_default (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "position", 0));
-	gtk_list_store_set (store, &iter, 0, ((GmpcPluginBase*) self)->id, 1, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), 3, "media-audiofile", -1);
-	self->priv->np_ref = (_tmp1_ = gtk_tree_row_reference_new (model, _tmp0_ = gtk_tree_model_get_path (model, &iter)), _gtk_tree_row_reference_free0 (self->priv->np_ref), _tmp1_);
-	_gtk_tree_path_free0 (_tmp0_);
-	_g_object_unref0 (tree);
-	_g_object_unref0 (store);
-	_g_object_unref0 (model);
-}
-
-
-static void gmpc_plugin_mockup_real_browser_selected (GmpcPluginBrowserIface* base, GtkContainer* container) {
-	GmpcPluginMockup * self;
-	self = (GmpcPluginMockup*) base;
-	g_return_if_fail (container != NULL);
-	self->priv->selected = TRUE;
-	gmpc_plugin_mockup_browser_init (self);
-	gtk_container_add (container, (GtkWidget*) self->priv->paned);
-	gtk_widget_show_all ((GtkWidget*) container);
-	gtk_widget_ensure_style ((GtkWidget*) container);
-	if (self->priv->theme_colors) {
-		char* _tmp1_;
-		GdkColor _tmp0_;
-		char* _tmp3_;
-		GdkColor _tmp2_;
-		self->priv->title_color = (_tmp1_ = gdk_color_to_string ((_tmp0_ = gtk_widget_get_style ((GtkWidget*) self->priv->paned)->text[GTK_STATE_PRELIGHT], &_tmp0_)), _g_free0 (self->priv->title_color), _tmp1_);
-		self->priv->item_color = (_tmp3_ = gdk_color_to_string ((_tmp2_ = gtk_widget_get_style ((GtkWidget*) self->priv->paned)->text[GTK_STATE_PRELIGHT], &_tmp2_)), _g_free0 (self->priv->item_color), _tmp3_);
-	}
-	gmpc_plugin_mockup_update (self);
-}
-
-
-static void gmpc_plugin_mockup_real_browser_unselected (GmpcPluginBrowserIface* base, GtkContainer* container) {
-	GmpcPluginMockup * self;
-	self = (GmpcPluginMockup*) base;
-	g_return_if_fail (container != NULL);
-	self->priv->selected = FALSE;
-	gtk_container_remove (container, (GtkWidget*) self->priv->paned);
-}
-
-
-static void gmpc_plugin_mockup_browser_bg_style_changed (GmpcPluginMockup* self, GtkContainer* bg, GtkStyle* style) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (bg != NULL);
-	g_debug ("gmpc-nowplaying2.vala:200: Change style signal");
-	if (self->priv->theme_colors) {
-		char* _tmp1_;
-		GdkColor _tmp0_;
-		char* _tmp3_;
-		GdkColor _tmp2_;
-		self->priv->title_color = (_tmp1_ = gdk_color_to_string ((_tmp0_ = gtk_widget_get_style ((GtkWidget*) self->priv->paned)->text[GTK_STATE_PRELIGHT], &_tmp0_)), _g_free0 (self->priv->title_color), _tmp1_);
-		self->priv->item_color = (_tmp3_ = gdk_color_to_string ((_tmp2_ = gtk_widget_get_style ((GtkWidget*) self->priv->paned)->text[GTK_STATE_PRELIGHT], &_tmp2_)), _g_free0 (self->priv->item_color), _tmp3_);
-	}
-	gmpc_plugin_mockup_change_color_style (self, (GtkWidget*) self->priv->container);
-}
-
-
-static void gmpc_plugin_mockup_change_color_style (GmpcPluginMockup* self, GtkWidget* bg) {
-	gboolean _tmp0_ = FALSE;
-	gboolean _tmp1_ = FALSE;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (bg != NULL);
-	g_debug ("gmpc-nowplaying2.vala:212: change style");
-	if (GTK_IS_SEPARATOR (bg)) {
-		_tmp1_ = TRUE;
-	} else {
-		_tmp1_ = GTK_IS_NOTEBOOK (bg);
-	}
-	if (_tmp1_) {
-		_tmp0_ = TRUE;
-	} else {
-		_tmp0_ = GTK_IS_CHECK_BUTTON (bg);
-	}
-	if (_tmp0_) {
-	} else {
-		if (self->priv->theme_colors) {
-			GdkColor _tmp2_;
-			gtk_widget_modify_bg (bg, GTK_STATE_NORMAL, (_tmp2_ = gtk_widget_get_style ((GtkWidget*) self->priv->paned)->base[GTK_STATE_NORMAL], &_tmp2_));
-		} else {
-			gtk_widget_modify_bg (bg, GTK_STATE_NORMAL, &self->priv->background);
-			gtk_widget_modify_base (bg, GTK_STATE_NORMAL, &self->priv->background);
-			gtk_widget_modify_text (bg, GTK_STATE_NORMAL, &self->priv->foreground);
-			gtk_widget_modify_fg (bg, GTK_STATE_NORMAL, &self->priv->foreground);
-			gtk_widget_modify_text (bg, GTK_STATE_ACTIVE, &self->priv->foreground);
-			gtk_widget_modify_fg (bg, GTK_STATE_ACTIVE, &self->priv->foreground);
-		}
-	}
-	if (GTK_IS_CONTAINER (bg)) {
-		{
-			GList* child_collection;
-			GList* child_it;
-			child_collection = gtk_container_get_children (GTK_CONTAINER (bg));
-			for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
-				GtkWidget* child;
-				child = _g_object_ref0 ((GtkWidget*) child_it->data);
-				{
-					gmpc_plugin_mockup_change_color_style (self, child);
-					_g_object_unref0 (child);
-				}
-			}
-			_g_list_free0 (child_collection);
-		}
-	}
-}
-
-
-static void _gmpc_plugin_mockup_browser_bg_style_changed_gtk_widget_style_set (GtkScrolledWindow* _sender, GtkStyle* previous_style, gpointer self) {
-	gmpc_plugin_mockup_browser_bg_style_changed (self, _sender, previous_style);
-}
-
-
-static void gmpc_plugin_mockup_browser_init (GmpcPluginMockup* self) {
-	g_return_if_fail (self != NULL);
-	if (self->priv->paned == NULL) {
-		GtkScrolledWindow* _tmp0_;
-		GtkEventBox* _tmp1_;
-		self->priv->paned = (_tmp0_ = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL)), _g_object_unref0 (self->priv->paned), _tmp0_);
-		gtk_scrolled_window_set_policy (self->priv->paned, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-		gtk_scrolled_window_set_shadow_type (self->priv->paned, GTK_SHADOW_NONE);
-		self->priv->container = (_tmp1_ = g_object_ref_sink ((GtkEventBox*) gtk_event_box_new ()), _g_object_unref0 (self->priv->container), _tmp1_);
-		gtk_event_box_set_visible_window (self->priv->container, TRUE);
-		g_signal_connect_object ((GtkWidget*) self->priv->paned, "style-set", (GCallback) _gmpc_plugin_mockup_browser_bg_style_changed_gtk_widget_style_set, self, 0);
-		gtk_scrolled_window_add_with_viewport (self->priv->paned, (GtkWidget*) self->priv->container);
-		g_object_set ((GObject*) gtk_scrolled_window_get_vadjustment (self->priv->paned), "step-increment", 20.0, NULL);
-		gtk_widget_show_all ((GtkWidget*) self->priv->paned);
-	}
-}
-
-
-static void gmpc_plugin_mockup_clear (GmpcPluginMockup* self) {
-	GList* list;
-	GtkLabel* _tmp0_;
-	g_return_if_fail (self != NULL);
-	list = gtk_container_get_children ((GtkContainer*) self->priv->container);
-	{
-		GList* child_collection;
-		GList* child_it;
-		child_collection = list;
-		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
-			GtkWidget* child;
-			child = _g_object_ref0 ((GtkWidget*) child_it->data);
-			{
-				gtk_object_destroy ((GtkObject*) child);
-				_g_object_unref0 (child);
-			}
-		}
-	}
-	self->priv->bitrate_label = (_tmp0_ = NULL, _g_object_unref0 (self->priv->bitrate_label), _tmp0_);
-	_g_list_free0 (list);
-}
-
-
-static glong string_get_length (const char* self) {
-	glong result;
-	g_return_val_if_fail (self != NULL, 0L);
-	result = g_utf8_strlen (self, -1);
-	return result;
-}
-
-
-static char* string_substring (const char* self, glong offset, glong len) {
-	char* result;
-	glong string_length;
-	const char* start;
-	g_return_val_if_fail (self != NULL, NULL);
-	string_length = g_utf8_strlen (self, -1);
-	if (offset < 0) {
-		offset = string_length + offset;
-		g_return_val_if_fail (offset >= 0, NULL);
-	} else {
-		g_return_val_if_fail (offset <= string_length, NULL);
-	}
-	if (len < 0) {
-		len = string_length - offset;
-	}
-	g_return_val_if_fail ((offset + len) <= string_length, NULL);
-	start = g_utf8_offset_to_pointer (self, offset);
-	result = g_strndup (start, ((gchar*) g_utf8_offset_to_pointer (start, len)) - ((gchar*) start));
-	return result;
-}
-
-
-static char* gmpc_plugin_mockup_get_extension (GmpcPluginMockup* self, const char* path) {
-	char* result;
-	glong length;
-	glong i;
-	char* retv;
-	g_return_val_if_fail (self != NULL, NULL);
-	g_return_val_if_fail (path != NULL, NULL);
-	length = string_get_length (path);
-	i = length;
-	retv = NULL;
-	{
-		gboolean _tmp0_;
-		_tmp0_ = TRUE;
-		while (TRUE) {
-			gboolean _tmp1_ = FALSE;
-			if (!_tmp0_) {
-				i--;
-			}
-			_tmp0_ = FALSE;
-			if (i > 0) {
-				_tmp1_ = (length - i) < 8;
-			} else {
-				_tmp1_ = FALSE;
-			}
-			if (!_tmp1_) {
-				break;
-			}
-			if (g_utf8_get_char (g_utf8_offset_to_pointer (path, i)) == '.') {
-				char* _tmp2_;
-				retv = (_tmp2_ = string_substring (path, i + 1, -1), _g_free0 (retv), _tmp2_);
-				result = retv;
-				return result;
-			}
-		}
-	}
-	result = retv;
-	return result;
-}
-
-
-static gpointer _mpd_songDup0 (gpointer self) {
-	return self ? mpd_songDup (self) : NULL;
-}
-
-
-static gboolean _lambda27_ (GtkWidget* widget, GdkEventButton* event, GmpcPluginMockup* self) {
-	gboolean result;
-	char* artist;
-	g_return_val_if_fail (widget != NULL, FALSE);
-	artist = g_strdup ((const char*) g_object_get_data ((GObject*) widget, "artist"));
-	info2_fill_artist_view (artist);
-	result = FALSE;
-	_g_free0 (artist);
-	return result;
-}
-
-
-static gboolean __lambda27__gtk_widget_button_press_event (GtkWidget* _sender, GdkEventButton* event, gpointer self) {
-	return _lambda27_ (_sender, event, self);
-}
-
-
-static gboolean _lambda28_ (GtkWidget* widget, GdkEventButton* event, GmpcPluginMockup* self) {
-	gboolean result;
-	char* artist;
-	char* album;
-	gboolean _tmp0_ = FALSE;
-	g_return_val_if_fail (widget != NULL, FALSE);
-	artist = g_strdup ((const char*) g_object_get_data ((GObject*) widget, "artist"));
-	album = g_strdup ((const char*) g_object_get_data ((GObject*) widget, "album"));
-	if (artist != NULL) {
-		_tmp0_ = album != NULL;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		info2_fill_album_view (artist, album);
-		result = TRUE;
-		_g_free0 (artist);
-		_g_free0 (album);
-		return result;
-	}
-	result = FALSE;
-	_g_free0 (artist);
-	_g_free0 (album);
-	return result;
-}
-
-
-static gboolean __lambda28__gtk_widget_button_press_event (GtkWidget* _sender, GdkEventButton* event, gpointer self) {
-	return _lambda28_ (_sender, event, self);
-}
-
-
-static void _lambda29_ (GtkButton* source, Block20Data* _data20_) {
-	Block19Data* _data19_;
-	GmpcPluginMockup * self;
-	_data19_ = _data20_->_data19_;
-	self = _data19_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-nowplaying2.vala:569: notebook page %i clicked", _data20_->j);
-	gtk_notebook_set_current_page (_data19_->notebook, _data20_->j);
-}
-
-
-static void __lambda29__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda29_ (_sender, self);
-}
-
-
-static Block20Data* block20_data_ref (Block20Data* _data20_) {
-	++_data20_->_ref_count_;
-	return _data20_;
-}
-
-
-static void block20_data_unref (Block20Data* _data20_) {
-	if ((--_data20_->_ref_count_) == 0) {
-		block19_data_unref (_data20_->_data19_);
-		g_slice_free (Block20Data, _data20_);
-	}
-}
-
-
-static void _lambda30_ (GtkButton* source, Block21Data* _data21_) {
-	Block19Data* _data19_;
-	GmpcPluginMockup * self;
-	_data19_ = _data21_->_data19_;
-	self = _data19_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-nowplaying2.vala:595: notebook page %i clicked", _data21_->j);
-	gtk_notebook_set_current_page (_data19_->notebook, _data21_->j);
-	if (!_data21_->text_view_queried) {
-		gmpc_meta_text_view_query_text_from_song (_data21_->text_view, _data19_->song);
-		_data21_->text_view_queried = TRUE;
-		gmpc_plugin_mockup_change_color_style (self, (GtkWidget*) _data21_->text_view);
-	}
-}
-
-
-static void __lambda30__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda30_ (_sender, self);
-}
-
-
-static Block21Data* block21_data_ref (Block21Data* _data21_) {
-	++_data21_->_ref_count_;
-	return _data21_;
-}
-
-
-static void block21_data_unref (Block21Data* _data21_) {
-	if ((--_data21_->_ref_count_) == 0) {
-		block19_data_unref (_data21_->_data19_);
-		_g_object_unref0 (_data21_->text_view);
-		g_slice_free (Block21Data, _data21_);
-	}
-}
-
-
-static void _lambda31_ (GtkButton* source, Block22Data* _data22_) {
-	Block19Data* _data19_;
-	GmpcPluginMockup * self;
-	_data19_ = _data22_->_data19_;
-	self = _data19_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-nowplaying2.vala:626: notebook page %i clicked", _data22_->j);
-	gtk_notebook_set_current_page (_data19_->notebook, _data22_->j);
-	if (!_data22_->similar_songs_queried) {
-		GmpcWidgetSimilarSongs* similar_songs;
-		similar_songs = g_object_ref_sink (gmpc_widget_similar_songs_new (_data19_->song));
-		gmpc_widget_similar_songs_update (similar_songs);
-		_data22_->similar_songs_queried = TRUE;
-		gtk_container_add ((GtkContainer*) _data22_->similar_songs_box, (GtkWidget*) similar_songs);
-		gmpc_plugin_mockup_change_color_style (self, (GtkWidget*) _data22_->similar_songs_box);
-		gtk_widget_show_all ((GtkWidget*) _data22_->similar_songs_box);
-		_g_object_unref0 (similar_songs);
-	}
-}
-
-
-static void __lambda31__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda31_ (_sender, self);
-}
-
-
-static Block22Data* block22_data_ref (Block22Data* _data22_) {
-	++_data22_->_ref_count_;
-	return _data22_;
-}
-
-
-static void block22_data_unref (Block22Data* _data22_) {
-	if ((--_data22_->_ref_count_) == 0) {
-		block19_data_unref (_data22_->_data19_);
-		_g_object_unref0 (_data22_->similar_songs_box);
-		g_slice_free (Block22Data, _data22_);
-	}
-}
-
-
-static void _lambda32_ (GtkButton* source, Block23Data* _data23_) {
-	Block19Data* _data19_;
-	GmpcPluginMockup * self;
-	_data19_ = _data23_->_data19_;
-	self = _data19_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-nowplaying2.vala:660: notebook page %i clicked", _data23_->j);
-	gtk_notebook_set_current_page (_data19_->notebook, _data23_->j);
-}
-
-
-static void __lambda32__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda32_ (_sender, self);
-}
-
-
-static Block23Data* block23_data_ref (Block23Data* _data23_) {
-	++_data23_->_ref_count_;
-	return _data23_;
-}
-
-
-static void block23_data_unref (Block23Data* _data23_) {
-	if ((--_data23_->_ref_count_) == 0) {
-		block19_data_unref (_data23_->_data19_);
-		g_slice_free (Block23Data, _data23_);
-	}
-}
-
-
-static void _lambda33_ (GtkButton* source, Block24Data* _data24_) {
-	Block19Data* _data19_;
-	GmpcPluginMockup * self;
-	_data19_ = _data24_->_data19_;
-	self = _data19_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-nowplaying2.vala:676: notebook page %i clicked", _data24_->j);
-	gtk_notebook_set_current_page (_data19_->notebook, _data24_->j);
-}
-
-
-static void __lambda33__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda33_ (_sender, self);
-}
-
-
-static Block24Data* block24_data_ref (Block24Data* _data24_) {
-	++_data24_->_ref_count_;
-	return _data24_;
-}
-
-
-static void block24_data_unref (Block24Data* _data24_) {
-	if ((--_data24_->_ref_count_) == 0) {
-		block19_data_unref (_data24_->_data19_);
-		g_slice_free (Block24Data, _data24_);
-	}
-}
-
-
-static void _lambda34_ (GtkButton* source, Block25Data* _data25_) {
-	Block19Data* _data19_;
-	GmpcPluginMockup * self;
-	_data19_ = _data25_->_data19_;
-	self = _data19_->self;
-	g_return_if_fail (source != NULL);
-	g_debug ("gmpc-nowplaying2.vala:699: notebook page %i clicked", _data25_->j);
-	gtk_notebook_set_current_page (_data19_->notebook, _data25_->j);
-	if (!_data25_->text_view_queried) {
-		gmpc_meta_text_view_query_text_from_song (_data25_->text_view, _data19_->song);
-		_data25_->text_view_queried = TRUE;
-		gmpc_plugin_mockup_change_color_style (self, (GtkWidget*) _data25_->text_view);
-	}
-}
-
-
-static void __lambda34__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda34_ (_sender, self);
-}
-
-
-static Block25Data* block25_data_ref (Block25Data* _data25_) {
-	++_data25_->_ref_count_;
-	return _data25_;
-}
-
-
-static void block25_data_unref (Block25Data* _data25_) {
-	if ((--_data25_->_ref_count_) == 0) {
-		block19_data_unref (_data25_->_data19_);
-		_g_object_unref0 (_data25_->text_view);
-		g_slice_free (Block25Data, _data25_);
-	}
-}
-
-
-static void _lambda35_ (GObject* source, GParamSpec* spec, Block19Data* _data19_) {
-	GmpcPluginMockup * self;
-	gint page;
-	self = _data19_->self;
-	g_return_if_fail (source != NULL);
-	g_return_if_fail (spec != NULL);
-	page = gtk_notebook_get_current_page (_data19_->notebook);
-	cfg_set_single_value_as_int (config, "NowPlaying", "last-page", (gint) page);
-}
-
-
-static void __lambda35__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self) {
-	_lambda35_ (_sender, pspec, self);
-}
-
-
-static void _lambda36_ (GtkButton* source, Block26Data* _data26_) {
-	Block19Data* _data19_;
-	GmpcPluginMockup * self;
-	_data19_ = _data26_->_data19_;
-	self = _data19_->self;
-	g_return_if_fail (source != NULL);
-	info2_fill_album_view (_data19_->song->artist, _data26_->but_song->album);
-}
-
-
-static void __lambda36__gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	_lambda36_ (_sender, self);
-}
-
-
-static Block26Data* block26_data_ref (Block26Data* _data26_) {
-	++_data26_->_ref_count_;
-	return _data26_;
-}
-
-
-static void block26_data_unref (Block26Data* _data26_) {
-	if ((--_data26_->_ref_count_) == 0) {
-		block19_data_unref (_data26_->_data19_);
-		_mpd_freeSong0 (_data26_->but_song);
-		g_slice_free (Block26Data, _data26_);
-	}
-}
-
-
-static Block19Data* block19_data_ref (Block19Data* _data19_) {
-	++_data19_->_ref_count_;
-	return _data19_;
-}
-
-
-static void block19_data_unref (Block19Data* _data19_) {
-	if ((--_data19_->_ref_count_) == 0) {
-		_g_object_unref0 (_data19_->self);
-		_mpd_freeSong0 (_data19_->song);
-		_g_object_unref0 (_data19_->notebook);
-		g_slice_free (Block19Data, _data19_);
-	}
-}
-
-
-static void gmpc_plugin_mockup_update_playing (GmpcPluginMockup* self) {
-	GError * _inner_error_;
-	Block19Data* _data19_;
-	char* checksum;
-	char* _tmp0_;
-	GtkVBox* vbox;
-	GtkHBox* hbox;
-	GtkAlignment* ali;
-	GmpcMetaImage* album_image;
-	GtkAlignment* _tmp1_;
-	GmpcMetaImage* artist_image;
-	GtkVBox* info_vbox;
-	GtkHSeparator* sep;
-	GtkHBox* hboxje;
-	gint i;
-	GSList* group;
-	gboolean _tmp30_ = FALSE;
-	GtkAlignment* _tmp34_;
-	GtkHBox* bottom_hbox;
-	GtkVBox* metadata_vbox;
-	GtkHSeparator* _tmp35_;
-	gboolean _tmp36_ = FALSE;
-	g_return_if_fail (self != NULL);
-	_inner_error_ = NULL;
-	_data19_ = g_slice_new0 (Block19Data);
-	_data19_->_ref_count_ = 1;
-	_data19_->self = g_object_ref (self);
-	_data19_->song = _mpd_songDup0 (mpd_playlist_get_current_song (connection));
-	if (_data19_->song == NULL) {
-		g_debug ("gmpc-nowplaying2.vala:292: GMPC Is playing, cannot get this");
-		gmpc_plugin_mockup_update_not_playing (self);
-		block19_data_unref (_data19_);
-		return;
-	}
-	checksum = mpd_song_checksum (_data19_->song);
-	if (_vala_strcmp0 (checksum, self->priv->song_checksum) == 0) {
-		_g_free0 (checksum);
-		block19_data_unref (_data19_);
-		return;
-	}
-	gmpc_plugin_mockup_clear (self);
-	self->priv->song_checksum = (_tmp0_ = g_strdup (checksum), _g_free0 (self->priv->song_checksum), _tmp0_);
-	vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	gtk_container_set_border_width ((GtkContainer*) vbox, (guint) 8);
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 0.f, 0.f));
-	album_image = g_object_ref_sink (gmpc_metaimage_new_size (META_ALBUM_ART, 200));
-	gmpc_metaimage_set_scale_up (album_image, TRUE);
-	gmpc_metaimage_set_squared (album_image, FALSE);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) album_image);
-	gmpc_metaimage_update_cover_from_song (album_image, _data19_->song);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	ali = (_tmp1_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (1.f, 0.f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp1_);
-	artist_image = g_object_ref_sink (gmpc_metaimage_new_size (META_ARTIST_ART, 200));
-	gmpc_metaimage_set_scale_up (artist_image, TRUE);
-	gmpc_metaimage_set_squared (artist_image, FALSE);
-	gmpc_metaimage_update_cover_from_song (artist_image, _data19_->song);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) artist_image);
-	gtk_box_pack_end ((GtkBox*) hbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	info_vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	if (_data19_->song->title != NULL) {
-		GtkHBox* box;
-		GmpcFavoritesButton* fav_button;
-		GtkAlignment* _tmp2_;
-		GtkLabel* label;
-		char* _tmp3_;
-		box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-		fav_button = g_object_ref_sink (gmpc_favorites_button_new ());
-		gmpc_favorites_button_set_song (fav_button, _data19_->song);
-		ali = (_tmp2_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.5f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp2_);
-		gtk_container_add ((GtkContainer*) ali, (GtkWidget*) fav_button);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->title));
-		gtk_label_set_selectable (label, TRUE);
-		gtk_label_set_markup (label, _tmp3_ = g_markup_printf_escaped ("<span color='%s' size='%i' weight='bold'>%s</span>", self->priv->title_color, PANGO_SCALE * 20, _data19_->song->title));
-		_g_free0 (_tmp3_);
-		gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-		gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-		if (mpd_sticker_supported (connection)) {
-			GmpcRating* rating_button;
-			GtkAlignment* _tmp4_;
-			rating_button = g_object_ref_sink (gmpc_rating_new (connection, _data19_->song));
-			ali = (_tmp4_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.5f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp4_);
-			gtk_container_add ((GtkContainer*) ali, (GtkWidget*) rating_button);
-			gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-			_g_object_unref0 (rating_button);
-		}
-		_g_object_unref0 (box);
-		_g_object_unref0 (fav_button);
-		_g_object_unref0 (label);
-	} else {
-		if (_data19_->song->name != NULL) {
-			GtkLabel* label;
-			char* _tmp5_;
-			label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->name));
-			gtk_label_set_selectable (label, TRUE);
-			gtk_label_set_markup (label, _tmp5_ = g_markup_printf_escaped ("<span color='%s' size='%i' weight='bold'>%s</span>", self->priv->title_color, PANGO_SCALE * 20, _data19_->song->name));
-			_g_free0 (_tmp5_);
-			gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-			gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-			gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-			_g_object_unref0 (label);
-		} else {
-			if (_data19_->song->file != NULL) {
-				char* filename;
-				GtkLabel* label;
-				char* _tmp10_;
-				filename = g_path_get_basename (_data19_->song->file);
-				label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->name));
-				gtk_label_set_selectable (label, TRUE);
-				{
-					GRegex* regex;
-					char* _tmp6_;
-					char* _tmp7_;
-					regex = g_regex_new ("\\.[0-9a-zA-Z]*$", 0, 0, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						if (_inner_error_->domain == G_REGEX_ERROR) {
-							goto __catch8_g_regex_error;
-						}
-						_g_free0 (filename);
-						_g_object_unref0 (label);
-						_g_free0 (checksum);
-						_g_object_unref0 (vbox);
-						_g_object_unref0 (hbox);
-						_g_object_unref0 (ali);
-						_g_object_unref0 (album_image);
-						_g_object_unref0 (artist_image);
-						_g_object_unref0 (info_vbox);
-						block19_data_unref (_data19_);
-						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return;
-					}
-					_tmp6_ = g_regex_replace_literal (regex, filename, (gssize) (-1), 0, "", 0, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						_g_regex_unref0 (regex);
-						if (_inner_error_->domain == G_REGEX_ERROR) {
-							goto __catch8_g_regex_error;
-						}
-						_g_regex_unref0 (regex);
-						_g_free0 (filename);
-						_g_object_unref0 (label);
-						_g_free0 (checksum);
-						_g_object_unref0 (vbox);
-						_g_object_unref0 (hbox);
-						_g_object_unref0 (ali);
-						_g_object_unref0 (album_image);
-						_g_object_unref0 (artist_image);
-						_g_object_unref0 (info_vbox);
-						block19_data_unref (_data19_);
-						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return;
-					}
-					filename = (_tmp7_ = _tmp6_, _g_free0 (filename), _tmp7_);
-					_g_regex_unref0 (regex);
-				}
-				goto __finally8;
-				__catch8_g_regex_error:
-				{
-					GError * e;
-					e = _inner_error_;
-					_inner_error_ = NULL;
-					{
-						fprintf (stdout, "%s", e->message);
-						g_assert_not_reached ();
-						_g_error_free0 (e);
-					}
-				}
-				__finally8:
-				if (_inner_error_ != NULL) {
-					_g_free0 (filename);
-					_g_object_unref0 (label);
-					_g_free0 (checksum);
-					_g_object_unref0 (vbox);
-					_g_object_unref0 (hbox);
-					_g_object_unref0 (ali);
-					_g_object_unref0 (album_image);
-					_g_object_unref0 (artist_image);
-					_g_object_unref0 (info_vbox);
-					block19_data_unref (_data19_);
-					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-					g_clear_error (&_inner_error_);
-					return;
-				}
-				{
-					GRegex* regex;
-					char* _tmp8_;
-					char* _tmp9_;
-					regex = g_regex_new ("_", 0, 0, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						if (_inner_error_->domain == G_REGEX_ERROR) {
-							goto __catch9_g_regex_error;
-						}
-						_g_free0 (filename);
-						_g_object_unref0 (label);
-						_g_free0 (checksum);
-						_g_object_unref0 (vbox);
-						_g_object_unref0 (hbox);
-						_g_object_unref0 (ali);
-						_g_object_unref0 (album_image);
-						_g_object_unref0 (artist_image);
-						_g_object_unref0 (info_vbox);
-						block19_data_unref (_data19_);
-						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return;
-					}
-					_tmp8_ = g_regex_replace_literal (regex, filename, (gssize) (-1), 0, " ", 0, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						_g_regex_unref0 (regex);
-						if (_inner_error_->domain == G_REGEX_ERROR) {
-							goto __catch9_g_regex_error;
-						}
-						_g_regex_unref0 (regex);
-						_g_free0 (filename);
-						_g_object_unref0 (label);
-						_g_free0 (checksum);
-						_g_object_unref0 (vbox);
-						_g_object_unref0 (hbox);
-						_g_object_unref0 (ali);
-						_g_object_unref0 (album_image);
-						_g_object_unref0 (artist_image);
-						_g_object_unref0 (info_vbox);
-						block19_data_unref (_data19_);
-						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return;
-					}
-					filename = (_tmp9_ = _tmp8_, _g_free0 (filename), _tmp9_);
-					_g_regex_unref0 (regex);
-				}
-				goto __finally9;
-				__catch9_g_regex_error:
-				{
-					GError * e;
-					e = _inner_error_;
-					_inner_error_ = NULL;
-					{
-						fprintf (stdout, "%s", e->message);
-						g_assert_not_reached ();
-						_g_error_free0 (e);
-					}
-				}
-				__finally9:
-				if (_inner_error_ != NULL) {
-					_g_free0 (filename);
-					_g_object_unref0 (label);
-					_g_free0 (checksum);
-					_g_object_unref0 (vbox);
-					_g_object_unref0 (hbox);
-					_g_object_unref0 (ali);
-					_g_object_unref0 (album_image);
-					_g_object_unref0 (artist_image);
-					_g_object_unref0 (info_vbox);
-					block19_data_unref (_data19_);
-					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-					g_clear_error (&_inner_error_);
-					return;
-				}
-				gtk_label_set_markup (label, _tmp10_ = g_markup_printf_escaped ("<span color='%s' size='%i' weight='bold'>%s</span>", self->priv->title_color, PANGO_SCALE * 20, filename));
-				_g_free0 (_tmp10_);
-				gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-				gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-				gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-				_g_free0 (filename);
-				_g_object_unref0 (label);
-			}
-		}
-	}
-	if (_data19_->song->artist != NULL) {
-		GtkEventBox* event;
-		GtkHBox* box;
-		GtkLabel* label;
-		GtkImage* image;
-		char* _tmp11_;
-		event = g_object_ref_sink ((GtkEventBox*) gtk_event_box_new ());
-		box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->artist));
-		gtk_label_set_selectable (label, TRUE);
-		image = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-artist", GTK_ICON_SIZE_MENU));
-		gtk_container_add ((GtkContainer*) event, (GtkWidget*) image);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) event, FALSE, FALSE, (guint) 0);
-		gtk_label_set_markup (label, _tmp11_ = g_markup_printf_escaped ("<span size='xx-large' weight='bold'>%s</span>", _data19_->song->artist));
-		_g_free0 (_tmp11_);
-		gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-		gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-		g_object_set_data_full ((GObject*) event, "artist", (void*) g_strdup_printf ("%s", _data19_->song->artist), (GDestroyNotify) g_free);
-		g_signal_connect_object ((GtkWidget*) event, "button-press-event", (GCallback) __lambda27__gtk_widget_button_press_event, self, 0);
-		_g_object_unref0 (event);
-		_g_object_unref0 (box);
-		_g_object_unref0 (label);
-		_g_object_unref0 (image);
-	}
-	if (_data19_->song->album != NULL) {
-		GtkEventBox* event;
-		GtkHBox* box;
-		GtkLabel* label;
-		GtkImage* image;
-		char* _tmp12_;
-		char* _tmp15_;
-		event = g_object_ref_sink ((GtkEventBox*) gtk_event_box_new ());
-		box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->album));
-		gtk_label_set_selectable (label, TRUE);
-		image = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-album", GTK_ICON_SIZE_MENU));
-		gtk_container_add ((GtkContainer*) event, (GtkWidget*) image);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) event, FALSE, FALSE, (guint) 0);
-		_tmp12_ = NULL;
-		if (_data19_->song->date != NULL) {
-			char* _tmp13_;
-			_tmp12_ = (_tmp13_ = g_strdup_printf ("(%s)", _data19_->song->date), _g_free0 (_tmp12_), _tmp13_);
-		} else {
-			char* _tmp14_;
-			_tmp12_ = (_tmp14_ = g_strdup (""), _g_free0 (_tmp12_), _tmp14_);
-		}
-		gtk_label_set_markup (label, _tmp15_ = g_markup_printf_escaped ("<span size='x-large' weight='bold'>%s %s</span>", _data19_->song->album, _tmp12_));
-		_g_free0 (_tmp15_);
-		gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-		gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-		g_object_set_data_full ((GObject*) event, "artist", (void*) g_strdup_printf ("%s", _data19_->song->artist), (GDestroyNotify) g_free);
-		g_object_set_data_full ((GObject*) event, "album", (void*) g_strdup_printf ("%s", _data19_->song->album), (GDestroyNotify) g_free);
-		g_signal_connect_object ((GtkWidget*) event, "button-press-event", (GCallback) __lambda28__gtk_widget_button_press_event, self, 0);
-		_g_object_unref0 (event);
-		_g_object_unref0 (box);
-		_g_object_unref0 (label);
-		_g_object_unref0 (image);
-		_g_free0 (_tmp12_);
-	}
-	if (_data19_->song->genre != NULL) {
-		GtkHBox* box;
-		GtkLabel* label;
-		GtkImage* image;
-		char* _tmp16_;
-		box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->title));
-		gtk_label_set_selectable (label, TRUE);
-		image = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-genre", GTK_ICON_SIZE_MENU));
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-		gtk_label_set_markup (label, _tmp16_ = g_markup_printf_escaped ("<span color='%s' weight='bold'>%s:</span> %s", self->priv->item_color, _ ("Genre"), _data19_->song->genre));
-		_g_free0 (_tmp16_);
-		gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-		gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-		_g_object_unref0 (box);
-		_g_object_unref0 (label);
-		_g_object_unref0 (image);
-	}
-	{
-		GtkHBox* box;
-		GtkImage* image;
-		GtkLabel* _tmp17_;
-		gint bitrate;
-		gint channels;
-		char* _tmp18_;
-		box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-		image = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-format", GTK_ICON_SIZE_MENU));
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-		self->priv->bitrate_label = (_tmp17_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->title)), _g_object_unref0 (self->priv->bitrate_label), _tmp17_);
-		gtk_label_set_selectable (self->priv->bitrate_label, TRUE);
-		gtk_label_set_ellipsize (self->priv->bitrate_label, PANGO_ELLIPSIZE_END);
-		gtk_misc_set_alignment ((GtkMisc*) self->priv->bitrate_label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) self->priv->bitrate_label, TRUE, TRUE, (guint) 0);
-		bitrate = mpd_status_get_bitrate (connection);
-		channels = mpd_status_get_channels (connection);
-		gtk_label_set_markup (self->priv->bitrate_label, _tmp18_ = g_markup_printf_escaped ("<span color='%s' weight='bold'>%s:</span> %i %s, %.1f %s, %i %s", self->priv->item_color, _ ("Format"), channels, ngettext (N_ ("Channel"), N_ ("Channels"), (gulong) channels), mpd_status_get_samplerate (connection) / 1000.0, _ ("kHz"), bitrate, _ ("kbps")));
-		_g_free0 (_tmp18_);
-		gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-		_g_object_unref0 (box);
-		_g_object_unref0 (image);
-	}
-	if (_data19_->song->file != NULL) {
-		char* extension;
-		char* _tmp19_;
-		extension = NULL;
-		extension = (_tmp19_ = gmpc_plugin_mockup_get_extension (self, _data19_->song->file), _g_free0 (extension), _tmp19_);
-		if (extension != NULL) {
-			GtkHBox* box;
-			GtkImage* image;
-			GtkLabel* label;
-			char* _tmp20_;
-			box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-			image = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-codec", GTK_ICON_SIZE_MENU));
-			gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-			label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->title));
-			gtk_label_set_selectable (label, TRUE);
-			gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-			gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-			gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-			gtk_label_set_markup (label, _tmp20_ = g_markup_printf_escaped ("<span color='%s' weight='bold'>%s:</span> %s", self->priv->item_color, _ ("Codec"), extension));
-			_g_free0 (_tmp20_);
-			gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-			_g_object_unref0 (box);
-			_g_object_unref0 (image);
-			_g_object_unref0 (label);
-		}
-		_g_free0 (extension);
-	}
-	if (_data19_->song->time > 0) {
-		GtkHBox* box;
-		GtkImage* image;
-		GtkLabel* label;
-		char* _tmp22_;
-		char* _tmp21_;
-		box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-		image = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-track-length", GTK_ICON_SIZE_MENU));
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-		gtk_label_set_selectable (label, TRUE);
-		gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-		gtk_label_set_markup (label, _tmp22_ = g_markup_printf_escaped ("<span color='%s' weight='bold'>%s:</span> %s", self->priv->item_color, _ ("Length"), _tmp21_ = format_time_real ((gulong) _data19_->song->time, "")));
-		_g_free0 (_tmp22_);
-		_g_free0 (_tmp21_);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-		gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-		_g_object_unref0 (box);
-		_g_object_unref0 (image);
-		_g_object_unref0 (label);
-	}
-	if (_data19_->song->track != NULL) {
-		GtkHBox* box;
-		GtkImage* image;
-		GtkLabel* label;
-		char* _tmp23_;
-		char* _tmp26_;
-		box = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-		image = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-num-tracks", GTK_ICON_SIZE_MENU));
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-		gtk_label_set_selectable (label, TRUE);
-		gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_END);
-		_tmp23_ = NULL;
-		if (_data19_->song->disc != NULL) {
-			char* _tmp24_;
-			_tmp23_ = (_tmp24_ = g_strdup_printf ("[%s]", _data19_->song->disc), _g_free0 (_tmp23_), _tmp24_);
-		} else {
-			char* _tmp25_;
-			_tmp23_ = (_tmp25_ = g_strdup (""), _g_free0 (_tmp23_), _tmp25_);
-		}
-		gtk_label_set_markup (label, _tmp26_ = g_markup_printf_escaped ("<span color='%s' weight='bold'>%s:</span> %s %s", self->priv->item_color, _ ("Track number"), _data19_->song->track, _tmp23_));
-		_g_free0 (_tmp26_);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-		gtk_box_pack_start ((GtkBox*) info_vbox, (GtkWidget*) box, FALSE, FALSE, (guint) 0);
-		_g_object_unref0 (box);
-		_g_object_unref0 (image);
-		_g_object_unref0 (label);
-		_g_free0 (_tmp23_);
-	}
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) info_vbox, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) hbox, FALSE, FALSE, (guint) 0);
-	sep = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ());
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 4);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) sep, FALSE, FALSE, (guint) 0);
-	hboxje = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	_data19_->notebook = g_object_ref_sink ((GtkNotebook*) gtk_notebook_new ());
-	gtk_notebook_set_show_border (_data19_->notebook, FALSE);
-	gtk_notebook_set_show_tabs (_data19_->notebook, FALSE);
-	i = 0;
-	group = NULL;
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-lyrics", 1) == 1) {
-		Block20Data* _data20_;
-		GtkAlignment* alib;
-		GmpcMetaTextView* text_view;
-		GtkLabel* _tmp27_;
-		GtkRadioButton* button;
-		_data20_ = g_slice_new0 (Block20Data);
-		_data20_->_ref_count_ = 1;
-		_data20_->_data19_ = block19_data_ref (_data19_);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		text_view = g_object_ref_sink (gmpc_meta_text_view_new (META_SONG_TXT));
-		text_view->force_ro = TRUE;
-		gtk_text_view_set_left_margin ((GtkTextView*) text_view, 8);
-		gmpc_meta_text_view_query_text_from_song (text_view, _data19_->song);
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) text_view);
-		gtk_notebook_append_page (_data19_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp27_ = g_object_ref_sink ((GtkLabel*) gtk_label_new ("Lyrics"))));
-		_g_object_unref0 (_tmp27_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, "Lyrics"));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data20_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda29__gtk_button_clicked, block20_data_ref (_data20_), (GClosureNotify) block20_data_unref, 0);
-		i++;
-		gtk_widget_show ((GtkWidget*) alib);
-		_g_object_unref0 (alib);
-		_g_object_unref0 (text_view);
-		_g_object_unref0 (button);
-		block20_data_unref (_data20_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-guitar-tabs", 1) == 1) {
-		Block21Data* _data21_;
-		GtkAlignment* alib;
-		GtkLabel* _tmp28_;
-		GtkRadioButton* button;
-		_data21_ = g_slice_new0 (Block21Data);
-		_data21_->_ref_count_ = 1;
-		_data21_->_data19_ = block19_data_ref (_data19_);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		_data21_->text_view = g_object_ref_sink (gmpc_meta_text_view_new (META_SONG_GUITAR_TAB));
-		_data21_->text_view->force_ro = TRUE;
-		_data21_->text_view->use_monospace = TRUE;
-		gtk_text_view_set_left_margin ((GtkTextView*) _data21_->text_view, 8);
-		_data21_->text_view_queried = FALSE;
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) _data21_->text_view);
-		gtk_notebook_append_page (_data19_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp28_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Guitar Tabs")))));
-		_g_object_unref0 (_tmp28_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Guitar Tabs")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data21_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda30__gtk_button_clicked, block21_data_ref (_data21_), (GClosureNotify) block21_data_unref, 0);
-		if (i == 0) {
-			gmpc_meta_text_view_query_text_from_song (_data21_->text_view, _data19_->song);
-			_data21_->text_view_queried = TRUE;
-		}
-		gtk_widget_show ((GtkWidget*) alib);
-		i++;
-		_g_object_unref0 (alib);
-		_g_object_unref0 (button);
-		block21_data_unref (_data21_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-similar-songs", 1) == 1) {
-		Block22Data* _data22_;
-		GtkLabel* _tmp29_;
-		GtkRadioButton* button;
-		_data22_ = g_slice_new0 (Block22Data);
-		_data22_->_ref_count_ = 1;
-		_data22_->_data19_ = block19_data_ref (_data19_);
-		_data22_->similar_songs_queried = FALSE;
-		_data22_->similar_songs_box = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 0.f, 0.f));
-		gtk_notebook_append_page (_data19_->notebook, (GtkWidget*) _data22_->similar_songs_box, (GtkWidget*) (_tmp29_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Similar Songs")))));
-		_g_object_unref0 (_tmp29_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Similar Songs")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data22_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda31__gtk_button_clicked, block22_data_ref (_data22_), (GClosureNotify) block22_data_unref, 0);
-		if (i == 0) {
-			GmpcWidgetSimilarSongs* similar_songs;
-			similar_songs = g_object_ref_sink (gmpc_widget_similar_songs_new (_data19_->song));
-			gmpc_widget_similar_songs_update (similar_songs);
-			_data22_->similar_songs_queried = TRUE;
-			gtk_container_add ((GtkContainer*) _data22_->similar_songs_box, (GtkWidget*) similar_songs);
-			gtk_widget_show_all ((GtkWidget*) _data22_->similar_songs_box);
-			_g_object_unref0 (similar_songs);
-		}
-		gtk_widget_show ((GtkWidget*) _data22_->similar_songs_box);
-		i++;
-		_g_object_unref0 (button);
-		block22_data_unref (_data22_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-similar-artist", 1) == 1) {
-		_tmp30_ = _data19_->song->artist != NULL;
-	} else {
-		_tmp30_ = FALSE;
-	}
-	if (_tmp30_) {
-		Block23Data* _data23_;
-		GmpcWidgetSimilarArtist* similar_artist;
-		GtkLabel* _tmp31_;
-		GtkRadioButton* button;
-		_data23_ = g_slice_new0 (Block23Data);
-		_data23_->_ref_count_ = 1;
-		_data23_->_data19_ = block19_data_ref (_data19_);
-		similar_artist = g_object_ref_sink (gmpc_widget_similar_artist_new (connection, _data19_->song));
-		gtk_notebook_append_page (_data19_->notebook, (GtkWidget*) similar_artist, (GtkWidget*) (_tmp31_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Similar Artist")))));
-		_g_object_unref0 (_tmp31_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Similar Artist")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data23_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda32__gtk_button_clicked, block23_data_ref (_data23_), (GClosureNotify) block23_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) similar_artist);
-		i++;
-		_g_object_unref0 (similar_artist);
-		_g_object_unref0 (button);
-		block23_data_unref (_data23_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-web-links", 1) == 1) {
-		Block24Data* _data24_;
-		GmpcSongLinks* song_links;
-		GtkLabel* _tmp32_;
-		GtkRadioButton* button;
-		_data24_ = g_slice_new0 (Block24Data);
-		_data24_->_ref_count_ = 1;
-		_data24_->_data19_ = block19_data_ref (_data19_);
-		song_links = g_object_ref_sink (gmpc_song_links_new (GMPC_SONG_LINKS_TYPE_SONG, _data19_->song));
-		gtk_notebook_append_page (_data19_->notebook, (GtkWidget*) song_links, (GtkWidget*) (_tmp32_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Web Links")))));
-		_g_object_unref0 (_tmp32_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Web Links")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data24_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda33__gtk_button_clicked, block24_data_ref (_data24_), (GClosureNotify) block24_data_unref, 0);
-		gtk_widget_show ((GtkWidget*) song_links);
-		i++;
-		_g_object_unref0 (song_links);
-		_g_object_unref0 (button);
-		block24_data_unref (_data24_);
-	}
-	if (cfg_get_single_value_as_int_with_default (config, "MetaData", "show-artist-information", 1) == 1) {
-		Block25Data* _data25_;
-		GtkAlignment* alib;
-		GtkLabel* _tmp33_;
-		GtkRadioButton* button;
-		_data25_ = g_slice_new0 (Block25Data);
-		_data25_->_ref_count_ = 1;
-		_data25_->_data19_ = block19_data_ref (_data19_);
-		alib = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 1.f, 0.f));
-		_data25_->text_view = g_object_ref_sink (gmpc_meta_text_view_new (META_ARTIST_TXT));
-		_data25_->text_view->force_ro = TRUE;
-		_data25_->text_view->use_monospace = FALSE;
-		gtk_text_view_set_left_margin ((GtkTextView*) _data25_->text_view, 8);
-		_data25_->text_view_queried = FALSE;
-		gtk_container_add ((GtkContainer*) alib, (GtkWidget*) _data25_->text_view);
-		gtk_notebook_append_page (_data19_->notebook, (GtkWidget*) alib, (GtkWidget*) (_tmp33_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Artist information")))));
-		_g_object_unref0 (_tmp33_);
-		button = g_object_ref_sink ((GtkRadioButton*) gtk_radio_button_new_with_label (group, _ ("Artist information")));
-		group = gtk_radio_button_get_group (button);
-		gtk_box_pack_start ((GtkBox*) hboxje, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-		_data25_->j = i;
-		g_signal_connect_data ((GtkButton*) button, "clicked", (GCallback) __lambda34__gtk_button_clicked, block25_data_ref (_data25_), (GClosureNotify) block25_data_unref, 0);
-		if (i == 0) {
-			gmpc_meta_text_view_query_text_from_song (_data25_->text_view, _data19_->song);
-			_data25_->text_view_queried = TRUE;
-		}
-		gtk_widget_show ((GtkWidget*) alib);
-		i++;
-		_g_object_unref0 (alib);
-		_g_object_unref0 (button);
-		block25_data_unref (_data25_);
-	}
-	g_signal_connect_data ((GObject*) _data19_->notebook, "notify::page", (GCallback) __lambda35__g_object_notify, block19_data_ref (_data19_), (GClosureNotify) block19_data_unref, 0);
-	if (i > 0) {
-		gint page;
-		page = cfg_get_single_value_as_int_with_default (config, "NowPlaying", "last-page", 0);
-		if (page > i) {
-			gtk_notebook_set_current_page (_data19_->notebook, 0);
-		} else {
-			GtkRadioButton* w;
-			w = _g_object_ref0 ((GtkRadioButton*) g_slist_nth_data (group, (guint) ((i - page) - 1)));
-			gtk_toggle_button_set_active ((GtkToggleButton*) w, TRUE);
-			gtk_notebook_set_current_page (_data19_->notebook, page);
-			_g_object_unref0 (w);
-		}
-	}
-	ali = (_tmp34_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.5f, 0.f, 0.f)), _g_object_unref0 (ali), _tmp34_);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) hboxje);
-	bottom_hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	metadata_vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	sep = (_tmp35_ = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ()), _g_object_unref0 (sep), _tmp35_);
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 1);
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) sep, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) metadata_vbox, (GtkWidget*) _data19_->notebook, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) bottom_hbox, (GtkWidget*) metadata_vbox, TRUE, TRUE, (guint) 0);
-	if (_data19_->song->album != NULL) {
-		_tmp36_ = _data19_->song->artist != NULL;
-	} else {
-		_tmp36_ = FALSE;
-	}
-	if (_tmp36_) {
-		GtkVSeparator* sep2;
-		gint albums;
-		GtkAlignment* _tmp37_;
-		GtkVBox* album_hbox;
-		GtkLabel* label;
-		char* _tmp38_;
-		MpdData* list;
-		MpdData* data;
-		sep2 = g_object_ref_sink ((GtkVSeparator*) gtk_vseparator_new ());
-		gtk_widget_set_size_request ((GtkWidget*) sep2, -1, 4);
-		gtk_box_pack_start ((GtkBox*) bottom_hbox, (GtkWidget*) sep2, FALSE, FALSE, (guint) 0);
-		albums = 0;
-		ali = (_tmp37_ = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.0f, 0.0f, 0.0f)), _g_object_unref0 (ali), _tmp37_);
-		album_hbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-		gtk_widget_set_size_request ((GtkWidget*) album_hbox, 250, -1);
-		gtk_container_add ((GtkContainer*) ali, (GtkWidget*) album_hbox);
-		gtk_box_pack_start ((GtkBox*) bottom_hbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-		label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_data19_->song->artist));
-		gtk_label_set_selectable (label, TRUE);
-		gtk_widget_set_size_request ((GtkWidget*) label, 240, -1);
-		gtk_label_set_markup (label, _tmp38_ = g_markup_printf_escaped ("<span size='x-large' weight='bold' color='%s'>%s</span><span size='x-large' weight='bold'> %s</span>", self->priv->item_color, _ ("Other albums by"), _data19_->song->artist));
-		_g_free0 (_tmp38_);
-		gtk_label_set_line_wrap_mode (label, PANGO_WRAP_WORD_CHAR);
-		gtk_label_set_line_wrap (label, TRUE);
-		gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-		gtk_box_pack_start ((GtkBox*) album_hbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-		mpd_database_search_field_start (connection, MPD_TAG_ITEM_ALBUM);
-		mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, _data19_->song->artist);
-		list = NULL;
-		data = mpd_database_search_commit (connection);
-		if (data != NULL) {
-			const MpdData* iter;
-			iter = mpd_data_get_first (data);
-			{
-				gboolean _tmp39_;
-				_tmp39_ = TRUE;
-				while (TRUE) {
-					mpd_Song* _tmp40_;
-					char* _tmp41_;
-					char* _tmp42_;
-					MpdData* ydata;
-					if (!_tmp39_) {
-						if (!(iter != NULL)) {
-							break;
-						}
-					}
-					_tmp39_ = FALSE;
-					if (_vala_strcmp0 (iter->tag, _data19_->song->album) == 0) {
-						iter = mpd_data_get_next_real (iter, FALSE);
-						continue;
-					}
-					list = mpd_new_data_struct_append (list);
-					list->type = MPD_DATA_TYPE_SONG;
-					list->song = (_tmp40_ = mpd_newSong (), _mpd_freeSong0 (list->song), _tmp40_);
-					list->song->artist = (_tmp41_ = g_strdup (_data19_->song->artist), _g_free0 (list->song->artist), _tmp41_);
-					list->song->album = (_tmp42_ = g_strdup (iter->tag), _g_free0 (list->song->album), _tmp42_);
-					mpd_database_search_field_start (connection, MPD_TAG_ITEM_DATE);
-					mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ARTIST, _data19_->song->artist);
-					mpd_database_search_add_constraint (connection, MPD_TAG_ITEM_ALBUM, iter->tag);
-					ydata = mpd_database_search_commit (connection);
-					if (ydata != NULL) {
-						char* _tmp43_;
-						list->song->date = (_tmp43_ = g_strdup (ydata->tag), _g_free0 (list->song->date), _tmp43_);
-					}
-					iter = mpd_data_get_next_real (iter, FALSE);
-					_mpd_data_free0 (ydata);
-				}
-			}
-		}
-		list = misc_sort_mpddata_by_album_disc_track (list);
-		if (list != NULL) {
-			const MpdData* iter;
-			iter = mpd_data_get_first (list);
-			{
-				gboolean _tmp44_;
-				_tmp44_ = TRUE;
-				while (TRUE) {
-					Block26Data* _data26_;
-					GtkButton* button;
-					GtkHBox* but_hbox;
-					GmpcMetaImage* image;
-					GtkLabel* but_label;
-					char* strlabel;
-					gboolean _tmp45_ = FALSE;
-					char* _tmp50_;
-					_data26_ = g_slice_new0 (Block26Data);
-					_data26_->_ref_count_ = 1;
-					_data26_->_data19_ = block19_data_ref (_data19_);
-					if (!_tmp44_) {
-						if (!(iter != NULL)) {
-							block26_data_unref (_data26_);
-							break;
-						}
-					}
-					_tmp44_ = FALSE;
-					button = g_object_ref_sink ((GtkButton*) gtk_button_new ());
-					gtk_button_set_relief (button, GTK_RELIEF_NONE);
-					but_hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-					gtk_container_add ((GtkContainer*) button, (GtkWidget*) but_hbox);
-					image = g_object_ref_sink (gmpc_metaimage_new_size (META_ALBUM_ART, 48));
-					_data26_->but_song = _mpd_songDup0 (iter->song);
-					gmpc_metaimage_set_squared (image, TRUE);
-					gmpc_metaimage_update_cover_from_song_delayed (image, _data26_->but_song);
-					gtk_box_pack_start ((GtkBox*) but_hbox, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-					but_label = g_object_ref_sink ((GtkLabel*) gtk_label_new (iter->song->album));
-					gtk_label_set_selectable (but_label, TRUE);
-					gtk_misc_set_alignment ((GtkMisc*) but_label, 0.0f, 0.5f);
-					strlabel = g_strdup ("");
-					if (iter->song->date != NULL) {
-						_tmp45_ = string_get_length (iter->song->date) > 0;
-					} else {
-						_tmp45_ = FALSE;
-					}
-					if (_tmp45_) {
-						char* _tmp47_;
-						char* _tmp46_;
-						strlabel = (_tmp47_ = g_strconcat (strlabel, _tmp46_ = g_strdup_printf ("%s\n", iter->song->date), NULL), _g_free0 (strlabel), _tmp47_);
-						_g_free0 (_tmp46_);
-					}
-					if (iter->song->album != NULL) {
-						char* _tmp48_;
-						strlabel = (_tmp48_ = g_strconcat (strlabel, iter->song->album, NULL), _g_free0 (strlabel), _tmp48_);
-					} else {
-						char* _tmp49_;
-						strlabel = (_tmp49_ = g_strconcat (strlabel, _ ("No Album"), NULL), _g_free0 (strlabel), _tmp49_);
-					}
-					gtk_label_set_markup (but_label, _tmp50_ = g_markup_printf_escaped ("<b>%s</b>", strlabel));
-					_g_free0 (_tmp50_);
-					gtk_label_set_ellipsize (but_label, PANGO_ELLIPSIZE_END);
-					gtk_box_pack_start ((GtkBox*) but_hbox, (GtkWidget*) but_label, TRUE, TRUE, (guint) 0);
-					gtk_box_pack_start ((GtkBox*) album_hbox, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-					g_signal_connect_data (button, "clicked", (GCallback) __lambda36__gtk_button_clicked, block26_data_ref (_data26_), (GClosureNotify) block26_data_unref, 0);
-					albums++;
-					iter = mpd_data_get_next_real (iter, FALSE);
-					_g_object_unref0 (button);
-					_g_object_unref0 (but_hbox);
-					_g_object_unref0 (image);
-					_g_object_unref0 (but_label);
-					_g_free0 (strlabel);
-					block26_data_unref (_data26_);
-				}
-			}
-		}
-		if (albums == 0) {
-			gtk_object_destroy ((GtkObject*) album_hbox);
-			gtk_object_destroy ((GtkObject*) sep2);
-		}
-		_g_object_unref0 (sep2);
-		_g_object_unref0 (album_hbox);
-		_g_object_unref0 (label);
-		_mpd_data_free0 (list);
-		_mpd_data_free0 (data);
-	}
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) bottom_hbox, TRUE, TRUE, (guint) 0);
-	gtk_container_add ((GtkContainer*) self->priv->container, (GtkWidget*) vbox);
-	gmpc_plugin_mockup_change_color_style (self, (GtkWidget*) self->priv->container);
-	gtk_widget_show_all ((GtkWidget*) self->priv->container);
-	_g_free0 (checksum);
-	_g_object_unref0 (vbox);
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (ali);
-	_g_object_unref0 (album_image);
-	_g_object_unref0 (artist_image);
-	_g_object_unref0 (info_vbox);
-	_g_object_unref0 (sep);
-	_g_object_unref0 (hboxje);
-	_g_object_unref0 (bottom_hbox);
-	_g_object_unref0 (metadata_vbox);
-	block19_data_unref (_data19_);
-}
-
-
-static void gmpc_plugin_mockup_update_not_playing (GmpcPluginMockup* self) {
-	GError * _inner_error_;
-	char* _tmp0_;
-	GtkIconTheme* it;
-	GtkIconInfo* info;
-	char* path;
-	GtkImage* image;
-	GtkHBox* hbox;
-	GtkLabel* label;
-	char* _tmp3_;
-	GtkAlignment* ali;
-	g_return_if_fail (self != NULL);
-	_inner_error_ = NULL;
-	gmpc_plugin_mockup_clear (self);
-	self->priv->song_checksum = (_tmp0_ = NULL, _g_free0 (self->priv->song_checksum), _tmp0_);
-	it = _g_object_ref0 (gtk_icon_theme_get_default ());
-	info = gtk_icon_theme_lookup_icon (it, "gmpc", 150, 0);
-	path = g_strdup (gtk_icon_info_get_filename (info));
-	image = NULL;
-	if (path != NULL) {
-		{
-			GdkPixbuf* pb;
-			GtkImage* _tmp1_;
-			pb = gdk_pixbuf_new_from_file_at_scale (path, 150, 150, TRUE, &_inner_error_);
-			if (_inner_error_ != NULL) {
-				goto __catch10_g_error;
-			}
-			image = (_tmp1_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_pixbuf (pb)), _g_object_unref0 (image), _tmp1_);
-			_g_object_unref0 (pb);
-		}
-		goto __finally10;
-		__catch10_g_error:
-		{
-			GError * e;
-			e = _inner_error_;
-			_inner_error_ = NULL;
-			{
-				g_warning ("gmpc-nowplaying2.vala:870: Failed to load the gmpc logo: %s", e->message);
-				_g_error_free0 (e);
-				_g_object_unref0 (it);
-				_gtk_icon_info_free0 (info);
-				_g_free0 (path);
-				_g_object_unref0 (image);
-				return;
-			}
-		}
-		__finally10:
-		if (_inner_error_ != NULL) {
-			_g_object_unref0 (it);
-			_gtk_icon_info_free0 (info);
-			_g_free0 (path);
-			_g_object_unref0 (image);
-			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-			g_clear_error (&_inner_error_);
-			return;
-		}
-	}
-	if (image == NULL) {
-		GtkImage* _tmp2_;
-		image = (_tmp2_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("gmpc", GTK_ICON_SIZE_DIALOG)), _g_object_unref0 (image), _tmp2_);
-	}
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Gnome Music Player Client")));
-	gtk_label_set_selectable (label, TRUE);
-	gtk_label_set_markup (label, _tmp3_ = g_strdup_printf ("<span size='%i' weight='bold'>%s</span>", 28 * PANGO_SCALE, _ ("Gnome Music Player Client")));
-	_g_free0 (_tmp3_);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.5f, 0.5f, 0.0f, 0.0f));
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) hbox);
-	gtk_container_add ((GtkContainer*) self->priv->container, (GtkWidget*) ali);
-	gmpc_plugin_mockup_change_color_style (self, (GtkWidget*) self->priv->container);
-	gtk_widget_show_all ((GtkWidget*) self->priv->container);
-	_g_object_unref0 (it);
-	_gtk_icon_info_free0 (info);
-	_g_free0 (path);
-	_g_object_unref0 (image);
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (label);
-	_g_object_unref0 (ali);
-}
-
-
-static void gmpc_plugin_mockup_update (GmpcPluginMockup* self) {
-	g_return_if_fail (self != NULL);
-	switch (mpd_player_get_state (connection)) {
-		case MPD_STATUS_STATE_PLAY:
-		case MPD_STATUS_STATE_PAUSE:
-		{
-			g_debug ("gmpc-nowplaying2.vala:902: Update playing");
-			gmpc_plugin_mockup_update_playing (self);
-			break;
-		}
-		default:
-		{
-			g_debug ("gmpc-nowplaying2.vala:906: update not playing");
-			gmpc_plugin_mockup_update_not_playing (self);
-			break;
-		}
-	}
-}
-
-
-static void gmpc_plugin_mockup_select_now_playing_browser (GmpcPluginMockup* self, GtkImageMenuItem* item) {
-	GtkTreeView* tree;
-	GtkTreeSelection* sel;
-	GtkTreePath* path;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	tree = playlist3_get_category_tree_view ();
-	sel = _g_object_ref0 (gtk_tree_view_get_selection (tree));
-	path = gtk_tree_row_reference_get_path (self->priv->np_ref);
-	if (path != NULL) {
-		gtk_tree_selection_select_path (sel, path);
-	}
-	_g_object_unref0 (sel);
-	_gtk_tree_path_free0 (path);
-}
-
-
-static void _gmpc_plugin_mockup_select_now_playing_browser_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_plugin_mockup_select_now_playing_browser (self, _sender);
-}
-
-
-static gint gmpc_plugin_mockup_real_browser_add_go_menu (GmpcPluginBrowserIface* base, GtkMenu* menu) {
-	GmpcPluginMockup * self;
-	gint result;
-	self = (GmpcPluginMockup*) base;
-	g_return_val_if_fail (menu != NULL, 0);
-	if (gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		GtkImageMenuItem* item;
-		GtkImage* _tmp0_;
-		item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_mnemonic (_ ("Now Playing")));
-		gtk_image_menu_item_set_image (item, (GtkWidget*) (_tmp0_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-audiofile", GTK_ICON_SIZE_MENU))));
-		_g_object_unref0 (_tmp0_);
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_plugin_mockup_select_now_playing_browser_gtk_menu_item_activate, self, 0);
-		gtk_widget_add_accelerator ((GtkWidget*) item, "activate", gtk_menu_get_accel_group (menu), (guint) 0x069, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		result = 1;
-		_g_object_unref0 (item);
-		return result;
-	}
-	result = 0;
-	return result;
-}
-
-
-GmpcPluginMockup* gmpc_plugin_mockup_construct (GType object_type) {
-	GmpcPluginMockup * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcPluginMockup* gmpc_plugin_mockup_new (void) {
-	return gmpc_plugin_mockup_construct (GMPC_PLUGIN_TYPE_MOCKUP);
-}
-
-
-static void _gmpc_plugin_mockup_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self) {
-	gmpc_plugin_mockup_status_changed (self, _sender, mi, what);
-}
-
-
-static void _lambda37_ (MpdObj* source, gint connect, GmpcPluginMockup* self) {
-	gboolean _tmp0_ = FALSE;
-	g_return_if_fail (source != NULL);
-	if (connect == 0) {
-		_tmp0_ = self->priv->paned != NULL;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		gmpc_plugin_mockup_update_not_playing (self);
-	}
-}
-
-
-static void __lambda37__gmpc_connection_connection_changed (GmpcConnection* _sender, MpdObj* mi, gint connect, gpointer self) {
-	_lambda37_ (mi, connect, self);
-}
-
-
-static GObject * gmpc_plugin_mockup_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcPluginMockup * self;
-	parent_class = G_OBJECT_CLASS (gmpc_plugin_mockup_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_PLUGIN_MOCKUP (obj);
-	{
-		char* background;
-		char* foreground;
-		((GmpcPluginBase*) self)->plugin_type = 2 | 8;
-		g_signal_connect_object (gmpcconn, "status-changed", (GCallback) _gmpc_plugin_mockup_status_changed_gmpc_connection_status_changed, self, 0);
-		g_signal_connect_object (gmpcconn, "connection-changed", (GCallback) __lambda37__gmpc_connection_connection_changed, self, 0);
-		background = cfg_get_single_value_as_string_with_default (config, "Now Playing", "background-color", "#000");
-		foreground = cfg_get_single_value_as_string_with_default (config, "Now Playing", "foreground-color", "#FFF");
-		gdk_color_parse (background, &self->priv->background);
-		gdk_color_parse (foreground, &self->priv->foreground);
-		_g_free0 (background);
-		_g_free0 (foreground);
-	}
-	return obj;
-}
-
-
-static void gmpc_plugin_mockup_class_init (GmpcPluginMockupClass * klass) {
-	gmpc_plugin_mockup_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcPluginMockupPrivate));
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_version = gmpc_plugin_mockup_real_get_version;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_name = gmpc_plugin_mockup_real_get_name;
-	GMPC_PLUGIN_BASE_CLASS (klass)->set_enabled = gmpc_plugin_mockup_real_set_enabled;
-	GMPC_PLUGIN_BASE_CLASS (klass)->save_yourself = gmpc_plugin_mockup_real_save_yourself;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_plugin_mockup_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_plugin_mockup_finalize;
-}
-
-
-static void gmpc_plugin_mockup_gmpc_plugin_browser_iface_interface_init (GmpcPluginBrowserIfaceIface * iface) {
-	gmpc_plugin_mockup_gmpc_plugin_browser_iface_parent_iface = g_type_interface_peek_parent (iface);
-	iface->browser_add = gmpc_plugin_mockup_real_browser_add;
-	iface->browser_selected = gmpc_plugin_mockup_real_browser_selected;
-	iface->browser_unselected = gmpc_plugin_mockup_real_browser_unselected;
-	iface->browser_add_go_menu = gmpc_plugin_mockup_real_browser_add_go_menu;
-}
-
-
-static void gmpc_plugin_mockup_instance_init (GmpcPluginMockup * self) {
-	self->priv = GMPC_PLUGIN_MOCKUP_GET_PRIVATE (self);
-	self->priv->theme_colors = (gboolean) cfg_get_single_value_as_int_with_default (config, "Now Playing", "use-theme-color", 1);
-	self->priv->title_color = cfg_get_single_value_as_string_with_default (config, "Now Playing", "title-color", "#4d90dd");
-	self->priv->item_color = cfg_get_single_value_as_string_with_default (config, "Now Playing", "item-color", "#304ab8");
-	self->priv->bitrate_label = NULL;
-	self->priv->np_ref = NULL;
-	self->priv->paned = NULL;
-	self->priv->container = NULL;
-	self->priv->selected = FALSE;
-	self->priv->song_checksum = NULL;
-}
-
-
-static void gmpc_plugin_mockup_finalize (GObject* obj) {
-	GmpcPluginMockup * self;
-	self = GMPC_PLUGIN_MOCKUP (obj);
-	_g_free0 (self->priv->title_color);
-	_g_free0 (self->priv->item_color);
-	_g_object_unref0 (self->priv->bitrate_label);
-	_gtk_tree_row_reference_free0 (self->priv->np_ref);
-	_g_object_unref0 (self->priv->paned);
-	_g_object_unref0 (self->priv->container);
-	_g_free0 (self->priv->song_checksum);
-	G_OBJECT_CLASS (gmpc_plugin_mockup_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_plugin_mockup_get_type (void) {
-	static GType gmpc_plugin_mockup_type_id = 0;
-	if (gmpc_plugin_mockup_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginMockupClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_plugin_mockup_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcPluginMockup), 0, (GInstanceInitFunc) gmpc_plugin_mockup_instance_init, NULL };
-		static const GInterfaceInfo gmpc_plugin_browser_iface_info = { (GInterfaceInitFunc) gmpc_plugin_mockup_gmpc_plugin_browser_iface_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
-		gmpc_plugin_mockup_type_id = g_type_register_static (GMPC_PLUGIN_TYPE_BASE, "GmpcPluginMockup", &g_define_type_info, 0);
-		g_type_add_interface_static (gmpc_plugin_mockup_type_id, GMPC_PLUGIN_TYPE_BROWSER_IFACE, &gmpc_plugin_browser_iface_info);
-	}
-	return gmpc_plugin_mockup_type_id;
-}
-
-
-static int _vala_strcmp0 (const char * str1, const char * str2) {
-	if (str1 == NULL) {
-		return -(str1 != str2);
-	}
-	if (str2 == NULL) {
-		return str1 != str2;
-	}
-	return strcmp (str1, str2);
-}
-
-
-
-
diff --git a/src/vala/gmpc-connection.c b/src/vala/gmpc-connection.c
deleted file mode 100644
index 3121dfd..0000000
--- a/src/vala/gmpc-connection.c
+++ /dev/null
@@ -1,92 +0,0 @@
-/* gmpc-connection.c generated by valac, the Vala compiler
- * generated from gmpc-connection.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include "gmpc-extras.h"
-#include <libmpd/libmpd.h>
-
-
-
-static gpointer gmpc_connection_parent_class = NULL;
-
-enum  {
-	GMPC_CONNECTION_DUMMY_PROPERTY
-};
-
-
-static void g_cclosure_user_marshal_VOID__POINTER_INT (GClosure * closure, GValue * return_value, guint n_param_values, const GValue * param_values, gpointer invocation_hint, gpointer marshal_data);
-
-GmpcConnection* gmpc_connection_construct (GType object_type) {
-	GmpcConnection * self;
-	self = (GmpcConnection*) g_object_new (object_type, NULL);
-	return self;
-}
-
-
-GmpcConnection* gmpc_connection_new (void) {
-	return gmpc_connection_construct (GMPC_TYPE_CONNECTION);
-}
-
-
-static void gmpc_connection_class_init (GmpcConnectionClass * klass) {
-	gmpc_connection_parent_class = g_type_class_peek_parent (klass);
-	g_signal_new ("connection_changed", GMPC_TYPE_CONNECTION, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__POINTER_INT, G_TYPE_NONE, 2, G_TYPE_POINTER, G_TYPE_INT);
-	g_signal_new ("status_changed", GMPC_TYPE_CONNECTION, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__POINTER_INT, G_TYPE_NONE, 2, G_TYPE_POINTER, G_TYPE_INT);
-}
-
-
-static void gmpc_connection_instance_init (GmpcConnection * self) {
-}
-
-
-GType gmpc_connection_get_type (void) {
-	static GType gmpc_connection_type_id = 0;
-	if (gmpc_connection_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcConnectionClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_connection_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcConnection), 0, (GInstanceInitFunc) gmpc_connection_instance_init, NULL };
-		gmpc_connection_type_id = g_type_register_static (G_TYPE_OBJECT, "GmpcConnection", &g_define_type_info, 0);
-	}
-	return gmpc_connection_type_id;
-}
-
-
-
-static void g_cclosure_user_marshal_VOID__POINTER_INT (GClosure * closure, GValue * return_value, guint n_param_values, const GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
-	typedef void (*GMarshalFunc_VOID__POINTER_INT) (gpointer data1, gpointer arg_1, gint arg_2, gpointer data2);
-	register GMarshalFunc_VOID__POINTER_INT callback;
-	register GCClosure * cc;
-	register gpointer data1, data2;
-	cc = (GCClosure *) closure;
-	g_return_if_fail (n_param_values == 3);
-	if (G_CCLOSURE_SWAP_DATA (closure)) {
-		data1 = closure->data;
-		data2 = param_values->data[0].v_pointer;
-	} else {
-		data1 = param_values->data[0].v_pointer;
-		data2 = closure->data;
-	}
-	callback = (GMarshalFunc_VOID__POINTER_INT) (marshal_data ? marshal_data : cc->callback);
-	callback (data1, g_value_get_pointer (param_values + 1), g_value_get_int (param_values + 2), data2);
-}
-
-
-
diff --git a/src/vala/gmpc-database-update-tracker.c b/src/vala/gmpc-database-update-tracker.c
deleted file mode 100644
index 0899233..0000000
--- a/src/vala/gmpc-database-update-tracker.c
+++ /dev/null
@@ -1,286 +0,0 @@
-/* gmpc-database-update-tracker.c generated by valac, the Vala compiler
- * generated from gmpc-database-update-tracker.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include "gmpc-extras.h"
-#include <glib/gi18n-lib.h>
-#include <time.h>
-#include <playlist3-messages.h>
-#include <plugin.h>
-#include <gmpc-profiles.h>
-#include <libmpd/libmpd.h>
-#include <main.h>
-
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-
-struct _GmpcPluginDatabaseUpdateTrackerPrivate {
-	GtkImage* image;
-};
-
-
-static gpointer gmpc_plugin_database_update_tracker_parent_class = NULL;
-
-#define use_transition_mb TRUE
-#define some_unique_name_mb VERSION
-#define GMPC_PLUGIN_DATABASE_UPDATE_TRACKER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_PLUGIN_TYPE_DATABASE_UPDATE_TRACKER, GmpcPluginDatabaseUpdateTrackerPrivate))
-enum  {
-	GMPC_PLUGIN_DATABASE_UPDATE_TRACKER_DUMMY_PROPERTY
-};
-static gint* gmpc_plugin_database_update_tracker_real_get_version (GmpcPluginBase* base, int* result_length1);
-static const char* gmpc_plugin_database_update_tracker_real_get_name (GmpcPluginBase* base);
-static void gmpc_plugin_database_update_tracker_start_updating (GmpcPluginDatabaseUpdateTracker* self);
-static void gmpc_plugin_database_update_tracker_stop_updating (GmpcPluginDatabaseUpdateTracker* self);
-static void gmpc_plugin_database_update_tracker_show_message (GmpcPluginDatabaseUpdateTracker* self, gint db_time);
-static void gmpc_plugin_database_update_tracker_connection_changed (GmpcPluginDatabaseUpdateTracker* self, GmpcConnection* gc, MpdObj* server, gint connection);
-static void gmpc_plugin_database_update_tracker_status_changed (GmpcPluginDatabaseUpdateTracker* self, GmpcConnection* gc, MpdObj* server, ChangedStatusType what);
-static void _gmpc_plugin_database_update_tracker_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self);
-static void _gmpc_plugin_database_update_tracker_connection_changed_gmpc_connection_connection_changed (GmpcConnection* _sender, MpdObj* mi, gint connect, gpointer self);
-static GObject * gmpc_plugin_database_update_tracker_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_plugin_database_update_tracker_finalize (GObject* obj);
-
-
-
-static gint* gmpc_plugin_database_update_tracker_real_get_version (GmpcPluginBase* base, int* result_length1) {
-	GmpcPluginDatabaseUpdateTracker * self;
-	gint* result;
-	gint* _tmp0_;
-	self = (GmpcPluginDatabaseUpdateTracker*) base;
-	result = (_tmp0_ = GMPC_PLUGIN_DATABASE_UPDATE_TRACKER_version, *result_length1 = G_N_ELEMENTS (GMPC_PLUGIN_DATABASE_UPDATE_TRACKER_version), _tmp0_);
-	return result;
-}
-
-
-static const char* gmpc_plugin_database_update_tracker_real_get_name (GmpcPluginBase* base) {
-	GmpcPluginDatabaseUpdateTracker * self;
-	const char* result;
-	self = (GmpcPluginDatabaseUpdateTracker*) base;
-	result = "Database Update Tracker";
-	return result;
-}
-
-
-static void gmpc_plugin_database_update_tracker_start_updating (GmpcPluginDatabaseUpdateTracker* self) {
-	GtkImage* _tmp0_;
-	g_return_if_fail (self != NULL);
-	if (self->priv->image != NULL) {
-		return;
-	}
-	self->priv->image = (_tmp0_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("gtk-refresh", GTK_ICON_SIZE_MENU)), _g_object_unref0 (self->priv->image), _tmp0_);
-	gtk_widget_show ((GtkWidget*) self->priv->image);
-	gtk_widget_set_tooltip_text ((GtkWidget*) self->priv->image, _ ("MPD is rescanning the database"));
-	main_window_add_status_icon ((GtkWidget*) self->priv->image);
-}
-
-
-static void gmpc_plugin_database_update_tracker_stop_updating (GmpcPluginDatabaseUpdateTracker* self) {
-	GtkImage* _tmp0_;
-	g_return_if_fail (self != NULL);
-	if (self->priv->image == NULL) {
-		return;
-	}
-	gtk_container_remove (gtk_widget_get_parent ((GtkWidget*) self->priv->image), (GtkWidget*) self->priv->image);
-	self->priv->image = (_tmp0_ = NULL, _g_object_unref0 (self->priv->image), _tmp0_);
-}
-
-
-static void g_time_local (time_t time, struct tm* result) {
-	struct tm _result_ = {0};
-	localtime_r (&time, &_result_);
-	*result = _result_;
-	return;
-}
-
-
-static char* g_time_format (struct tm *self, const char* format) {
-	char* result;
-	gchar* _tmp0_;
-	gint buffer_size;
-	gint buffer_length1;
-	gchar* buffer;
-	g_return_val_if_fail (format != NULL, NULL);
-	buffer = (_tmp0_ = g_new0 (gchar, 64), buffer_length1 = 64, buffer_size = buffer_length1, _tmp0_);
-	strftime (buffer, buffer_length1, format, &(*self));
-	result = g_strdup ((const char*) buffer);
-	buffer = (g_free (buffer), NULL);
-	return result;
-}
-
-
-static void gmpc_plugin_database_update_tracker_show_message (GmpcPluginDatabaseUpdateTracker* self, gint db_time) {
-	time_t r_time;
-	char* message;
-	struct tm _tmp0_ = {0};
-	struct tm tm;
-	char* _tmp2_;
-	char* _tmp1_;
-	g_return_if_fail (self != NULL);
-	r_time = (time_t) db_time;
-	message = NULL;
-	tm = (g_time_local (r_time, &_tmp0_), _tmp0_);
-	message = (_tmp2_ = g_strdup_printf ("%s %s", _ ("MPD Database has been updated at:"), _tmp1_ = g_time_format (&tm, "%c")), _g_free0 (message), _tmp2_);
-	_g_free0 (_tmp1_);
-	playlist3_show_error_message ((const char*) message, ERROR_INFO);
-	_g_free0 (message);
-}
-
-
-static void gmpc_plugin_database_update_tracker_connection_changed (GmpcPluginDatabaseUpdateTracker* self, GmpcConnection* gc, MpdObj* server, gint connection) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (gc != NULL);
-	g_return_if_fail (server != NULL);
-	if (connection == 1) {
-		char* id;
-		id = gmpc_profiles_get_current (gmpc_profiles);
-		if (id != NULL) {
-			gint dut;
-			gint serv_dut;
-			dut = gmpc_profiles_get_db_update_time (gmpc_profiles, id);
-			serv_dut = mpd_server_get_database_update_time (server);
-			if (dut != serv_dut) {
-				gmpc_plugin_database_update_tracker_show_message (self, serv_dut);
-				gmpc_profiles_set_db_update_time (gmpc_profiles, id, serv_dut);
-			}
-		}
-		if (mpd_status_db_is_updating (server)) {
-			gmpc_plugin_database_update_tracker_start_updating (self);
-		}
-		_g_free0 (id);
-	} else {
-		gmpc_plugin_database_update_tracker_stop_updating (self);
-	}
-}
-
-
-static void gmpc_plugin_database_update_tracker_status_changed (GmpcPluginDatabaseUpdateTracker* self, GmpcConnection* gc, MpdObj* server, ChangedStatusType what) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (gc != NULL);
-	g_return_if_fail (server != NULL);
-	if (!gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		return;
-	}
-	if ((what & MPD_CST_UPDATING) == MPD_CST_UPDATING) {
-		if (mpd_status_db_is_updating (server)) {
-			gmpc_plugin_database_update_tracker_start_updating (self);
-		} else {
-			gmpc_plugin_database_update_tracker_stop_updating (self);
-		}
-	}
-	if ((what & MPD_CST_DATABASE) == MPD_CST_DATABASE) {
-		char* id;
-		id = gmpc_profiles_get_current (gmpc_profiles);
-		if (id != NULL) {
-			gint dut;
-			gint serv_dut;
-			dut = gmpc_profiles_get_db_update_time (gmpc_profiles, id);
-			serv_dut = mpd_server_get_database_update_time (connection);
-			if (dut != serv_dut) {
-				gmpc_plugin_database_update_tracker_show_message (self, serv_dut);
-				gmpc_profiles_set_db_update_time (gmpc_profiles, id, serv_dut);
-			}
-			gmpc_plugin_database_update_tracker_stop_updating (self);
-		}
-		_g_free0 (id);
-	}
-}
-
-
-GmpcPluginDatabaseUpdateTracker* gmpc_plugin_database_update_tracker_construct (GType object_type) {
-	GmpcPluginDatabaseUpdateTracker * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcPluginDatabaseUpdateTracker* gmpc_plugin_database_update_tracker_new (void) {
-	return gmpc_plugin_database_update_tracker_construct (GMPC_PLUGIN_TYPE_DATABASE_UPDATE_TRACKER);
-}
-
-
-static void _gmpc_plugin_database_update_tracker_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self) {
-	gmpc_plugin_database_update_tracker_status_changed (self, _sender, mi, what);
-}
-
-
-static void _gmpc_plugin_database_update_tracker_connection_changed_gmpc_connection_connection_changed (GmpcConnection* _sender, MpdObj* mi, gint connect, gpointer self) {
-	gmpc_plugin_database_update_tracker_connection_changed (self, _sender, mi, connect);
-}
-
-
-static GObject * gmpc_plugin_database_update_tracker_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcPluginDatabaseUpdateTracker * self;
-	parent_class = G_OBJECT_CLASS (gmpc_plugin_database_update_tracker_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_PLUGIN_DATABASE_UPDATE_TRACKER (obj);
-	{
-		((GmpcPluginBase*) self)->plugin_type = 8 + 4;
-		g_signal_connect_object (gmpcconn, "status-changed", (GCallback) _gmpc_plugin_database_update_tracker_status_changed_gmpc_connection_status_changed, self, 0);
-		g_signal_connect_object (gmpcconn, "connection-changed", (GCallback) _gmpc_plugin_database_update_tracker_connection_changed_gmpc_connection_connection_changed, self, 0);
-	}
-	return obj;
-}
-
-
-static void gmpc_plugin_database_update_tracker_class_init (GmpcPluginDatabaseUpdateTrackerClass * klass) {
-	gmpc_plugin_database_update_tracker_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcPluginDatabaseUpdateTrackerPrivate));
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_version = gmpc_plugin_database_update_tracker_real_get_version;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_name = gmpc_plugin_database_update_tracker_real_get_name;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_plugin_database_update_tracker_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_plugin_database_update_tracker_finalize;
-}
-
-
-static void gmpc_plugin_database_update_tracker_instance_init (GmpcPluginDatabaseUpdateTracker * self) {
-	self->priv = GMPC_PLUGIN_DATABASE_UPDATE_TRACKER_GET_PRIVATE (self);
-	self->priv->image = NULL;
-}
-
-
-static void gmpc_plugin_database_update_tracker_finalize (GObject* obj) {
-	GmpcPluginDatabaseUpdateTracker * self;
-	self = GMPC_PLUGIN_DATABASE_UPDATE_TRACKER (obj);
-	_g_object_unref0 (self->priv->image);
-	G_OBJECT_CLASS (gmpc_plugin_database_update_tracker_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_plugin_database_update_tracker_get_type (void) {
-	static GType gmpc_plugin_database_update_tracker_type_id = 0;
-	if (gmpc_plugin_database_update_tracker_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginDatabaseUpdateTrackerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_plugin_database_update_tracker_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcPluginDatabaseUpdateTracker), 0, (GInstanceInitFunc) gmpc_plugin_database_update_tracker_instance_init, NULL };
-		gmpc_plugin_database_update_tracker_type_id = g_type_register_static (GMPC_PLUGIN_TYPE_BASE, "GmpcPluginDatabaseUpdateTracker", &g_define_type_info, 0);
-	}
-	return gmpc_plugin_database_update_tracker_type_id;
-}
-
-
-
-
diff --git a/src/vala/gmpc-easy-command.c b/src/vala/gmpc-easy-command.c
deleted file mode 100644
index 969179d..0000000
--- a/src/vala/gmpc-easy-command.c
+++ /dev/null
@@ -1,726 +0,0 @@
-/* gmpc-easy-command.c generated by valac, the Vala compiler
- * generated from gmpc-easy-command.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include "gmpc-extras.h"
-#include <glib/gi18n-lib.h>
-#include <plugin.h>
-#include <config1.h>
-#include <playlist3-messages.h>
-#include <gdk/gdk.h>
-#include <cairo.h>
-#include <float.h>
-#include <math.h>
-
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _cairo_destroy0(var) ((var == NULL) ? NULL : (var = (cairo_destroy (var), NULL)))
-#define _cairo_pattern_destroy0(var) ((var == NULL) ? NULL : (var = (cairo_pattern_destroy (var), NULL)))
-
-struct _GmpcEasyCommandPrivate {
-	GtkEntryCompletion* completion;
-	GtkListStore* store;
-	guint signals;
-	GtkWindow* window;
-	gint* version;
-	gint version_length1;
-	gint version_size;
-};
-
-
-static gpointer gmpc_easy_command_parent_class = NULL;
-
-#define use_transition_ec TRUE
-#define some_unique_name_ec VERSION
-#define GMPC_EASY_COMMAND_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_EASY_TYPE_COMMAND, GmpcEasyCommandPrivate))
-enum  {
-	GMPC_EASY_COMMAND_DUMMY_PROPERTY
-};
-static const char* gmpc_easy_command_real_get_name (GmpcPluginBase* base);
-static gint* gmpc_easy_command_real_get_version (GmpcPluginBase* base, int* result_length1);
-static gboolean gmpc_easy_command_real_get_enabled (GmpcPluginBase* base);
-static void gmpc_easy_command_real_set_enabled (GmpcPluginBase* base, gboolean state);
-static gboolean gmpc_easy_command_completion_function (GmpcEasyCommand* self, GtkEntryCompletion* comp, const char* key, GtkTreeIter* iter);
-static void gmpc_easy_command_activate (GmpcEasyCommand* self, GtkEntry* entry);
-static gboolean gmpc_easy_command_key_press_event (GmpcEasyCommand* self, GtkEntry* widget, GdkEventKey* event);
-static gboolean gmpc_easy_command_popup_expose_handler (GmpcEasyCommand* self, GtkWindow* widget, GdkEventExpose* event);
-static gboolean _gmpc_easy_command_popup_expose_handler_gtk_widget_expose_event (GtkWindow* _sender, GdkEventExpose* event, gpointer self);
-static void _gmpc_easy_command_activate_gtk_entry_activate (GtkEntry* _sender, gpointer self);
-static gboolean _gmpc_easy_command_key_press_event_gtk_widget_key_press_event (GtkEntry* _sender, GdkEventKey* event, gpointer self);
-static gboolean gmpc_easy_command_focus_out_event (GmpcEasyCommand* self, GtkEntry* entry, GdkEventFocus* event);
-static gboolean _gmpc_easy_command_focus_out_event_gtk_widget_focus_out_event (GtkEntry* _sender, GdkEventFocus* event, gpointer self);
-static void _gmpc_easy_command_help_window_destroy_gtk_dialog_response (GtkDialog* _sender, gint response_id, gpointer self);
-static gboolean _gmpc_easy_command_completion_function_gtk_entry_completion_match_func (GtkEntryCompletion* completion, const char* key, GtkTreeIter* iter, gpointer self);
-static GObject * gmpc_easy_command_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_easy_command_finalize (GObject* obj);
-static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func);
-static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func);
-static gint _vala_array_length (gpointer array);
-
-
-
-static const char* gmpc_easy_command_real_get_name (GmpcPluginBase* base) {
-	GmpcEasyCommand * self;
-	const char* result;
-	self = (GmpcEasyCommand*) base;
-	result = _ ("Gmpc Easy Command");
-	return result;
-}
-
-
-static gint* gmpc_easy_command_real_get_version (GmpcPluginBase* base, int* result_length1) {
-	GmpcEasyCommand * self;
-	gint* result;
-	gint* _tmp0_;
-	self = (GmpcEasyCommand*) base;
-	result = (_tmp0_ = self->priv->version, *result_length1 = self->priv->version_length1, _tmp0_);
-	return result;
-}
-
-
-static gboolean gmpc_easy_command_real_get_enabled (GmpcPluginBase* base) {
-	GmpcEasyCommand * self;
-	gboolean result;
-	self = (GmpcEasyCommand*) base;
-	result = (gboolean) cfg_get_single_value_as_int_with_default (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "enabled", 1);
-	return result;
-}
-
-
-static void gmpc_easy_command_real_set_enabled (GmpcPluginBase* base, gboolean state) {
-	GmpcEasyCommand * self;
-	gboolean _tmp0_ = FALSE;
-	self = (GmpcEasyCommand*) base;
-	if (!state) {
-		_tmp0_ = self->priv->window != NULL;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		GtkWindow* _tmp1_;
-		gtk_object_destroy ((GtkObject*) self->priv->window);
-		self->priv->window = (_tmp1_ = NULL, _g_object_unref0 (self->priv->window), _tmp1_);
-	}
-	cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "enabled", (gint) state);
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static gboolean gmpc_easy_command_completion_function (GmpcEasyCommand* self, GtkEntryCompletion* comp, const char* key, GtkTreeIter* iter) {
-	gboolean result;
-	char* value;
-	GtkTreeModel* model;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (comp != NULL, FALSE);
-	g_return_val_if_fail (key != NULL, FALSE);
-	value = NULL;
-	model = _g_object_ref0 (gtk_entry_completion_get_model (comp));
-	gtk_tree_model_get (model, iter, 1, &value, -1);
-	if (value != NULL) {
-		char* a;
-		a = g_strdup_printf ("^%s.*", key);
-		result = g_regex_match_simple (a, value, G_REGEX_CASELESS, 0);
-		_g_free0 (a);
-		_g_free0 (value);
-		_g_object_unref0 (model);
-		return result;
-	}
-	result = FALSE;
-	_g_free0 (value);
-	_g_object_unref0 (model);
-	return result;
-}
-
-
-guint gmpc_easy_command_add_entry (GmpcEasyCommand* self, const char* name, const char* pattern, const char* hint, GmpcEasyCommandCallback* callback, void* userdata) {
-	guint result;
-	GtkTreeIter iter = {0};
-	g_return_val_if_fail (self != NULL, 0U);
-	g_return_val_if_fail (name != NULL, 0U);
-	g_return_val_if_fail (pattern != NULL, 0U);
-	g_return_val_if_fail (hint != NULL, 0U);
-	self->priv->signals++;
-	gtk_list_store_append (self->priv->store, &iter);
-	gtk_list_store_set (self->priv->store, &iter, 0, self->priv->signals, 1, name, 2, pattern, 3, callback, 4, userdata, 5, hint, -1, -1);
-	result = self->priv->signals;
-	return result;
-}
-
-
-static void gmpc_easy_command_activate (GmpcEasyCommand* self, GtkEntry* entry) {
-	char* value_unsplit;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (entry != NULL);
-	value_unsplit = g_strdup (gtk_entry_get_text (entry));
-	gmpc_easy_command_do_query (self, value_unsplit);
-	_g_free0 (value_unsplit);
-}
-
-
-static glong string_get_length (const char* self) {
-	glong result;
-	g_return_val_if_fail (self != NULL, 0L);
-	result = g_utf8_strlen (self, -1);
-	return result;
-}
-
-
-static char* string_strip (const char* self) {
-	char* result;
-	char* _result_;
-	g_return_val_if_fail (self != NULL, NULL);
-	_result_ = g_strdup (self);
-	g_strstrip (_result_);
-	result = _result_;
-	return result;
-}
-
-
-static char* string_substring (const char* self, glong offset, glong len) {
-	char* result;
-	glong string_length;
-	const char* start;
-	g_return_val_if_fail (self != NULL, NULL);
-	string_length = g_utf8_strlen (self, -1);
-	if (offset < 0) {
-		offset = string_length + offset;
-		g_return_val_if_fail (offset >= 0, NULL);
-	} else {
-		g_return_val_if_fail (offset <= string_length, NULL);
-	}
-	if (len < 0) {
-		len = string_length - offset;
-	}
-	g_return_val_if_fail ((offset + len) <= string_length, NULL);
-	start = g_utf8_offset_to_pointer (self, offset);
-	result = g_strndup (start, ((gchar*) g_utf8_offset_to_pointer (start, len)) - ((gchar*) start));
-	return result;
-}
-
-
-void gmpc_easy_command_do_query (GmpcEasyCommand* self, const char* value_unsplit) {
-	GtkTreeModel* model;
-	GtkTreeIter iter = {0};
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (value_unsplit != NULL);
-	model = (GtkTreeModel*) self->priv->store;
-	if (string_get_length (value_unsplit) == 0) {
-		if (self->priv->window != NULL) {
-			GtkWindow* _tmp0_;
-			gtk_object_destroy ((GtkObject*) self->priv->window);
-			self->priv->window = (_tmp0_ = NULL, _g_object_unref0 (self->priv->window), _tmp0_);
-		}
-		return;
-	}
-	{
-		char** _tmp1_;
-		char** value_collection;
-		int value_collection_length1;
-		int value_it;
-		value_collection = _tmp1_ = g_strsplit (value_unsplit, ";", 0);
-		value_collection_length1 = _vala_array_length (_tmp1_);
-		for (value_it = 0; value_it < _vala_array_length (_tmp1_); value_it = value_it + 1) {
-			char* value;
-			value = g_strdup (value_collection[value_it]);
-			{
-				gboolean found;
-				found = FALSE;
-				if (gtk_tree_model_get_iter_first (model, &iter)) {
-					{
-						gboolean _tmp2_;
-						_tmp2_ = TRUE;
-						while (TRUE) {
-							char* name;
-							char* pattern;
-							char* test;
-							GmpcEasyCommandCallback _tmp4_;
-							GDestroyNotify callback_target_destroy_notify = NULL;
-							void* callback_target = NULL;
-							GmpcEasyCommandCallback callback;
-							void* data = NULL;
-							char* _tmp5_;
-							char* _tmp6_;
-							gboolean _tmp7_;
-							if (!_tmp2_) {
-								gboolean _tmp3_ = FALSE;
-								if (gtk_tree_model_iter_next (model, &iter)) {
-									_tmp3_ = !found;
-								} else {
-									_tmp3_ = FALSE;
-								}
-								if (!_tmp3_) {
-									break;
-								}
-							}
-							_tmp2_ = FALSE;
-							name = NULL;
-							pattern = NULL;
-							test = NULL;
-							callback = (_tmp4_ = NULL, callback_target = NULL, callback_target_destroy_notify = NULL, _tmp4_);
-							gtk_tree_model_get (model, &iter, 1, &name, 2, &pattern, 3, &callback, 4, &data, -1);
-							test = (_tmp5_ = g_strdup_printf ("%s[ ]*%s$", name, pattern), _g_free0 (test), _tmp5_);
-							if ((_tmp7_ = g_regex_match_simple (test, _tmp6_ = string_strip (value), G_REGEX_CASELESS, 0), _g_free0 (_tmp6_), _tmp7_)) {
-								char* param;
-								char* param_str;
-								param = NULL;
-								if (string_get_length (value) > string_get_length (name)) {
-									char* _tmp8_;
-									param = (_tmp8_ = string_substring (value, string_get_length (name), (glong) (-1)), _g_free0 (param), _tmp8_);
-								} else {
-									char* _tmp9_;
-									param = (_tmp9_ = g_strdup (""), _g_free0 (param), _tmp9_);
-								}
-								param_str = string_strip (param);
-								callback (data, param_str, callback_target);
-								found = TRUE;
-								_g_free0 (param);
-								_g_free0 (param_str);
-							}
-							_g_free0 (name);
-							_g_free0 (pattern);
-							_g_free0 (test);
-							(callback_target_destroy_notify == NULL) ? NULL : callback_target_destroy_notify (callback_target);
-							callback = NULL;
-							callback_target = NULL;
-							callback_target_destroy_notify = NULL;
-						}
-					}
-				}
-				if (!found) {
-					if (gtk_tree_model_get_iter_first (model, &iter)) {
-						{
-							gboolean _tmp10_;
-							_tmp10_ = TRUE;
-							while (TRUE) {
-								char* name;
-								char* pattern;
-								char* test;
-								GmpcEasyCommandCallback _tmp12_;
-								GDestroyNotify callback_target_destroy_notify = NULL;
-								void* callback_target = NULL;
-								GmpcEasyCommandCallback callback;
-								void* data = NULL;
-								char* _tmp14_;
-								char* _tmp13_;
-								if (!_tmp10_) {
-									gboolean _tmp11_ = FALSE;
-									if (gtk_tree_model_iter_next (model, &iter)) {
-										_tmp11_ = !found;
-									} else {
-										_tmp11_ = FALSE;
-									}
-									if (!_tmp11_) {
-										break;
-									}
-								}
-								_tmp10_ = FALSE;
-								name = NULL;
-								pattern = NULL;
-								test = NULL;
-								callback = (_tmp12_ = NULL, callback_target = NULL, callback_target_destroy_notify = NULL, _tmp12_);
-								gtk_tree_model_get (model, &iter, 1, &name, 2, &pattern, 3, &callback, 4, &data, -1);
-								test = (_tmp14_ = g_strdup_printf ("^%s.*", _tmp13_ = string_strip (value)), _g_free0 (test), _tmp14_);
-								_g_free0 (_tmp13_);
-								if (g_regex_match_simple (test, name, G_REGEX_CASELESS, 0)) {
-									char* param;
-									char* param_str;
-									param = NULL;
-									if (string_get_length (value) > string_get_length (name)) {
-										char* _tmp15_;
-										param = (_tmp15_ = string_substring (value, string_get_length (name), (glong) (-1)), _g_free0 (param), _tmp15_);
-									} else {
-										char* _tmp16_;
-										param = (_tmp16_ = g_strdup (""), _g_free0 (param), _tmp16_);
-									}
-									param_str = string_strip (param);
-									callback (data, param_str, callback_target);
-									found = TRUE;
-									_g_free0 (param);
-									_g_free0 (param_str);
-								}
-								_g_free0 (name);
-								_g_free0 (pattern);
-								_g_free0 (test);
-								(callback_target_destroy_notify == NULL) ? NULL : callback_target_destroy_notify (callback_target);
-								callback = NULL;
-								callback_target = NULL;
-								callback_target_destroy_notify = NULL;
-							}
-						}
-					}
-				}
-				if (!found) {
-					char* _tmp18_;
-					char* _tmp17_;
-					playlist3_show_error_message (_tmp18_ = g_strdup_printf ("Unknown command: '%s'", _tmp17_ = string_strip (value)), ERROR_INFO);
-					_g_free0 (_tmp18_);
-					_g_free0 (_tmp17_);
-				}
-				_g_free0 (value);
-			}
-		}
-		value_collection = (_vala_array_free (value_collection, value_collection_length1, (GDestroyNotify) g_free), NULL);
-	}
-	if (self->priv->window != NULL) {
-		GtkWindow* _tmp19_;
-		gtk_object_destroy ((GtkObject*) self->priv->window);
-		self->priv->window = (_tmp19_ = NULL, _g_object_unref0 (self->priv->window), _tmp19_);
-	}
-}
-
-
-static gboolean gmpc_easy_command_key_press_event (GmpcEasyCommand* self, GtkEntry* widget, GdkEventKey* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (widget != NULL, FALSE);
-	if ((*event).keyval == 0xff1b) {
-		GtkWindow* _tmp0_;
-		gtk_object_destroy ((GtkObject*) self->priv->window);
-		self->priv->window = (_tmp0_ = NULL, _g_object_unref0 (self->priv->window), _tmp0_);
-		result = TRUE;
-		return result;
-	}
-	if ((*event).keyval == 0xff09) {
-		gtk_editable_set_position (GTK_EDITABLE (widget), -1);
-		result = TRUE;
-		return result;
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean gmpc_easy_command_popup_expose_handler (GmpcEasyCommand* self, GtkWindow* widget, GdkEventExpose* event) {
-	gboolean result;
-	cairo_t* ctx;
-	gint width;
-	gint height;
-	cairo_pattern_t* pattern;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (widget != NULL, FALSE);
-	ctx = gdk_cairo_create ((GdkDrawable*) ((GtkWidget*) widget)->window);
-	width = ((GtkWidget*) widget)->allocation.width;
-	height = ((GtkWidget*) widget)->allocation.height;
-	if (gtk_widget_is_composited ((GtkWidget*) widget)) {
-		cairo_set_operator (ctx, CAIRO_OPERATOR_SOURCE);
-		cairo_set_source_rgba (ctx, 1.0, 1.0, 1.0, 0.0);
-	} else {
-		cairo_set_source_rgb (ctx, 1.0, 1.0, 1.0);
-	}
-	cairo_paint (ctx);
-	cairo_rectangle (ctx, 1.0, 1.0, (double) (width - 2), (double) (height - 2));
-	pattern = cairo_pattern_create_linear (0.0, 0.0, 0.0, (double) height);
-	cairo_pattern_add_color_stop_rgba (pattern, 0.0, 0.0, 0.0, 0.2, 0.5);
-	cairo_pattern_add_color_stop_rgba (pattern, 0.5, 0.0, 0.0, 0.0, 1.0);
-	cairo_pattern_add_color_stop_rgba (pattern, 1.0, 0.0, 0.0, 0.2, 0.5);
-	cairo_set_source (ctx, pattern);
-	cairo_fill_preserve (ctx);
-	cairo_set_source_rgba (ctx, 1.0, 1.0, 1.0, 1.0);
-	cairo_stroke (ctx);
-	cairo_rectangle (ctx, 0.0, 0.0, (double) width, (double) height);
-	cairo_set_source_rgba (ctx, 0.0, 0.0, 0.0, 1.0);
-	cairo_stroke (ctx);
-	result = FALSE;
-	_cairo_destroy0 (ctx);
-	_cairo_pattern_destroy0 (pattern);
-	return result;
-}
-
-
-static gboolean _gmpc_easy_command_popup_expose_handler_gtk_widget_expose_event (GtkWindow* _sender, GdkEventExpose* event, gpointer self) {
-	return gmpc_easy_command_popup_expose_handler (self, _sender, event);
-}
-
-
-static void _gmpc_easy_command_activate_gtk_entry_activate (GtkEntry* _sender, gpointer self) {
-	gmpc_easy_command_activate (self, _sender);
-}
-
-
-static gboolean _gmpc_easy_command_key_press_event_gtk_widget_key_press_event (GtkEntry* _sender, GdkEventKey* event, gpointer self) {
-	return gmpc_easy_command_key_press_event (self, _sender, event);
-}
-
-
-static gboolean _gmpc_easy_command_focus_out_event_gtk_widget_focus_out_event (GtkEntry* _sender, GdkEventFocus* event, gpointer self) {
-	return gmpc_easy_command_focus_out_event (self, _sender, event);
-}
-
-
-void gmpc_easy_command_popup (GmpcEasyCommand* self) {
-	g_return_if_fail (self != NULL);
-	if (!gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		return;
-	}
-	if (self->priv->window == NULL) {
-		GtkWindow* _tmp0_;
-		GtkEntry* entry;
-		self->priv->window = (_tmp0_ = g_object_ref_sink ((GtkWindow*) gtk_window_new (GTK_WINDOW_TOPLEVEL)), _g_object_unref0 (self->priv->window), _tmp0_);
-		entry = g_object_ref_sink ((GtkEntry*) gtk_entry_new ());
-		gtk_window_set_role (self->priv->window, "easy command");
-		gtk_window_set_type_hint (self->priv->window, GDK_WINDOW_TYPE_HINT_DIALOG);
-		gtk_window_set_decorated (self->priv->window, FALSE);
-		gtk_window_set_modal (self->priv->window, TRUE);
-		gtk_window_set_keep_above (self->priv->window, TRUE);
-		gtk_container_set_border_width ((GtkContainer*) self->priv->window, (guint) 24);
-		gtk_entry_set_width_chars (entry, 50);
-		gtk_container_add ((GtkContainer*) self->priv->window, (GtkWidget*) entry);
-		if (gtk_widget_is_composited ((GtkWidget*) self->priv->window)) {
-			GdkScreen* screen;
-			GdkColormap* colormap;
-			screen = _g_object_ref0 (gtk_window_get_screen (self->priv->window));
-			colormap = _g_object_ref0 (gdk_screen_get_rgba_colormap (screen));
-			gtk_widget_set_colormap ((GtkWidget*) self->priv->window, colormap);
-			_g_object_unref0 (screen);
-			_g_object_unref0 (colormap);
-		}
-		gtk_widget_set_app_paintable ((GtkWidget*) self->priv->window, TRUE);
-		g_signal_connect_object ((GtkWidget*) self->priv->window, "expose-event", (GCallback) _gmpc_easy_command_popup_expose_handler_gtk_widget_expose_event, self, 0);
-		gtk_entry_set_completion (entry, self->priv->completion);
-		g_signal_connect_object (entry, "activate", (GCallback) _gmpc_easy_command_activate_gtk_entry_activate, self, 0);
-		g_signal_connect_object ((GtkWidget*) entry, "key-press-event", (GCallback) _gmpc_easy_command_key_press_event_gtk_widget_key_press_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) entry, "focus-out-event", (GCallback) _gmpc_easy_command_focus_out_event_gtk_widget_focus_out_event, self, 0);
-		gtk_widget_show_all ((GtkWidget*) self->priv->window);
-		gtk_window_present (self->priv->window);
-		gtk_widget_grab_focus ((GtkWidget*) entry);
-		_g_object_unref0 (entry);
-	} else {
-		gtk_window_present (self->priv->window);
-	}
-}
-
-
-static gboolean gmpc_easy_command_focus_out_event (GmpcEasyCommand* self, GtkEntry* entry, GdkEventFocus* event) {
-	gboolean result;
-	GtkWindow* _tmp0_;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (entry != NULL, FALSE);
-	gtk_object_destroy ((GtkObject*) self->priv->window);
-	self->priv->window = (_tmp0_ = NULL, _g_object_unref0 (self->priv->window), _tmp0_);
-	result = FALSE;
-	return result;
-}
-
-
-void gmpc_easy_command_help_window_destroy (GtkDialog* window, gint response) {
-	g_return_if_fail (window != NULL);
-	gtk_object_destroy ((GtkObject*) window);
-}
-
-
-static void _gmpc_easy_command_help_window_destroy_gtk_dialog_response (GtkDialog* _sender, gint response_id, gpointer self) {
-	gmpc_easy_command_help_window_destroy (_sender, response_id);
-}
-
-
-void gmpc_easy_command_help_window (void* data, const char* param) {
-	GmpcEasyCommand* ec;
-	GtkDialog* window;
-	GtkTreeView* tree;
-	GtkTreeModelSort* _tmp0_;
-	GtkScrolledWindow* sw;
-	GtkCellRendererText* renderer;
-	GtkTreeViewColumn* column;
-	GtkCellRendererText* _tmp1_;
-	GtkTreeViewColumn* _tmp2_;
-	GtkLabel* label;
-	ec = _g_object_ref0 ((GmpcEasyCommand*) data);
-	window = g_object_ref_sink ((GtkDialog*) gtk_dialog_new_with_buttons (_ ("Easy Command help"), NULL, 0, "gtk-close", GTK_RESPONSE_OK, NULL, NULL));
-	gtk_window_set_default_size ((GtkWindow*) window, 600, 400);
-	tree = g_object_ref_sink ((GtkTreeView*) gtk_tree_view_new ());
-	gtk_tree_view_set_model (tree, (GtkTreeModel*) (_tmp0_ = (GtkTreeModelSort*) gtk_tree_model_sort_new_with_model ((GtkTreeModel*) ec->priv->store)));
-	_g_object_unref0 (_tmp0_);
-	gtk_tree_view_set_rules_hint (tree, TRUE);
-	gtk_tree_view_set_search_column (tree, 1);
-	sw = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL));
-	gtk_container_set_border_width ((GtkContainer*) sw, (guint) 8);
-	gtk_scrolled_window_set_shadow_type (sw, GTK_SHADOW_ETCHED_IN);
-	gtk_scrolled_window_set_policy (sw, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-	gtk_container_add ((GtkContainer*) sw, (GtkWidget*) tree);
-	renderer = g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ());
-	column = g_object_ref_sink (gtk_tree_view_column_new ());
-	gtk_tree_view_append_column (tree, column);
-	gtk_tree_view_column_set_title (column, _ ("Command"));
-	gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) renderer, FALSE);
-	gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) renderer, "text", 1);
-	gtk_tree_view_column_set_sort_column_id (column, 1);
-	renderer = (_tmp1_ = g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ()), _g_object_unref0 (renderer), _tmp1_);
-	column = (_tmp2_ = g_object_ref_sink (gtk_tree_view_column_new ()), _g_object_unref0 (column), _tmp2_);
-	gtk_tree_view_append_column (tree, column);
-	gtk_cell_layout_pack_start ((GtkCellLayout*) column, (GtkCellRenderer*) renderer, FALSE);
-	gtk_tree_view_column_set_title (column, _ ("Usage"));
-	gtk_cell_layout_add_attribute ((GtkCellLayout*) column, (GtkCellRenderer*) renderer, "text", 5);
-	gtk_tree_view_column_set_sort_column_id (column, 5);
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-	gtk_label_set_markup (label, _ ("The following commands can be used in the easy command window.\nThe easy command window can be opened by pressing ctrl-space"));
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	gtk_misc_set_padding ((GtkMisc*) label, 8, 6);
-	gtk_box_pack_start ((GtkBox*) window->vbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) window->vbox, (GtkWidget*) sw, TRUE, TRUE, (guint) 0);
-	gtk_widget_show_all ((GtkWidget*) window);
-	g_signal_connect (window, "response", (GCallback) _gmpc_easy_command_help_window_destroy_gtk_dialog_response, NULL);
-	_g_object_unref0 (ec);
-	_g_object_unref0 (window);
-	_g_object_unref0 (tree);
-	_g_object_unref0 (sw);
-	_g_object_unref0 (renderer);
-	_g_object_unref0 (column);
-	_g_object_unref0 (label);
-}
-
-
-GmpcEasyCommand* gmpc_easy_command_construct (GType object_type) {
-	GmpcEasyCommand * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcEasyCommand* gmpc_easy_command_new (void) {
-	return gmpc_easy_command_construct (GMPC_EASY_TYPE_COMMAND);
-}
-
-
-static gboolean _gmpc_easy_command_completion_function_gtk_entry_completion_match_func (GtkEntryCompletion* completion, const char* key, GtkTreeIter* iter, gpointer self) {
-	return gmpc_easy_command_completion_function (self, completion, key, iter);
-}
-
-
-static GObject * gmpc_easy_command_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcEasyCommand * self;
-	parent_class = G_OBJECT_CLASS (gmpc_easy_command_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_EASY_COMMAND (obj);
-	{
-		GtkListStore* _tmp1_;
-		GtkEntryCompletion* _tmp2_;
-		GtkCellRendererText* renderer;
-		((GmpcPluginBase*) self)->plugin_type = 8 + 4;
-		self->priv->store = (_tmp1_ = gtk_list_store_new (6, G_TYPE_UINT, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_POINTER, G_TYPE_POINTER, G_TYPE_STRING, NULL), _g_object_unref0 (self->priv->store), _tmp1_);
-		self->priv->completion = (_tmp2_ = gtk_entry_completion_new (), _g_object_unref0 (self->priv->completion), _tmp2_);
-		gtk_entry_completion_set_model (self->priv->completion, (GtkTreeModel*) self->priv->store);
-		gtk_entry_completion_set_text_column (self->priv->completion, 1);
-		gtk_entry_completion_set_inline_completion (self->priv->completion, TRUE);
-		gtk_entry_completion_set_inline_selection (self->priv->completion, TRUE);
-		gtk_entry_completion_set_popup_completion (self->priv->completion, TRUE);
-		gtk_entry_completion_set_match_func (self->priv->completion, _gmpc_easy_command_completion_function_gtk_entry_completion_match_func, g_object_ref (self), g_object_unref);
-		renderer = g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ());
-		gtk_cell_layout_pack_end ((GtkCellLayout*) self->priv->completion, (GtkCellRenderer*) renderer, FALSE);
-		gtk_cell_layout_add_attribute ((GtkCellLayout*) self->priv->completion, (GtkCellRenderer*) renderer, "text", 5);
-		g_object_set ((GObject*) renderer, "foreground", "grey", NULL, NULL);
-		gmpc_easy_command_add_entry (self, _ ("Help"), "", _ ("Get a list of available commands"), (GmpcEasyCommandCallback*) gmpc_easy_command_help_window, self);
-		_g_object_unref0 (renderer);
-	}
-	return obj;
-}
-
-
-static void gmpc_easy_command_class_init (GmpcEasyCommandClass * klass) {
-	gmpc_easy_command_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcEasyCommandPrivate));
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_name = gmpc_easy_command_real_get_name;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_version = gmpc_easy_command_real_get_version;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_enabled = gmpc_easy_command_real_get_enabled;
-	GMPC_PLUGIN_BASE_CLASS (klass)->set_enabled = gmpc_easy_command_real_set_enabled;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_easy_command_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_easy_command_finalize;
-}
-
-
-static void gmpc_easy_command_instance_init (GmpcEasyCommand * self) {
-	gint* _tmp0_ = NULL;
-	self->priv = GMPC_EASY_COMMAND_GET_PRIVATE (self);
-	self->priv->completion = NULL;
-	self->priv->store = NULL;
-	self->priv->signals = (guint) 0;
-	self->priv->window = NULL;
-	self->priv->version = (_tmp0_ = g_new0 (gint, 3), _tmp0_[0] = 0, _tmp0_[1] = 0, _tmp0_[2] = 1, _tmp0_);
-	self->priv->version_length1 = 3;
-	self->priv->version_size = self->priv->version_length1;
-}
-
-
-static void gmpc_easy_command_finalize (GObject* obj) {
-	GmpcEasyCommand * self;
-	self = GMPC_EASY_COMMAND (obj);
-	_g_object_unref0 (self->priv->completion);
-	_g_object_unref0 (self->priv->store);
-	_g_object_unref0 (self->priv->window);
-	self->priv->version = (g_free (self->priv->version), NULL);
-	G_OBJECT_CLASS (gmpc_easy_command_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_easy_command_get_type (void) {
-	static GType gmpc_easy_command_type_id = 0;
-	if (gmpc_easy_command_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcEasyCommandClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_easy_command_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcEasyCommand), 0, (GInstanceInitFunc) gmpc_easy_command_instance_init, NULL };
-		gmpc_easy_command_type_id = g_type_register_static (GMPC_PLUGIN_TYPE_BASE, "GmpcEasyCommand", &g_define_type_info, 0);
-	}
-	return gmpc_easy_command_type_id;
-}
-
-
-static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func) {
-	if ((array != NULL) && (destroy_func != NULL)) {
-		int i;
-		for (i = 0; i < array_length; i = i + 1) {
-			if (((gpointer*) array)[i] != NULL) {
-				destroy_func (((gpointer*) array)[i]);
-			}
-		}
-	}
-}
-
-
-static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func) {
-	_vala_array_destroy (array, array_length, destroy_func);
-	g_free (array);
-}
-
-
-static gint _vala_array_length (gpointer array) {
-	int length;
-	length = 0;
-	if (array) {
-		while (((gpointer*) array)[length]) {
-			length++;
-		}
-	}
-	return length;
-}
-
-
-
-
diff --git a/src/vala/gmpc-favorites.c b/src/vala/gmpc-favorites.c
deleted file mode 100644
index d2e3017..0000000
--- a/src/vala/gmpc-favorites.c
+++ /dev/null
@@ -1,606 +0,0 @@
-/* gmpc-favorites.c generated by valac, the Vala compiler
- * generated from gmpc-favorites.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include <libmpd/libmpd.h>
-#include <glib/gi18n-lib.h>
-#include "gmpc-extras.h"
-#include <libmpd/libmpdclient.h>
-#include <plugin.h>
-#include <main.h>
-#include <gdk-pixbuf/gdk-pixdata.h>
-#include <gdk/gdk.h>
-#include <misc.h>
-#include <stdio.h>
-
-
-#define GMPC_FAVORITES_TYPE_LIST (gmpc_favorites_list_get_type ())
-#define GMPC_FAVORITES_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_FAVORITES_TYPE_LIST, GmpcFavoritesList))
-#define GMPC_FAVORITES_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_FAVORITES_TYPE_LIST, GmpcFavoritesListClass))
-#define GMPC_FAVORITES_IS_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_FAVORITES_TYPE_LIST))
-#define GMPC_FAVORITES_IS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_FAVORITES_TYPE_LIST))
-#define GMPC_FAVORITES_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_FAVORITES_TYPE_LIST, GmpcFavoritesListClass))
-
-typedef struct _GmpcFavoritesList GmpcFavoritesList;
-typedef struct _GmpcFavoritesListClass GmpcFavoritesListClass;
-typedef struct _GmpcFavoritesListPrivate GmpcFavoritesListPrivate;
-#define _mpd_data_free0(var) ((var == NULL) ? NULL : (var = (mpd_data_free (var), NULL)))
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-typedef struct _Block1Data Block1Data;
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-
-struct _GmpcFavoritesList {
-	GObject parent_instance;
-	GmpcFavoritesListPrivate * priv;
-};
-
-struct _GmpcFavoritesListClass {
-	GObjectClass parent_class;
-};
-
-struct _GmpcFavoritesListPrivate {
-	MpdData* list;
-};
-
-struct _GmpcFavoritesButtonPrivate {
-	mpd_Song* song;
-	GtkImage* image;
-	gboolean fstate;
-	GdkPixbuf* pb;
-};
-
-struct _Block1Data {
-	int _ref_count_;
-	GmpcFavoritesButton * self;
-	char* pp;
-};
-
-
-extern GmpcFavoritesList* favorites;
-GmpcFavoritesList* favorites = NULL;
-static gpointer gmpc_favorites_list_parent_class = NULL;
-static gpointer gmpc_favorites_button_parent_class = NULL;
-
-#define some_unique_name_fav VERSION
-#define use_transition_fav TRUE
-GType gmpc_favorites_list_get_type (void);
-#define GMPC_FAVORITES_LIST_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_FAVORITES_TYPE_LIST, GmpcFavoritesListPrivate))
-enum  {
-	GMPC_FAVORITES_LIST_DUMMY_PROPERTY
-};
-static void gmpc_favorites_list_con_changed (GmpcFavoritesList* self, GmpcConnection* conn, MpdObj* server, gint connect);
-static void gmpc_favorites_list_status_changed (GmpcFavoritesList* self, GmpcConnection* conn, MpdObj* server, ChangedStatusType what);
-gboolean gmpc_favorites_list_is_favorite (GmpcFavoritesList* self, const char* path);
-void gmpc_favorites_list_set_favorite (GmpcFavoritesList* self, const char* path, gboolean favorite);
-GmpcFavoritesList* gmpc_favorites_list_new (void);
-GmpcFavoritesList* gmpc_favorites_list_construct (GType object_type);
-static void _gmpc_favorites_list_con_changed_gmpc_connection_connection_changed (GmpcConnection* _sender, MpdObj* mi, gint connect, gpointer self);
-static void _gmpc_favorites_list_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self);
-static GObject * gmpc_favorites_list_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_favorites_list_finalize (GObject* obj);
-#define GMPC_FAVORITES_BUTTON_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_FAVORITES_TYPE_BUTTON, GmpcFavoritesButtonPrivate))
-enum  {
-	GMPC_FAVORITES_BUTTON_DUMMY_PROPERTY
-};
-static void _lambda0_ (GtkMenuItem* source, Block1Data* _data1_);
-static void __lambda0__gtk_menu_item_activate (GtkMenuItem* _sender, gpointer self);
-static Block1Data* block1_data_ref (Block1Data* _data1_);
-static void block1_data_unref (Block1Data* _data1_);
-static gboolean gmpc_favorites_button_button_press_event_callback (GmpcFavoritesButton* self, GmpcFavoritesButton* button, GdkEventButton* event);
-static gboolean gmpc_favorites_button_enter_notify_event_callback (GmpcFavoritesButton* self, GmpcFavoritesButton* button, GdkEventCrossing* motion);
-static void gmpc_favorites_button_update (GmpcFavoritesButton* self, GmpcFavoritesList* list);
-static gboolean gmpc_favorites_button_leave_notify_event_callback (GmpcFavoritesButton* self, GmpcFavoritesButton* button, GdkEventCrossing* motion);
-static void _gmpc_favorites_button_update_gmpc_favorites_list_updated (GmpcFavoritesList* _sender, gpointer self);
-static gboolean _gmpc_favorites_button_button_press_event_callback_gtk_widget_button_press_event (GmpcFavoritesButton* _sender, GdkEventButton* event, gpointer self);
-static gboolean _gmpc_favorites_button_enter_notify_event_callback_gtk_widget_enter_notify_event (GmpcFavoritesButton* _sender, GdkEventCrossing* event, gpointer self);
-static gboolean _gmpc_favorites_button_leave_notify_event_callback_gtk_widget_leave_notify_event (GmpcFavoritesButton* _sender, GdkEventCrossing* event, gpointer self);
-static GObject * gmpc_favorites_button_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_favorites_button_finalize (GObject* obj);
-static int _vala_strcmp0 (const char * str1, const char * str2);
-
-
-
-static void gmpc_favorites_list_con_changed (GmpcFavoritesList* self, GmpcConnection* conn, MpdObj* server, gint connect) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (conn != NULL);
-	g_return_if_fail (server != NULL);
-	if (connect == 1) {
-		MpdData* _tmp0_;
-		self->priv->list = (_tmp0_ = mpd_database_get_playlist_content (server, _ ("Favorites")), _mpd_data_free0 (self->priv->list), _tmp0_);
-		g_signal_emit_by_name (self, "updated");
-	} else {
-		MpdData* _tmp1_;
-		self->priv->list = (_tmp1_ = NULL, _mpd_data_free0 (self->priv->list), _tmp1_);
-	}
-}
-
-
-static void gmpc_favorites_list_status_changed (GmpcFavoritesList* self, GmpcConnection* conn, MpdObj* server, ChangedStatusType what) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (conn != NULL);
-	g_return_if_fail (server != NULL);
-	if ((what & MPD_CST_STORED_PLAYLIST) == MPD_CST_STORED_PLAYLIST) {
-		MpdData* _tmp0_;
-		self->priv->list = (_tmp0_ = mpd_database_get_playlist_content (server, _ ("Favorites")), _mpd_data_free0 (self->priv->list), _tmp0_);
-		g_signal_emit_by_name (self, "updated");
-	}
-}
-
-
-gboolean gmpc_favorites_list_is_favorite (GmpcFavoritesList* self, const char* path) {
-	gboolean result;
-	const MpdData* iter;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (path != NULL, FALSE);
-	iter = mpd_data_get_first (self->priv->list);
-	while (TRUE) {
-		if (!(iter != NULL)) {
-			break;
-		}
-		if (iter->type == MPD_DATA_TYPE_SONG) {
-			if (_vala_strcmp0 (iter->song->file, path) == 0) {
-				result = TRUE;
-				return result;
-			}
-		}
-		iter = mpd_data_get_next_real (iter, FALSE);
-	}
-	result = FALSE;
-	return result;
-}
-
-
-void gmpc_favorites_list_set_favorite (GmpcFavoritesList* self, const char* path, gboolean favorite) {
-	gboolean current;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (path != NULL);
-	current = gmpc_favorites_list_is_favorite (self, path);
-	if (current != favorite) {
-		if (favorite) {
-			mpd_database_playlist_list_add (connection, _ ("Favorites"), path);
-		} else {
-			const MpdData* iter;
-			iter = mpd_data_get_first (self->priv->list);
-			while (TRUE) {
-				if (!(iter != NULL)) {
-					break;
-				}
-				if (iter->type == MPD_DATA_TYPE_SONG) {
-					if (_vala_strcmp0 (iter->song->file, path) == 0) {
-						mpd_database_playlist_list_delete (connection, _ ("Favorites"), iter->song->pos);
-						return;
-					}
-				}
-				iter = mpd_data_get_next_real (iter, FALSE);
-			}
-		}
-	}
-}
-
-
-GmpcFavoritesList* gmpc_favorites_list_construct (GType object_type) {
-	GmpcFavoritesList * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcFavoritesList* gmpc_favorites_list_new (void) {
-	return gmpc_favorites_list_construct (GMPC_FAVORITES_TYPE_LIST);
-}
-
-
-static void _gmpc_favorites_list_con_changed_gmpc_connection_connection_changed (GmpcConnection* _sender, MpdObj* mi, gint connect, gpointer self) {
-	gmpc_favorites_list_con_changed (self, _sender, mi, connect);
-}
-
-
-static void _gmpc_favorites_list_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self) {
-	gmpc_favorites_list_status_changed (self, _sender, mi, what);
-}
-
-
-static GObject * gmpc_favorites_list_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcFavoritesList * self;
-	parent_class = G_OBJECT_CLASS (gmpc_favorites_list_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_FAVORITES_LIST (obj);
-	{
-		g_signal_connect_object (gmpcconn, "connection-changed", (GCallback) _gmpc_favorites_list_con_changed_gmpc_connection_connection_changed, self, 0);
-		g_signal_connect_object (gmpcconn, "status-changed", (GCallback) _gmpc_favorites_list_status_changed_gmpc_connection_status_changed, self, 0);
-	}
-	return obj;
-}
-
-
-static void gmpc_favorites_list_class_init (GmpcFavoritesListClass * klass) {
-	gmpc_favorites_list_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcFavoritesListPrivate));
-	G_OBJECT_CLASS (klass)->constructor = gmpc_favorites_list_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_favorites_list_finalize;
-	g_signal_new ("updated", GMPC_FAVORITES_TYPE_LIST, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
-}
-
-
-static void gmpc_favorites_list_instance_init (GmpcFavoritesList * self) {
-	self->priv = GMPC_FAVORITES_LIST_GET_PRIVATE (self);
-	self->priv->list = NULL;
-}
-
-
-static void gmpc_favorites_list_finalize (GObject* obj) {
-	GmpcFavoritesList * self;
-	self = GMPC_FAVORITES_LIST (obj);
-	_mpd_data_free0 (self->priv->list);
-	G_OBJECT_CLASS (gmpc_favorites_list_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_favorites_list_get_type (void) {
-	static GType gmpc_favorites_list_type_id = 0;
-	if (gmpc_favorites_list_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcFavoritesListClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_favorites_list_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcFavoritesList), 0, (GInstanceInitFunc) gmpc_favorites_list_instance_init, NULL };
-		gmpc_favorites_list_type_id = g_type_register_static (G_TYPE_OBJECT, "GmpcFavoritesList", &g_define_type_info, 0);
-	}
-	return gmpc_favorites_list_type_id;
-}
-
-
-static void _lambda0_ (GtkMenuItem* source, Block1Data* _data1_) {
-	GmpcFavoritesButton * self;
-	self = _data1_->self;
-	g_return_if_fail (source != NULL);
-	mpd_database_playlist_list_add (connection, _data1_->pp, self->priv->song->file);
-}
-
-
-static void __lambda0__gtk_menu_item_activate (GtkMenuItem* _sender, gpointer self) {
-	_lambda0_ (_sender, self);
-}
-
-
-static Block1Data* block1_data_ref (Block1Data* _data1_) {
-	++_data1_->_ref_count_;
-	return _data1_;
-}
-
-
-static void block1_data_unref (Block1Data* _data1_) {
-	if ((--_data1_->_ref_count_) == 0) {
-		_g_object_unref0 (_data1_->self);
-		_g_free0 (_data1_->pp);
-		g_slice_free (Block1Data, _data1_);
-	}
-}
-
-
-static gboolean gmpc_favorites_button_button_press_event_callback (GmpcFavoritesButton* self, GmpcFavoritesButton* button, GdkEventButton* event) {
-	gboolean result;
-	gboolean _tmp0_ = FALSE;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (button != NULL, FALSE);
-	if ((*event).button == 1) {
-		_tmp0_ = self->priv->song != NULL;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		gmpc_favorites_list_set_favorite (favorites, self->priv->song->file, !self->priv->fstate);
-		self->priv->fstate = !self->priv->fstate;
-	} else {
-		gboolean _tmp1_ = FALSE;
-		if ((*event).button == 3) {
-			_tmp1_ = self->priv->song != NULL;
-		} else {
-			_tmp1_ = FALSE;
-		}
-		if (_tmp1_) {
-			GtkMenu* menu;
-			MpdData* item;
-			menu = g_object_ref_sink ((GtkMenu*) gtk_menu_new ());
-			item = mpd_database_playlist_list (connection);
-			while (TRUE) {
-				Block1Data* _data1_;
-				GtkImageMenuItem* entry;
-				_data1_ = g_slice_new0 (Block1Data);
-				_data1_->_ref_count_ = 1;
-				_data1_->self = g_object_ref (self);
-				if (!(item != NULL)) {
-					block1_data_unref (_data1_);
-					break;
-				}
-				_data1_->pp = g_strdup ((char*) item->playlist->path);
-				entry = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_label (_data1_->pp));
-				if (_vala_strcmp0 (_data1_->pp, _ ("Favorites")) == 0) {
-					GtkImage* _tmp2_;
-					gtk_image_menu_item_set_image (entry, (GtkWidget*) (_tmp2_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("emblem-favorite", GTK_ICON_SIZE_MENU))));
-					_g_object_unref0 (_tmp2_);
-				} else {
-					GtkImage* _tmp3_;
-					gtk_image_menu_item_set_image (entry, (GtkWidget*) (_tmp3_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-playlist", GTK_ICON_SIZE_MENU))));
-					_g_object_unref0 (_tmp3_);
-				}
-				g_signal_connect_data ((GtkMenuItem*) entry, "activate", (GCallback) __lambda0__gtk_menu_item_activate, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
-				gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) entry));
-				item = mpd_data_get_next (item);
-				_g_object_unref0 (entry);
-				block1_data_unref (_data1_);
-			}
-			gtk_widget_show_all ((GtkWidget*) menu);
-			gtk_menu_popup (menu, NULL, NULL, NULL, NULL, (*event).button, (*event).time);
-			_g_object_unref0 (menu);
-			_mpd_data_free0 (item);
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean gmpc_favorites_button_enter_notify_event_callback (GmpcFavoritesButton* self, GmpcFavoritesButton* button, GdkEventCrossing* motion) {
-	gboolean result;
-	GdkPixbuf* pb2;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (button != NULL, FALSE);
-	pb2 = gdk_pixbuf_copy (self->priv->pb);
-	if (self->priv->fstate) {
-		colorshift_pixbuf (pb2, self->priv->pb, 10);
-	} else {
-		colorshift_pixbuf (pb2, self->priv->pb, -50);
-	}
-	gtk_image_set_from_pixbuf (self->priv->image, pb2);
-	result = FALSE;
-	_g_object_unref0 (pb2);
-	return result;
-}
-
-
-static gboolean gmpc_favorites_button_leave_notify_event_callback (GmpcFavoritesButton* self, GmpcFavoritesButton* button, GdkEventCrossing* motion) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (button != NULL, FALSE);
-	gmpc_favorites_button_update (self, favorites);
-	result = FALSE;
-	return result;
-}
-
-
-static void gmpc_favorites_button_update (GmpcFavoritesButton* self, GmpcFavoritesList* list) {
-	GdkPixbuf* pb2;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (list != NULL);
-	if (self->priv->song != NULL) {
-		self->priv->fstate = gmpc_favorites_list_is_favorite (favorites, self->priv->song->file);
-	} else {
-		gtk_widget_hide ((GtkWidget*) self);
-		return;
-	}
-	pb2 = gdk_pixbuf_copy (self->priv->pb);
-	if (self->priv->fstate) {
-		colorshift_pixbuf (pb2, self->priv->pb, 30);
-	} else {
-		colorshift_pixbuf (pb2, self->priv->pb, -80);
-	}
-	gtk_image_set_from_pixbuf (self->priv->image, pb2);
-	gtk_widget_show ((GtkWidget*) self->priv->image);
-	gtk_widget_show ((GtkWidget*) self);
-	_g_object_unref0 (pb2);
-}
-
-
-static gpointer _mpd_songDup0 (gpointer self) {
-	return self ? mpd_songDup (self) : NULL;
-}
-
-
-void gmpc_favorites_button_set_song (GmpcFavoritesButton* self, const mpd_Song* song) {
-	gboolean _tmp0_ = FALSE;
-	gboolean _tmp1_ = FALSE;
-	gboolean _tmp2_ = FALSE;
-	mpd_Song* _tmp3_;
-	g_return_if_fail (self != NULL);
-	if (self->priv->song == NULL) {
-		_tmp0_ = song == NULL;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		return;
-	}
-	if (self->priv->song != NULL) {
-		_tmp2_ = song != NULL;
-	} else {
-		_tmp2_ = FALSE;
-	}
-	if (_tmp2_) {
-		_tmp1_ = _vala_strcmp0 (self->priv->song->file, song->file) == 0;
-	} else {
-		_tmp1_ = FALSE;
-	}
-	if (_tmp1_) {
-		return;
-	}
-	self->priv->song = (_tmp3_ = _mpd_songDup0 (song), _mpd_freeSong0 (self->priv->song), _tmp3_);
-	gmpc_favorites_button_update (self, favorites);
-}
-
-
-GmpcFavoritesButton* gmpc_favorites_button_construct (GType object_type) {
-	GmpcFavoritesButton * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcFavoritesButton* gmpc_favorites_button_new (void) {
-	return gmpc_favorites_button_construct (GMPC_FAVORITES_TYPE_BUTTON);
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static void _gmpc_favorites_button_update_gmpc_favorites_list_updated (GmpcFavoritesList* _sender, gpointer self) {
-	gmpc_favorites_button_update (self, _sender);
-}
-
-
-static gboolean _gmpc_favorites_button_button_press_event_callback_gtk_widget_button_press_event (GmpcFavoritesButton* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_favorites_button_button_press_event_callback (self, _sender, event);
-}
-
-
-static gboolean _gmpc_favorites_button_enter_notify_event_callback_gtk_widget_enter_notify_event (GmpcFavoritesButton* _sender, GdkEventCrossing* event, gpointer self) {
-	return gmpc_favorites_button_enter_notify_event_callback (self, _sender, event);
-}
-
-
-static gboolean _gmpc_favorites_button_leave_notify_event_callback_gtk_widget_leave_notify_event (GmpcFavoritesButton* _sender, GdkEventCrossing* event, gpointer self) {
-	return gmpc_favorites_button_leave_notify_event_callback (self, _sender, event);
-}
-
-
-static GObject * gmpc_favorites_button_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcFavoritesButton * self;
-	GError * _inner_error_;
-	parent_class = G_OBJECT_CLASS (gmpc_favorites_button_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_FAVORITES_BUTTON (obj);
-	_inner_error_ = NULL;
-	{
-		GtkIconTheme* it;
-		GtkImage* _tmp3_;
-		gtk_widget_set_no_show_all ((GtkWidget*) self, TRUE);
-		gtk_event_box_set_visible_window ((GtkEventBox*) self, FALSE);
-		it = _g_object_ref0 (gtk_icon_theme_get_default ());
-		{
-			GdkPixbuf* _tmp0_;
-			GdkPixbuf* _tmp1_;
-			_tmp0_ = gtk_icon_theme_load_icon (it, "emblem-favorite", 24, 0, &_inner_error_);
-			if (_inner_error_ != NULL) {
-				goto __catch0_g_error;
-			}
-			self->priv->pb = (_tmp1_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (self->priv->pb), _tmp1_);
-		}
-		goto __finally0;
-		__catch0_g_error:
-		{
-			GError * e;
-			e = _inner_error_;
-			_inner_error_ = NULL;
-			{
-				fprintf (stdout, "error: %s\n", e->message);
-				_g_error_free0 (e);
-			}
-		}
-		__finally0:
-		if (_inner_error_ != NULL) {
-			_g_object_unref0 (it);
-			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-			g_clear_error (&_inner_error_);
-		}
-		if (favorites == NULL) {
-			GmpcFavoritesList* _tmp2_;
-			favorites = (_tmp2_ = gmpc_favorites_list_new (), _g_object_unref0 (favorites), _tmp2_);
-		} else {
-			g_object_ref ((GObject*) favorites);
-		}
-		g_signal_connect_object (favorites, "updated", (GCallback) _gmpc_favorites_button_update_gmpc_favorites_list_updated, self, 0);
-		self->priv->image = (_tmp3_ = g_object_ref_sink ((GtkImage*) gtk_image_new ()), _g_object_unref0 (self->priv->image), _tmp3_);
-		gmpc_favorites_button_update (self, favorites);
-		gtk_container_add ((GtkContainer*) self, (GtkWidget*) self->priv->image);
-		g_signal_connect_object ((GtkWidget*) self, "button-press-event", (GCallback) _gmpc_favorites_button_button_press_event_callback_gtk_widget_button_press_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self, "enter-notify-event", (GCallback) _gmpc_favorites_button_enter_notify_event_callback_gtk_widget_enter_notify_event, self, 0);
-		g_signal_connect_object ((GtkWidget*) self, "leave-notify-event", (GCallback) _gmpc_favorites_button_leave_notify_event_callback_gtk_widget_leave_notify_event, self, 0);
-		_g_object_unref0 (it);
-	}
-	return obj;
-}
-
-
-static void gmpc_favorites_button_class_init (GmpcFavoritesButtonClass * klass) {
-	gmpc_favorites_button_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcFavoritesButtonPrivate));
-	G_OBJECT_CLASS (klass)->constructor = gmpc_favorites_button_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_favorites_button_finalize;
-}
-
-
-static void gmpc_favorites_button_instance_init (GmpcFavoritesButton * self) {
-	self->priv = GMPC_FAVORITES_BUTTON_GET_PRIVATE (self);
-	self->priv->fstate = FALSE;
-	self->priv->pb = NULL;
-}
-
-
-static void gmpc_favorites_button_finalize (GObject* obj) {
-	GmpcFavoritesButton * self;
-	self = GMPC_FAVORITES_BUTTON (obj);
-	{
-		if (favorites != NULL) {
-			g_object_unref ((GObject*) favorites);
-		}
-	}
-	_mpd_freeSong0 (self->priv->song);
-	_g_object_unref0 (self->priv->image);
-	_g_object_unref0 (self->priv->pb);
-	G_OBJECT_CLASS (gmpc_favorites_button_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_favorites_button_get_type (void) {
-	static GType gmpc_favorites_button_type_id = 0;
-	if (gmpc_favorites_button_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcFavoritesButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_favorites_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcFavoritesButton), 0, (GInstanceInitFunc) gmpc_favorites_button_instance_init, NULL };
-		gmpc_favorites_button_type_id = g_type_register_static (GTK_TYPE_EVENT_BOX, "GmpcFavoritesButton", &g_define_type_info, 0);
-	}
-	return gmpc_favorites_button_type_id;
-}
-
-
-static int _vala_strcmp0 (const char * str1, const char * str2) {
-	if (str1 == NULL) {
-		return -(str1 != str2);
-	}
-	if (str2 == NULL) {
-		return str1 != str2;
-	}
-	return strcmp (str1, str2);
-}
-
-
-
-
diff --git a/src/vala/gmpc-liststore-sort.c b/src/vala/gmpc-liststore-sort.c
deleted file mode 100644
index ee16a9d..0000000
--- a/src/vala/gmpc-liststore-sort.c
+++ /dev/null
@@ -1,187 +0,0 @@
-/* gmpc-liststore-sort.c generated by valac, the Vala compiler
- * generated from gmpc-liststore-sort.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include "gmpc-extras.h"
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _gtk_tree_path_free0(var) ((var == NULL) ? NULL : (var = (gtk_tree_path_free (var), NULL)))
-
-
-static gpointer gmpc_liststore_sort_parent_class = NULL;
-static GtkTreeDragSourceIface* gmpc_liststore_sort_gtk_tree_drag_source_parent_iface = NULL;
-static GtkTreeDragDestIface* gmpc_liststore_sort_gtk_tree_drag_dest_parent_iface = NULL;
-
-enum  {
-	GMPC_LISTSTORE_SORT_DUMMY_PROPERTY
-};
-#define GMPC_LISTSTORE_SORT_use_transition TRUE
-static gboolean gmpc_liststore_sort_real_row_draggable (GtkTreeDragSource* base, GtkTreePath* path);
-static gboolean gmpc_liststore_sort_real_drag_data_get (GtkTreeDragSource* base, GtkTreePath* path, GtkSelectionData* selection_data);
-static gboolean gmpc_liststore_sort_real_drag_data_delete (GtkTreeDragSource* base, GtkTreePath* path);
-static gboolean gmpc_liststore_sort_real_drag_data_received (GtkTreeDragDest* base, GtkTreePath* dest, GtkSelectionData* selection_data);
-
-
-
-static gboolean gmpc_liststore_sort_real_row_draggable (GtkTreeDragSource* base, GtkTreePath* path) {
-	GmpcListstoreSort * self;
-	gboolean result;
-	self = (GmpcListstoreSort*) base;
-	g_return_val_if_fail (path != NULL, FALSE);
-	result = TRUE;
-	return result;
-}
-
-
-static gboolean gmpc_liststore_sort_real_drag_data_get (GtkTreeDragSource* base, GtkTreePath* path, GtkSelectionData* selection_data) {
-	GmpcListstoreSort * self;
-	gboolean result;
-	self = (GmpcListstoreSort*) base;
-	g_return_val_if_fail (path != NULL, FALSE);
-	g_return_val_if_fail (selection_data != NULL, FALSE);
-	result = FALSE;
-	return result;
-}
-
-
-static gboolean gmpc_liststore_sort_real_drag_data_delete (GtkTreeDragSource* base, GtkTreePath* path) {
-	GmpcListstoreSort * self;
-	gboolean result;
-	self = (GmpcListstoreSort*) base;
-	g_return_val_if_fail (path != NULL, FALSE);
-	result = TRUE;
-	return result;
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static gpointer _gtk_tree_path_copy0 (gpointer self) {
-	return self ? gtk_tree_path_copy (self) : NULL;
-}
-
-
-static gboolean gmpc_liststore_sort_real_drag_data_received (GtkTreeDragDest* base, GtkTreePath* dest, GtkSelectionData* selection_data) {
-	GmpcListstoreSort * self;
-	gboolean result;
-	GtkTreeModel* model;
-	GtkTreePath* path;
-	GtkTreePath* _tmp5_;
-	gboolean _tmp4_;
-	GtkTreePath* _tmp3_ = NULL;
-	GtkTreeModel* _tmp2_;
-	gboolean _tmp1_;
-	GtkTreeModel* _tmp0_ = NULL;
-	self = (GmpcListstoreSort*) base;
-	g_return_val_if_fail (dest != NULL, FALSE);
-	g_return_val_if_fail (selection_data != NULL, FALSE);
-	model = NULL;
-	path = NULL;
-	if (dest == NULL) {
-		result = FALSE;
-		_g_object_unref0 (model);
-		_gtk_tree_path_free0 (path);
-		return result;
-	}
-	if ((_tmp4_ = (_tmp1_ = gtk_tree_get_row_drag_data (selection_data, &_tmp0_, &_tmp3_), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_), path = (_tmp5_ = _gtk_tree_path_copy0 (_tmp3_), _gtk_tree_path_free0 (path), _tmp5_), _tmp4_)) {
-		GtkTreeIter dest_iter = {0};
-		GtkTreeIter source_iter = {0};
-		gboolean dest_v;
-		gboolean source_v;
-		dest_v = gtk_tree_model_get_iter (model, &dest_iter, dest);
-		source_v = gtk_tree_model_get_iter (model, &source_iter, path);
-		if (source_v) {
-			if (dest_v) {
-				gtk_list_store_move_before ((GtkListStore*) self, &source_iter, &dest_iter);
-			} else {
-				gtk_list_store_move_before ((GtkListStore*) self, &source_iter, NULL);
-			}
-		}
-		result = TRUE;
-		_g_object_unref0 (model);
-		_gtk_tree_path_free0 (path);
-		return result;
-	}
-	result = FALSE;
-	_g_object_unref0 (model);
-	_gtk_tree_path_free0 (path);
-	return result;
-}
-
-
-GmpcListstoreSort* gmpc_liststore_sort_construct (GType object_type) {
-	GmpcListstoreSort * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcListstoreSort* gmpc_liststore_sort_new (void) {
-	return gmpc_liststore_sort_construct (GMPC_LISTSTORE_TYPE_SORT);
-}
-
-
-static void gmpc_liststore_sort_class_init (GmpcListstoreSortClass * klass) {
-	gmpc_liststore_sort_parent_class = g_type_class_peek_parent (klass);
-}
-
-
-static void gmpc_liststore_sort_gtk_tree_drag_source_interface_init (GtkTreeDragSourceIface * iface) {
-	gmpc_liststore_sort_gtk_tree_drag_source_parent_iface = g_type_interface_peek_parent (iface);
-	iface->row_draggable = gmpc_liststore_sort_real_row_draggable;
-	iface->drag_data_get = gmpc_liststore_sort_real_drag_data_get;
-	iface->drag_data_delete = gmpc_liststore_sort_real_drag_data_delete;
-}
-
-
-static void gmpc_liststore_sort_gtk_tree_drag_dest_interface_init (GtkTreeDragDestIface * iface) {
-	gmpc_liststore_sort_gtk_tree_drag_dest_parent_iface = g_type_interface_peek_parent (iface);
-	iface->drag_data_received = gmpc_liststore_sort_real_drag_data_received;
-}
-
-
-static void gmpc_liststore_sort_instance_init (GmpcListstoreSort * self) {
-}
-
-
-GType gmpc_liststore_sort_get_type (void) {
-	static GType gmpc_liststore_sort_type_id = 0;
-	if (gmpc_liststore_sort_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcListstoreSortClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_liststore_sort_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcListstoreSort), 0, (GInstanceInitFunc) gmpc_liststore_sort_instance_init, NULL };
-		static const GInterfaceInfo gtk_tree_drag_source_info = { (GInterfaceInitFunc) gmpc_liststore_sort_gtk_tree_drag_source_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
-		static const GInterfaceInfo gtk_tree_drag_dest_info = { (GInterfaceInitFunc) gmpc_liststore_sort_gtk_tree_drag_dest_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
-		gmpc_liststore_sort_type_id = g_type_register_static (GTK_TYPE_LIST_STORE, "GmpcListstoreSort", &g_define_type_info, 0);
-		g_type_add_interface_static (gmpc_liststore_sort_type_id, GTK_TYPE_TREE_DRAG_SOURCE, &gtk_tree_drag_source_info);
-		g_type_add_interface_static (gmpc_liststore_sort_type_id, GTK_TYPE_TREE_DRAG_DEST, &gtk_tree_drag_dest_info);
-	}
-	return gmpc_liststore_sort_type_id;
-}
-
-
-
-
diff --git a/src/vala/gmpc-metadata-prefetcher.c b/src/vala/gmpc-metadata-prefetcher.c
deleted file mode 100644
index e304dbb..0000000
--- a/src/vala/gmpc-metadata-prefetcher.c
+++ /dev/null
@@ -1,162 +0,0 @@
-/* gmpc-metadata-prefetcher.c generated by valac, the Vala compiler
- * generated from gmpc-metadata-prefetcher.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include "gmpc-extras.h"
-#include <stdlib.h>
-#include <string.h>
-#include <libmpd/libmpd.h>
-#include <libmpd/libmpdclient.h>
-#include <metadata.h>
-#include <main.h>
-#include <gmpc-meta-watcher.h>
-
-#define _meta_data_free0(var) ((var == NULL) ? NULL : (var = (meta_data_free (var), NULL)))
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-
-
-static gpointer gmpc_plugin_metadata_prefetcher_parent_class = NULL;
-
-#define use_transition_mpf TRUE
-enum  {
-	GMPC_PLUGIN_METADATA_PREFETCHER_DUMMY_PROPERTY
-};
-static gint* gmpc_plugin_metadata_prefetcher_real_get_version (GmpcPluginBase* base, int* result_length1);
-static const char* gmpc_plugin_metadata_prefetcher_real_get_name (GmpcPluginBase* base);
-static void gmpc_plugin_metadata_prefetcher_status_changed (GmpcPluginMetadataPrefetcher* self, GmpcConnection* gmpcconn, MpdObj* server, ChangedStatusType what);
-static void _gmpc_plugin_metadata_prefetcher_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self);
-static GObject * gmpc_plugin_metadata_prefetcher_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-
-
-
-static gint* gmpc_plugin_metadata_prefetcher_real_get_version (GmpcPluginBase* base, int* result_length1) {
-	GmpcPluginMetadataPrefetcher * self;
-	gint* result;
-	gint* _tmp0_;
-	self = (GmpcPluginMetadataPrefetcher*) base;
-	result = (_tmp0_ = GMPC_PLUGIN_METADATA_PREFETCHER_version, *result_length1 = G_N_ELEMENTS (GMPC_PLUGIN_METADATA_PREFETCHER_version), _tmp0_);
-	return result;
-}
-
-
-static const char* gmpc_plugin_metadata_prefetcher_real_get_name (GmpcPluginBase* base) {
-	GmpcPluginMetadataPrefetcher * self;
-	const char* result;
-	self = (GmpcPluginMetadataPrefetcher*) base;
-	result = "Metadata pre-fetcher";
-	return result;
-}
-
-
-static void gmpc_plugin_metadata_prefetcher_status_changed (GmpcPluginMetadataPrefetcher* self, GmpcConnection* gmpcconn, MpdObj* server, ChangedStatusType what) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (gmpcconn != NULL);
-	g_return_if_fail (server != NULL);
-	if (!gmpc_plugin_base_get_enabled ((GmpcPluginBase*) self)) {
-		return;
-	}
-	if ((what & MPD_CST_NEXTSONG) == MPD_CST_NEXTSONG) {
-		gint next_song_id;
-		next_song_id = mpd_player_get_next_song_id (server);
-		if (next_song_id > 0) {
-			mpd_Song* song;
-			song = mpd_playlist_get_song (server, next_song_id);
-			if (song != NULL) {
-				MetaData* met;
-				MetaDataResult md_result = 0;
-				MetaData* _tmp2_;
-				MetaDataResult _tmp1_;
-				MetaData* _tmp0_ = NULL;
-				MetaData* _tmp5_;
-				MetaDataResult _tmp4_;
-				MetaData* _tmp3_ = NULL;
-				met = NULL;
-				g_log ("MetadataPrefetcher", G_LOG_LEVEL_DEBUG, "gmpc-metadata-prefetcher.vala:58: Pre-fetching %s", song->file);
-				md_result = (_tmp1_ = gmpc_meta_watcher_get_meta_path (gmw, song, META_ARTIST_ART, &_tmp0_), met = (_tmp2_ = _tmp0_, _meta_data_free0 (met), _tmp2_), _tmp1_);
-				md_result = (_tmp4_ = gmpc_meta_watcher_get_meta_path (gmw, song, META_ALBUM_ART, &_tmp3_), met = (_tmp5_ = _tmp3_, _meta_data_free0 (met), _tmp5_), _tmp4_);
-				_meta_data_free0 (met);
-			}
-			_mpd_freeSong0 (song);
-		}
-	}
-}
-
-
-GmpcPluginMetadataPrefetcher* gmpc_plugin_metadata_prefetcher_construct (GType object_type) {
-	GmpcPluginMetadataPrefetcher * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcPluginMetadataPrefetcher* gmpc_plugin_metadata_prefetcher_new (void) {
-	return gmpc_plugin_metadata_prefetcher_construct (GMPC_PLUGIN_TYPE_METADATA_PREFETCHER);
-}
-
-
-static void _gmpc_plugin_metadata_prefetcher_status_changed_gmpc_connection_status_changed (GmpcConnection* _sender, MpdObj* mi, ChangedStatusType what, gpointer self) {
-	gmpc_plugin_metadata_prefetcher_status_changed (self, _sender, mi, what);
-}
-
-
-static GObject * gmpc_plugin_metadata_prefetcher_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcPluginMetadataPrefetcher * self;
-	parent_class = G_OBJECT_CLASS (gmpc_plugin_metadata_prefetcher_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_PLUGIN_METADATA_PREFETCHER (obj);
-	{
-		((GmpcPluginBase*) self)->plugin_type = 8 + 4;
-		g_signal_connect_object (gmpcconn, "status-changed", (GCallback) _gmpc_plugin_metadata_prefetcher_status_changed_gmpc_connection_status_changed, self, 0);
-	}
-	return obj;
-}
-
-
-static void gmpc_plugin_metadata_prefetcher_class_init (GmpcPluginMetadataPrefetcherClass * klass) {
-	gmpc_plugin_metadata_prefetcher_parent_class = g_type_class_peek_parent (klass);
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_version = gmpc_plugin_metadata_prefetcher_real_get_version;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_name = gmpc_plugin_metadata_prefetcher_real_get_name;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_plugin_metadata_prefetcher_constructor;
-}
-
-
-static void gmpc_plugin_metadata_prefetcher_instance_init (GmpcPluginMetadataPrefetcher * self) {
-}
-
-
-GType gmpc_plugin_metadata_prefetcher_get_type (void) {
-	static GType gmpc_plugin_metadata_prefetcher_type_id = 0;
-	if (gmpc_plugin_metadata_prefetcher_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginMetadataPrefetcherClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_plugin_metadata_prefetcher_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcPluginMetadataPrefetcher), 0, (GInstanceInitFunc) gmpc_plugin_metadata_prefetcher_instance_init, NULL };
-		gmpc_plugin_metadata_prefetcher_type_id = g_type_register_static (GMPC_PLUGIN_TYPE_BASE, "GmpcPluginMetadataPrefetcher", &g_define_type_info, 0);
-	}
-	return gmpc_plugin_metadata_prefetcher_type_id;
-}
-
-
-
-
diff --git a/src/vala/gmpc-mpddata-treeview-tooltip.c b/src/vala/gmpc-mpddata-treeview-tooltip.c
deleted file mode 100644
index 8249802..0000000
--- a/src/vala/gmpc-mpddata-treeview-tooltip.c
+++ /dev/null
@@ -1,371 +0,0 @@
-/* gmpc-mpddata-treeview-tooltip.c generated by valac, the Vala compiler
- * generated from gmpc-mpddata-treeview-tooltip.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include "gmpc-extras.h"
-#include <metadata.h>
-#include <plugin.h>
-#include <config1.h>
-#include <libmpd/libmpdclient.h>
-#include <libmpd/libmpd.h>
-#include <misc.h>
-#include <main.h>
-#include <gmpc-meta-watcher.h>
-#include <gdk-pixbuf/gdk-pixdata.h>
-
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _gtk_tree_path_free0(var) ((var == NULL) ? NULL : (var = (gtk_tree_path_free (var), NULL)))
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-#define _meta_data_free0(var) ((var == NULL) ? NULL : (var = (meta_data_free (var), NULL)))
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-
-struct _GmpcMpdDataTreeviewTooltipPrivate {
-	GtkTreeView* par_widget;
-	GtkImage* image;
-	char* checksum;
-};
-
-
-static gpointer gmpc_mpd_data_treeview_tooltip_parent_class = NULL;
-
-#define use_transition_mtt TRUE
-#define some_unique_name_mtt VERSION
-#define GMPC_MPD_DATA_TREEVIEW_TOOLTIP_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_MPD_DATA_TREEVIEW_TYPE_TOOLTIP, GmpcMpdDataTreeviewTooltipPrivate))
-enum  {
-	GMPC_MPD_DATA_TREEVIEW_TOOLTIP_DUMMY_PROPERTY
-};
-static void gmpc_mpd_data_treeview_tooltip_metadata_changed (GmpcMpdDataTreeviewTooltip* self, GmpcMetaWatcher* gmw2, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met);
-static gboolean gmpc_mpd_data_treeview_tooltip_query_tooltip_callback (GmpcMpdDataTreeviewTooltip* self, gint x, gint y, gboolean keyboard_tip, GtkTooltip* tooltip);
-static gboolean _gmpc_mpd_data_treeview_tooltip_query_tooltip_callback_gtk_widget_query_tooltip (GtkWidget* _sender, gint x, gint y, gboolean keyboard_tooltip, GtkTooltip* tooltip, gpointer self);
-static void _gmpc_mpd_data_treeview_tooltip_metadata_changed_gmpc_meta_watcher_data_changed (GmpcMetaWatcher* _sender, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met, gpointer self);
-static GObject * gmpc_mpd_data_treeview_tooltip_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_mpd_data_treeview_tooltip_finalize (GObject* obj);
-static int _vala_strcmp0 (const char * str1, const char * str2);
-
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static gpointer _gtk_tree_path_copy0 (gpointer self) {
-	return self ? gtk_tree_path_copy (self) : NULL;
-}
-
-
-static gboolean gmpc_mpd_data_treeview_tooltip_query_tooltip_callback (GmpcMpdDataTreeviewTooltip* self, gint x, gint y, gboolean keyboard_tip, GtkTooltip* tooltip) {
-	gboolean result;
-	char* tag;
-	gint row_type;
-	GtkTreePath* path;
-	GtkTreeIter iter = {0};
-	GtkTreeModel* model;
-	gboolean _tmp0_ = FALSE;
-	GtkTreePath* _tmp7_;
-	gboolean _tmp6_;
-	GtkTreePath* _tmp5_ = NULL;
-	GtkTreeModel* _tmp4_;
-	gboolean _tmp3_;
-	GtkTreeModel* _tmp2_ = NULL;
-	mpd_Song* song;
-	char* new_check;
-	gboolean _tmp14_ = FALSE;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (tooltip != NULL, FALSE);
-	tag = NULL;
-	row_type = 0;
-	path = NULL;
-	model = _g_object_ref0 (gtk_tree_view_get_model (self->priv->par_widget));
-	if (cfg_get_single_value_as_int_with_default (config, "GmpcTreeView", "show-tooltip", 1) != 1) {
-		result = FALSE;
-		_g_free0 (tag);
-		_gtk_tree_path_free0 (path);
-		_g_object_unref0 (model);
-		return result;
-	}
-	if (self->mtype != META_ARTIST_ART) {
-		_tmp0_ = self->mtype != META_ALBUM_ART;
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		char* _tmp1_;
-		self->priv->checksum = (_tmp1_ = NULL, _g_free0 (self->priv->checksum), _tmp1_);
-		result = FALSE;
-		_g_free0 (tag);
-		_gtk_tree_path_free0 (path);
-		_g_object_unref0 (model);
-		return result;
-	}
-	if (!(_tmp6_ = (_tmp3_ = gtk_tree_view_get_tooltip_context (self->priv->par_widget, &x, &y, keyboard_tip, &_tmp2_, &_tmp5_, &iter), model = (_tmp4_ = _g_object_ref0 (_tmp2_), _g_object_unref0 (model), _tmp4_), _tmp3_), path = (_tmp7_ = _gtk_tree_path_copy0 (_tmp5_), _gtk_tree_path_free0 (path), _tmp7_), _tmp6_)) {
-		char* _tmp8_;
-		self->priv->checksum = (_tmp8_ = NULL, _g_free0 (self->priv->checksum), _tmp8_);
-		result = FALSE;
-		_g_free0 (tag);
-		_gtk_tree_path_free0 (path);
-		_g_object_unref0 (model);
-		return result;
-	}
-	song = mpd_newSong ();
-	gtk_tree_model_get (model, &iter, 26, &row_type, -1);
-	if (row_type == MPD_DATA_TYPE_SONG) {
-		char* album;
-		char* _tmp9_;
-		char* _tmp10_;
-		album = NULL;
-		gtk_tree_model_get (model, &iter, 5, &tag, 6, &album, -1);
-		song->artist = (_tmp9_ = g_strdup (tag), _g_free0 (song->artist), _tmp9_);
-		song->album = (_tmp10_ = g_strdup (album), _g_free0 (song->album), _tmp10_);
-		_g_free0 (album);
-	} else {
-		if (row_type == MPD_DATA_TYPE_TAG) {
-			if (self->mtype == META_ARTIST_ART) {
-				char* _tmp11_;
-				gtk_tree_model_get (model, &iter, 7, &tag, -1);
-				song->artist = (_tmp11_ = g_strdup (tag), _g_free0 (song->artist), _tmp11_);
-			} else {
-				if (self->mtype == META_ALBUM_ART) {
-					char* _tmp12_;
-					char* _tmp13_;
-					gtk_tree_model_get (model, &iter, 7, &tag, -1);
-					song->artist = (_tmp12_ = g_strdup (self->request_artist), _g_free0 (song->artist), _tmp12_);
-					song->album = (_tmp13_ = g_strdup (tag), _g_free0 (song->album), _tmp13_);
-				}
-			}
-		}
-	}
-	new_check = mpd_song_checksum (song);
-	if (_vala_strcmp0 (new_check, self->priv->checksum) != 0) {
-		_tmp14_ = self->priv->checksum != NULL;
-	} else {
-		_tmp14_ = FALSE;
-	}
-	if (_tmp14_) {
-		char* _tmp15_;
-		self->priv->checksum = (_tmp15_ = NULL, _g_free0 (self->priv->checksum), _tmp15_);
-		result = FALSE;
-		_g_free0 (tag);
-		_gtk_tree_path_free0 (path);
-		_g_object_unref0 (model);
-		_mpd_freeSong0 (song);
-		_g_free0 (new_check);
-		return result;
-	}
-	if (_vala_strcmp0 (new_check, self->priv->checksum) != 0) {
-		char* _tmp16_;
-		MetaData* met;
-		MetaData* _tmp19_;
-		MetaDataResult _tmp18_;
-		MetaData* _tmp17_ = NULL;
-		MetaDataResult _result_;
-		self->priv->checksum = (_tmp16_ = g_strdup (new_check), _g_free0 (self->priv->checksum), _tmp16_);
-		met = NULL;
-		_result_ = (_tmp18_ = gmpc_meta_watcher_get_meta_path (gmw, song, self->mtype, &_tmp17_), met = (_tmp19_ = _tmp17_, _meta_data_free0 (met), _tmp19_), _tmp18_);
-		gmpc_mpd_data_treeview_tooltip_metadata_changed (self, gmw, song, self->mtype, _result_, met);
-		_meta_data_free0 (met);
-	}
-	if (gtk_image_get_storage_type (self->priv->image) == GTK_IMAGE_EMPTY) {
-		result = FALSE;
-		_g_free0 (tag);
-		_gtk_tree_path_free0 (path);
-		_g_object_unref0 (model);
-		_mpd_freeSong0 (song);
-		_g_free0 (new_check);
-		return result;
-	}
-	result = TRUE;
-	_g_free0 (tag);
-	_gtk_tree_path_free0 (path);
-	_g_object_unref0 (model);
-	_mpd_freeSong0 (song);
-	_g_free0 (new_check);
-	return result;
-}
-
-
-static void gmpc_mpd_data_treeview_tooltip_metadata_changed (GmpcMpdDataTreeviewTooltip* self, GmpcMetaWatcher* gmw2, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met) {
-	GError * _inner_error_;
-	char* _tmp0_;
-	gboolean _tmp1_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (gmw2 != NULL);
-	g_return_if_fail (song != NULL);
-	_inner_error_ = NULL;
-	if (type != self->mtype) {
-		return;
-	}
-	if ((_tmp1_ = _vala_strcmp0 (self->priv->checksum, _tmp0_ = mpd_song_checksum (song)) != 0, _g_free0 (_tmp0_), _tmp1_)) {
-		return;
-	}
-	if (_result_ == META_DATA_UNAVAILABLE) {
-		gtk_image_clear (self->priv->image);
-	} else {
-		if (_result_ == META_DATA_FETCHING) {
-			gtk_image_clear (self->priv->image);
-		} else {
-			if (_result_ == META_DATA_AVAILABLE) {
-				if (met->content_type == META_DATA_CONTENT_URI) {
-					{
-						GdkPixbuf* pb;
-						pb = gdk_pixbuf_new_from_file_at_scale (meta_data_get_uri (met), 150, 150, TRUE, &_inner_error_);
-						if (_inner_error_ != NULL) {
-							goto __catch7_g_error;
-						}
-						gtk_image_set_from_pixbuf (self->priv->image, pb);
-						_g_object_unref0 (pb);
-					}
-					goto __finally7;
-					__catch7_g_error:
-					{
-						GError * e;
-						e = _inner_error_;
-						_inner_error_ = NULL;
-						{
-							gtk_image_clear (self->priv->image);
-							_g_error_free0 (e);
-						}
-					}
-					__finally7:
-					if (_inner_error_ != NULL) {
-						g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-						g_clear_error (&_inner_error_);
-						return;
-					}
-				} else {
-					gtk_image_clear (self->priv->image);
-				}
-			}
-		}
-	}
-}
-
-
-static gboolean _gmpc_mpd_data_treeview_tooltip_query_tooltip_callback_gtk_widget_query_tooltip (GtkWidget* _sender, gint x, gint y, gboolean keyboard_tooltip, GtkTooltip* tooltip, gpointer self) {
-	return gmpc_mpd_data_treeview_tooltip_query_tooltip_callback (self, x, y, keyboard_tooltip, tooltip);
-}
-
-
-static void _gmpc_mpd_data_treeview_tooltip_metadata_changed_gmpc_meta_watcher_data_changed (GmpcMetaWatcher* _sender, const mpd_Song* song, MetaDataType type, MetaDataResult _result_, const MetaData* met, gpointer self) {
-	gmpc_mpd_data_treeview_tooltip_metadata_changed (self, _sender, song, type, _result_, met);
-}
-
-
-GmpcMpdDataTreeviewTooltip* gmpc_mpd_data_treeview_tooltip_construct (GType object_type, GtkTreeView* pw, MetaDataType type) {
-	GmpcMpdDataTreeviewTooltip * self;
-	GtkTreeView* _tmp0_;
-	GtkImage* _tmp1_;
-	g_return_val_if_fail (pw != NULL, NULL);
-	self = g_object_newv (object_type, 0, NULL);
-	gtk_window_set_resizable ((GtkWindow*) self, FALSE);
-	self->priv->par_widget = (_tmp0_ = _g_object_ref0 (pw), _g_object_unref0 (self->priv->par_widget), _tmp0_);
-	g_signal_connect_object ((GtkWidget*) pw, "query-tooltip", (GCallback) _gmpc_mpd_data_treeview_tooltip_query_tooltip_callback_gtk_widget_query_tooltip, self, 0);
-	gtk_widget_set_tooltip_window ((GtkWidget*) self->priv->par_widget, (GtkWindow*) self);
-	self->priv->image = (_tmp1_ = g_object_ref_sink ((GtkImage*) gtk_image_new ()), _g_object_unref0 (self->priv->image), _tmp1_);
-	gtk_widget_show ((GtkWidget*) self->priv->image);
-	self->mtype = type;
-	gtk_container_add ((GtkContainer*) self, (GtkWidget*) self->priv->image);
-	gtk_container_set_border_width ((GtkContainer*) self, (guint) 2);
-	gtk_widget_modify_bg ((GtkWidget*) self, GTK_STATE_NORMAL, &gtk_widget_get_style ((GtkWidget*) pw)->black);
-	g_signal_connect_object (gmw, "data-changed", (GCallback) _gmpc_mpd_data_treeview_tooltip_metadata_changed_gmpc_meta_watcher_data_changed, self, 0);
-	return self;
-}
-
-
-GmpcMpdDataTreeviewTooltip* gmpc_mpd_data_treeview_tooltip_new (GtkTreeView* pw, MetaDataType type) {
-	return gmpc_mpd_data_treeview_tooltip_construct (GMPC_MPD_DATA_TREEVIEW_TYPE_TOOLTIP, pw, type);
-}
-
-
-static GObject * gmpc_mpd_data_treeview_tooltip_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcMpdDataTreeviewTooltip * self;
-	parent_class = G_OBJECT_CLASS (gmpc_mpd_data_treeview_tooltip_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_MPD_DATA_TREEVIEW_TOOLTIP (obj);
-	{
-		g_object_set ((GtkWindow*) self, "type", GTK_WINDOW_POPUP, NULL);
-	}
-	return obj;
-}
-
-
-static void gmpc_mpd_data_treeview_tooltip_class_init (GmpcMpdDataTreeviewTooltipClass * klass) {
-	gmpc_mpd_data_treeview_tooltip_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcMpdDataTreeviewTooltipPrivate));
-	G_OBJECT_CLASS (klass)->constructor = gmpc_mpd_data_treeview_tooltip_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_mpd_data_treeview_tooltip_finalize;
-}
-
-
-static void gmpc_mpd_data_treeview_tooltip_instance_init (GmpcMpdDataTreeviewTooltip * self) {
-	self->priv = GMPC_MPD_DATA_TREEVIEW_TOOLTIP_GET_PRIVATE (self);
-	self->priv->par_widget = NULL;
-	self->priv->image = NULL;
-	self->mtype = META_ARTIST_ART;
-	self->request_artist = NULL;
-	self->priv->checksum = NULL;
-}
-
-
-static void gmpc_mpd_data_treeview_tooltip_finalize (GObject* obj) {
-	GmpcMpdDataTreeviewTooltip * self;
-	self = GMPC_MPD_DATA_TREEVIEW_TOOLTIP (obj);
-	_g_object_unref0 (self->priv->par_widget);
-	_g_object_unref0 (self->priv->image);
-	_g_free0 (self->request_artist);
-	_g_free0 (self->priv->checksum);
-	G_OBJECT_CLASS (gmpc_mpd_data_treeview_tooltip_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_mpd_data_treeview_tooltip_get_type (void) {
-	static GType gmpc_mpd_data_treeview_tooltip_type_id = 0;
-	if (gmpc_mpd_data_treeview_tooltip_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcMpdDataTreeviewTooltipClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_mpd_data_treeview_tooltip_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcMpdDataTreeviewTooltip), 0, (GInstanceInitFunc) gmpc_mpd_data_treeview_tooltip_instance_init, NULL };
-		gmpc_mpd_data_treeview_tooltip_type_id = g_type_register_static (GTK_TYPE_WINDOW, "GmpcMpdDataTreeviewTooltip", &g_define_type_info, 0);
-	}
-	return gmpc_mpd_data_treeview_tooltip_type_id;
-}
-
-
-static int _vala_strcmp0 (const char * str1, const char * str2) {
-	if (str1 == NULL) {
-		return -(str1 != str2);
-	}
-	if (str2 == NULL) {
-		return str1 != str2;
-	}
-	return strcmp (str1, str2);
-}
-
-
-
-
diff --git a/src/vala/gmpc-paned-size-group.c b/src/vala/gmpc-paned-size-group.c
deleted file mode 100644
index 67f83e2..0000000
--- a/src/vala/gmpc-paned-size-group.c
+++ /dev/null
@@ -1,172 +0,0 @@
-/* gmpc-paned-size-group.c generated by valac, the Vala compiler
- * generated from gmpc-paned-size-group.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include "gmpc-extras.h"
-#include <gtk/gtk.h>
-#include <plugin.h>
-#include <config1.h>
-#include <gdk/gdk.h>
-
-#define _g_list_free0(var) ((var == NULL) ? NULL : (var = (g_list_free (var), NULL)))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-
-struct _GmpcPanedSizeGroupPrivate {
-	GList* list;
-	gint position;
-	gboolean block_changed_callback;
-};
-
-
-static gpointer gmpc_paned_size_group_parent_class = NULL;
-
-#define GMPC_PANED_SIZE_GROUP_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_TYPE_PANED_SIZE_GROUP, GmpcPanedSizeGroupPrivate))
-enum  {
-	GMPC_PANED_SIZE_GROUP_DUMMY_PROPERTY
-};
-static gboolean gmpc_paned_size_group_child_destroy_event (GmpcPanedSizeGroup* self, GtkWidget* paned, GdkEvent* event);
-static void gmpc_paned_size_group_child_position_changed (GmpcPanedSizeGroup* self, GObject* paned, GParamSpec* spec);
-static void _gmpc_paned_size_group_child_position_changed_g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self);
-static gboolean _gmpc_paned_size_group_child_destroy_event_gtk_widget_destroy_event (GtkWidget* _sender, GdkEvent* event, gpointer self);
-static void gmpc_paned_size_group_finalize (GObject* obj);
-
-
-
-GmpcPanedSizeGroup* gmpc_paned_size_group_construct (GType object_type) {
-	GmpcPanedSizeGroup * self;
-	self = (GmpcPanedSizeGroup*) g_object_new (object_type, NULL);
-	return self;
-}
-
-
-GmpcPanedSizeGroup* gmpc_paned_size_group_new (void) {
-	return gmpc_paned_size_group_construct (GMPC_TYPE_PANED_SIZE_GROUP);
-}
-
-
-static gboolean gmpc_paned_size_group_child_destroy_event (GmpcPanedSizeGroup* self, GtkWidget* paned, GdkEvent* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (paned != NULL, FALSE);
-	g_return_val_if_fail (event != NULL, FALSE);
-	self->priv->list = g_list_remove (self->priv->list, GTK_PANED (paned));
-	result = FALSE;
-	return result;
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static void gmpc_paned_size_group_child_position_changed (GmpcPanedSizeGroup* self, GObject* paned, GParamSpec* spec) {
-	GtkPaned* pane;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (paned != NULL);
-	g_return_if_fail (spec != NULL);
-	if (self->priv->block_changed_callback) {
-		return;
-	}
-	self->priv->block_changed_callback = TRUE;
-	pane = _g_object_ref0 (GTK_PANED (paned));
-	self->priv->position = gtk_paned_get_position (pane);
-	{
-		GList* p_collection;
-		GList* p_it;
-		p_collection = self->priv->list;
-		for (p_it = p_collection; p_it != NULL; p_it = p_it->next) {
-			GtkPaned* p;
-			p = (GtkPaned*) p_it->data;
-			{
-				if (G_OBJECT (p) != paned) {
-					gtk_paned_set_position (p, self->priv->position);
-				}
-			}
-		}
-	}
-	self->priv->block_changed_callback = FALSE;
-	_g_object_unref0 (pane);
-}
-
-
-static void _gmpc_paned_size_group_child_position_changed_g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self) {
-	gmpc_paned_size_group_child_position_changed (self, _sender, pspec);
-}
-
-
-static gboolean _gmpc_paned_size_group_child_destroy_event_gtk_widget_destroy_event (GtkWidget* _sender, GdkEvent* event, gpointer self) {
-	return gmpc_paned_size_group_child_destroy_event (self, _sender, event);
-}
-
-
-void gmpc_paned_size_group_add_paned (GmpcPanedSizeGroup* self, GtkPaned* paned) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (paned != NULL);
-	g_signal_connect_object ((GObject*) paned, "notify::position", (GCallback) _gmpc_paned_size_group_child_position_changed_g_object_notify, self, 0);
-	g_signal_connect_object ((GtkWidget*) paned, "destroy-event", (GCallback) _gmpc_paned_size_group_child_destroy_event_gtk_widget_destroy_event, self, 0);
-	self->priv->block_changed_callback = TRUE;
-	gtk_paned_set_position (paned, self->priv->position);
-	self->priv->block_changed_callback = FALSE;
-	self->priv->list = g_list_append (self->priv->list, paned);
-}
-
-
-static void gmpc_paned_size_group_class_init (GmpcPanedSizeGroupClass * klass) {
-	gmpc_paned_size_group_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcPanedSizeGroupPrivate));
-	G_OBJECT_CLASS (klass)->finalize = gmpc_paned_size_group_finalize;
-}
-
-
-static void gmpc_paned_size_group_instance_init (GmpcPanedSizeGroup * self) {
-	self->priv = GMPC_PANED_SIZE_GROUP_GET_PRIVATE (self);
-	self->priv->list = NULL;
-	self->priv->position = cfg_get_single_value_as_int_with_default (config, "paned-size-group", "position", 150);
-	self->priv->block_changed_callback = FALSE;
-}
-
-
-static void gmpc_paned_size_group_finalize (GObject* obj) {
-	GmpcPanedSizeGroup * self;
-	self = GMPC_PANED_SIZE_GROUP (obj);
-	{
-		cfg_set_single_value_as_int (config, "paned-size-group", "position", self->priv->position);
-	}
-	_g_list_free0 (self->priv->list);
-	G_OBJECT_CLASS (gmpc_paned_size_group_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_paned_size_group_get_type (void) {
-	static GType gmpc_paned_size_group_type_id = 0;
-	if (gmpc_paned_size_group_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPanedSizeGroupClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_paned_size_group_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcPanedSizeGroup), 0, (GInstanceInitFunc) gmpc_paned_size_group_instance_init, NULL };
-		gmpc_paned_size_group_type_id = g_type_register_static (G_TYPE_OBJECT, "GmpcPanedSizeGroup", &g_define_type_info, 0);
-	}
-	return gmpc_paned_size_group_type_id;
-}
-
-
-
-
diff --git a/src/vala/gmpc-plugin.c b/src/vala/gmpc-plugin.c
deleted file mode 100644
index d015910..0000000
--- a/src/vala/gmpc-plugin.c
+++ /dev/null
@@ -1,372 +0,0 @@
-/* gmpc-plugin.c generated by valac, the Vala compiler
- * generated from gmpc-plugin.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include "gmpc-extras.h"
-#include <stdlib.h>
-#include <string.h>
-#include <plugin.h>
-#include <config1.h>
-#include <gtk/gtk.h>
-#include <libmpd/libmpdclient.h>
-#include <libmpd/libmpd.h>
-#include <metadata.h>
-
-#define _g_free0(var) (var = (g_free (var), NULL))
-
-
-static gpointer gmpc_plugin_base_parent_class = NULL;
-
-enum  {
-	GMPC_PLUGIN_BASE_DUMMY_PROPERTY
-};
-static gint* gmpc_plugin_base_real_get_version (GmpcPluginBase* self, int* result_length1);
-static const char* gmpc_plugin_base_real_get_name (GmpcPluginBase* self);
-static void gmpc_plugin_base_real_save_yourself (GmpcPluginBase* self);
-static gboolean gmpc_plugin_base_real_get_enabled (GmpcPluginBase* self);
-static void gmpc_plugin_base_real_set_enabled (GmpcPluginBase* self, gboolean state);
-static void gmpc_plugin_base_finalize (GObject* obj);
-static gint gmpc_plugin_browser_iface_real_browser_option_menu (GmpcPluginBrowserIface* self, GtkMenu* menu);
-static gint gmpc_plugin_browser_iface_real_browser_add_go_menu (GmpcPluginBrowserIface* self, GtkMenu* menu);
-static gboolean gmpc_plugin_integrate_search_iface_real_field_supported (GmpcPluginIntegrateSearchIface* self, mpd_TagItems tag);
-
-
-
-static gint* gmpc_plugin_base_real_get_version (GmpcPluginBase* self, int* result_length1) {
-	g_return_val_if_fail (self != NULL, NULL);
-	g_critical ("Type `%s' does not implement abstract method `gmpc_plugin_base_get_version'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
-	return NULL;
-}
-
-
-gint* gmpc_plugin_base_get_version (GmpcPluginBase* self, int* result_length1) {
-	return GMPC_PLUGIN_BASE_GET_CLASS (self)->get_version (self, result_length1);
-}
-
-
-static const char* gmpc_plugin_base_real_get_name (GmpcPluginBase* self) {
-	g_return_val_if_fail (self != NULL, NULL);
-	g_critical ("Type `%s' does not implement abstract method `gmpc_plugin_base_get_name'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
-	return NULL;
-}
-
-
-const char* gmpc_plugin_base_get_name (GmpcPluginBase* self) {
-	return GMPC_PLUGIN_BASE_GET_CLASS (self)->get_name (self);
-}
-
-
-static void gmpc_plugin_base_real_save_yourself (GmpcPluginBase* self) {
-	g_return_if_fail (self != NULL);
-}
-
-
-void gmpc_plugin_base_save_yourself (GmpcPluginBase* self) {
-	GMPC_PLUGIN_BASE_GET_CLASS (self)->save_yourself (self);
-}
-
-
-static gboolean gmpc_plugin_base_real_get_enabled (GmpcPluginBase* self) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	if (gmpc_plugin_base_get_name (self) == NULL) {
-		result = FALSE;
-		return result;
-	}
-	result = (gboolean) cfg_get_single_value_as_int_with_default (config, gmpc_plugin_base_get_name (self), "enabled", 1);
-	return result;
-}
-
-
-gboolean gmpc_plugin_base_get_enabled (GmpcPluginBase* self) {
-	return GMPC_PLUGIN_BASE_GET_CLASS (self)->get_enabled (self);
-}
-
-
-static void gmpc_plugin_base_real_set_enabled (GmpcPluginBase* self, gboolean state) {
-	g_return_if_fail (self != NULL);
-	if (gmpc_plugin_base_get_name (self) != NULL) {
-		cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name (self), "enabled", (gint) state);
-	}
-}
-
-
-void gmpc_plugin_base_set_enabled (GmpcPluginBase* self, gboolean state) {
-	GMPC_PLUGIN_BASE_GET_CLASS (self)->set_enabled (self, state);
-}
-
-
-GmpcPluginBase* gmpc_plugin_base_construct (GType object_type) {
-	GmpcPluginBase * self;
-	self = (GmpcPluginBase*) g_object_new (object_type, NULL);
-	return self;
-}
-
-
-static void gmpc_plugin_base_class_init (GmpcPluginBaseClass * klass) {
-	gmpc_plugin_base_parent_class = g_type_class_peek_parent (klass);
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_version = gmpc_plugin_base_real_get_version;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_name = gmpc_plugin_base_real_get_name;
-	GMPC_PLUGIN_BASE_CLASS (klass)->save_yourself = gmpc_plugin_base_real_save_yourself;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_enabled = gmpc_plugin_base_real_get_enabled;
-	GMPC_PLUGIN_BASE_CLASS (klass)->set_enabled = gmpc_plugin_base_real_set_enabled;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_plugin_base_finalize;
-}
-
-
-static void gmpc_plugin_base_instance_init (GmpcPluginBase * self) {
-	self->translation_domain = NULL;
-	self->plugin_type = 1;
-}
-
-
-static void gmpc_plugin_base_finalize (GObject* obj) {
-	GmpcPluginBase * self;
-	self = GMPC_PLUGIN_BASE (obj);
-	_g_free0 (self->path);
-	G_OBJECT_CLASS (gmpc_plugin_base_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_plugin_base_get_type (void) {
-	static GType gmpc_plugin_base_type_id = 0;
-	if (gmpc_plugin_base_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginBaseClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_plugin_base_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcPluginBase), 0, (GInstanceInitFunc) gmpc_plugin_base_instance_init, NULL };
-		gmpc_plugin_base_type_id = g_type_register_static (G_TYPE_OBJECT, "GmpcPluginBase", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
-	}
-	return gmpc_plugin_base_type_id;
-}
-
-
-gint gmpc_plugin_tool_menu_iface_tool_menu_integration (GmpcPluginToolMenuIface* self, GtkMenu* menu) {
-	return GMPC_PLUGIN_TOOL_MENU_IFACE_GET_INTERFACE (self)->tool_menu_integration (self, menu);
-}
-
-
-static void gmpc_plugin_tool_menu_iface_base_init (GmpcPluginToolMenuIfaceIface * iface) {
-	static gboolean initialized = FALSE;
-	if (!initialized) {
-		initialized = TRUE;
-	}
-}
-
-
-GType gmpc_plugin_tool_menu_iface_get_type (void) {
-	static GType gmpc_plugin_tool_menu_iface_type_id = 0;
-	if (gmpc_plugin_tool_menu_iface_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginToolMenuIfaceIface), (GBaseInitFunc) gmpc_plugin_tool_menu_iface_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
-		gmpc_plugin_tool_menu_iface_type_id = g_type_register_static (G_TYPE_INTERFACE, "GmpcPluginToolMenuIface", &g_define_type_info, 0);
-		g_type_interface_add_prerequisite (gmpc_plugin_tool_menu_iface_type_id, GMPC_PLUGIN_TYPE_BASE);
-	}
-	return gmpc_plugin_tool_menu_iface_type_id;
-}
-
-
-void gmpc_plugin_meta_data_iface_get_metadata (GmpcPluginMetaDataIface* self, const mpd_Song* song, MetaDataType type, GmpcPluginMetaDataCallback callback, void* callback_target) {
-	GMPC_PLUGIN_META_DATA_IFACE_GET_INTERFACE (self)->get_metadata (self, song, type, callback, callback_target);
-}
-
-
-gint gmpc_plugin_meta_data_iface_get_priority (GmpcPluginMetaDataIface* self) {
-	return GMPC_PLUGIN_META_DATA_IFACE_GET_INTERFACE (self)->get_priority (self);
-}
-
-
-void gmpc_plugin_meta_data_iface_set_priority (GmpcPluginMetaDataIface* self, gint priority) {
-	GMPC_PLUGIN_META_DATA_IFACE_GET_INTERFACE (self)->set_priority (self, priority);
-}
-
-
-static void gmpc_plugin_meta_data_iface_base_init (GmpcPluginMetaDataIfaceIface * iface) {
-	static gboolean initialized = FALSE;
-	if (!initialized) {
-		initialized = TRUE;
-	}
-}
-
-
-GType gmpc_plugin_meta_data_iface_get_type (void) {
-	static GType gmpc_plugin_meta_data_iface_type_id = 0;
-	if (gmpc_plugin_meta_data_iface_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginMetaDataIfaceIface), (GBaseInitFunc) gmpc_plugin_meta_data_iface_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
-		gmpc_plugin_meta_data_iface_type_id = g_type_register_static (G_TYPE_INTERFACE, "GmpcPluginMetaDataIface", &g_define_type_info, 0);
-		g_type_interface_add_prerequisite (gmpc_plugin_meta_data_iface_type_id, GMPC_PLUGIN_TYPE_BASE);
-	}
-	return gmpc_plugin_meta_data_iface_type_id;
-}
-
-
-void gmpc_plugin_browser_iface_browser_add (GmpcPluginBrowserIface* self, GtkWidget* category_tree) {
-	GMPC_PLUGIN_BROWSER_IFACE_GET_INTERFACE (self)->browser_add (self, category_tree);
-}
-
-
-void gmpc_plugin_browser_iface_browser_selected (GmpcPluginBrowserIface* self, GtkContainer* container) {
-	GMPC_PLUGIN_BROWSER_IFACE_GET_INTERFACE (self)->browser_selected (self, container);
-}
-
-
-void gmpc_plugin_browser_iface_browser_unselected (GmpcPluginBrowserIface* self, GtkContainer* container) {
-	GMPC_PLUGIN_BROWSER_IFACE_GET_INTERFACE (self)->browser_unselected (self, container);
-}
-
-
-static gint gmpc_plugin_browser_iface_real_browser_option_menu (GmpcPluginBrowserIface* self, GtkMenu* menu) {
-	gint result;
-	g_return_val_if_fail (menu != NULL, 0);
-	result = 0;
-	return result;
-}
-
-
-gint gmpc_plugin_browser_iface_browser_option_menu (GmpcPluginBrowserIface* self, GtkMenu* menu) {
-	return GMPC_PLUGIN_BROWSER_IFACE_GET_INTERFACE (self)->browser_option_menu (self, menu);
-}
-
-
-static gint gmpc_plugin_browser_iface_real_browser_add_go_menu (GmpcPluginBrowserIface* self, GtkMenu* menu) {
-	gint result;
-	g_return_val_if_fail (menu != NULL, 0);
-	result = 0;
-	return result;
-}
-
-
-gint gmpc_plugin_browser_iface_browser_add_go_menu (GmpcPluginBrowserIface* self, GtkMenu* menu) {
-	return GMPC_PLUGIN_BROWSER_IFACE_GET_INTERFACE (self)->browser_add_go_menu (self, menu);
-}
-
-
-static void gmpc_plugin_browser_iface_base_init (GmpcPluginBrowserIfaceIface * iface) {
-	static gboolean initialized = FALSE;
-	if (!initialized) {
-		initialized = TRUE;
-	}
-	iface->browser_option_menu = gmpc_plugin_browser_iface_real_browser_option_menu;
-	iface->browser_add_go_menu = gmpc_plugin_browser_iface_real_browser_add_go_menu;
-}
-
-
-GType gmpc_plugin_browser_iface_get_type (void) {
-	static GType gmpc_plugin_browser_iface_type_id = 0;
-	if (gmpc_plugin_browser_iface_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginBrowserIfaceIface), (GBaseInitFunc) gmpc_plugin_browser_iface_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
-		gmpc_plugin_browser_iface_type_id = g_type_register_static (G_TYPE_INTERFACE, "GmpcPluginBrowserIface", &g_define_type_info, 0);
-		g_type_interface_add_prerequisite (gmpc_plugin_browser_iface_type_id, GMPC_PLUGIN_TYPE_BASE);
-	}
-	return gmpc_plugin_browser_iface_type_id;
-}
-
-
-static gboolean gmpc_plugin_integrate_search_iface_real_field_supported (GmpcPluginIntegrateSearchIface* self, mpd_TagItems tag) {
-	gboolean result;
-	result = TRUE;
-	return result;
-}
-
-
-gboolean gmpc_plugin_integrate_search_iface_field_supported (GmpcPluginIntegrateSearchIface* self, mpd_TagItems tag) {
-	return GMPC_PLUGIN_INTEGRATE_SEARCH_IFACE_GET_INTERFACE (self)->field_supported (self, tag);
-}
-
-
-MpdData* gmpc_plugin_integrate_search_iface_search (GmpcPluginIntegrateSearchIface* self, mpd_TagItems tag, const char* search_query) {
-	return GMPC_PLUGIN_INTEGRATE_SEARCH_IFACE_GET_INTERFACE (self)->search (self, tag, search_query);
-}
-
-
-static void gmpc_plugin_integrate_search_iface_base_init (GmpcPluginIntegrateSearchIfaceIface * iface) {
-	static gboolean initialized = FALSE;
-	if (!initialized) {
-		initialized = TRUE;
-	}
-	iface->field_supported = gmpc_plugin_integrate_search_iface_real_field_supported;
-}
-
-
-GType gmpc_plugin_integrate_search_iface_get_type (void) {
-	static GType gmpc_plugin_integrate_search_iface_type_id = 0;
-	if (gmpc_plugin_integrate_search_iface_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginIntegrateSearchIfaceIface), (GBaseInitFunc) gmpc_plugin_integrate_search_iface_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
-		gmpc_plugin_integrate_search_iface_type_id = g_type_register_static (G_TYPE_INTERFACE, "GmpcPluginIntegrateSearchIface", &g_define_type_info, 0);
-		g_type_interface_add_prerequisite (gmpc_plugin_integrate_search_iface_type_id, GMPC_PLUGIN_TYPE_BASE);
-	}
-	return gmpc_plugin_integrate_search_iface_type_id;
-}
-
-
-void gmpc_plugin_preferences_iface_preferences_pane_construct (GmpcPluginPreferencesIface* self, GtkContainer* container) {
-	GMPC_PLUGIN_PREFERENCES_IFACE_GET_INTERFACE (self)->preferences_pane_construct (self, container);
-}
-
-
-void gmpc_plugin_preferences_iface_preferences_pane_destroy (GmpcPluginPreferencesIface* self, GtkContainer* container) {
-	GMPC_PLUGIN_PREFERENCES_IFACE_GET_INTERFACE (self)->preferences_pane_destroy (self, container);
-}
-
-
-static void gmpc_plugin_preferences_iface_base_init (GmpcPluginPreferencesIfaceIface * iface) {
-	static gboolean initialized = FALSE;
-	if (!initialized) {
-		initialized = TRUE;
-	}
-}
-
-
-GType gmpc_plugin_preferences_iface_get_type (void) {
-	static GType gmpc_plugin_preferences_iface_type_id = 0;
-	if (gmpc_plugin_preferences_iface_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginPreferencesIfaceIface), (GBaseInitFunc) gmpc_plugin_preferences_iface_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
-		gmpc_plugin_preferences_iface_type_id = g_type_register_static (G_TYPE_INTERFACE, "GmpcPluginPreferencesIface", &g_define_type_info, 0);
-		g_type_interface_add_prerequisite (gmpc_plugin_preferences_iface_type_id, GMPC_PLUGIN_TYPE_BASE);
-	}
-	return gmpc_plugin_preferences_iface_type_id;
-}
-
-
-gint gmpc_plugin_song_list_iface_song_list (GmpcPluginSongListIface* self, GtkWidget* tree, GtkMenu* menu) {
-	return GMPC_PLUGIN_SONG_LIST_IFACE_GET_INTERFACE (self)->song_list (self, tree, menu);
-}
-
-
-static void gmpc_plugin_song_list_iface_base_init (GmpcPluginSongListIfaceIface * iface) {
-	static gboolean initialized = FALSE;
-	if (!initialized) {
-		initialized = TRUE;
-	}
-}
-
-
-GType gmpc_plugin_song_list_iface_get_type (void) {
-	static GType gmpc_plugin_song_list_iface_type_id = 0;
-	if (gmpc_plugin_song_list_iface_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcPluginSongListIfaceIface), (GBaseInitFunc) gmpc_plugin_song_list_iface_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
-		gmpc_plugin_song_list_iface_type_id = g_type_register_static (G_TYPE_INTERFACE, "GmpcPluginSongListIface", &g_define_type_info, 0);
-		g_type_interface_add_prerequisite (gmpc_plugin_song_list_iface_type_id, GMPC_PLUGIN_TYPE_BASE);
-	}
-	return gmpc_plugin_song_list_iface_type_id;
-}
-
-
-
-
diff --git a/src/vala/gmpc-rating.c b/src/vala/gmpc-rating.c
deleted file mode 100644
index bfe392a..0000000
--- a/src/vala/gmpc-rating.c
+++ /dev/null
@@ -1,282 +0,0 @@
-/* gmpc-rating.c generated by valac, the Vala compiler
- * generated from gmpc-rating.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include "gmpc-extras.h"
-#include <libmpd/libmpd.h>
-#include <libmpd/libmpdclient.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include <gdk/gdk.h>
-#include <float.h>
-#include <math.h>
-#include <main.h>
-#include <stdlib.h>
-#include <string.h>
-
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-
-struct _GmpcRatingPrivate {
-	MpdObj* server;
-	mpd_Song* song;
-	GtkImage** rat;
-	gint rat_length1;
-	gint rat_size;
-	GtkHBox* box;
-	gint rating;
-	gulong status_changed_id;
-};
-
-
-static gint gmpc_rating_id;
-static gint gmpc_rating_id = 0;
-static gpointer gmpc_rating_parent_class = NULL;
-
-#define GMPC_RATING_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_TYPE_RATING, GmpcRatingPrivate))
-enum  {
-	GMPC_RATING_DUMMY_PROPERTY
-};
-#define GMPC_RATING_use_transition TRUE
-static void gmpc_rating_status_changed (GmpcRating* self, MpdObj* server, ChangedStatusType what, GmpcConnection* conn);
-static gboolean _gmpc_rating_button_press_event_callback_gtk_widget_button_press_event (GtkEventBox* _sender, GdkEventButton* event, gpointer self);
-static GObject * gmpc_rating_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_rating_finalize (GObject* obj);
-static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func);
-static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func);
-
-
-
-gboolean gmpc_rating_button_press_event_callback (GmpcRating* self, GtkEventBox* wid, GdkEventButton* event) {
-	gboolean result;
-	g_return_val_if_fail (self != NULL, FALSE);
-	g_return_val_if_fail (wid != NULL, FALSE);
-	if ((*event).type == GDK_BUTTON_PRESS) {
-		if ((*event).button == 1) {
-			gint width;
-			gint button;
-			char* _tmp0_;
-			width = ((GtkWidget*) self)->allocation.width;
-			button = (gint) ((((*event).x / ((double) width)) + 0.15) * 5);
-			mpd_sticker_song_set (self->priv->server, self->priv->song->file, "rating", _tmp0_ = g_strdup_printf ("%i", button));
-			_g_free0 (_tmp0_);
-			gmpc_rating_set_rating (self, button);
-		}
-	}
-	result = FALSE;
-	return result;
-}
-
-
-static void gmpc_rating_status_changed (GmpcRating* self, MpdObj* server, ChangedStatusType what, GmpcConnection* conn) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (server != NULL);
-	g_return_if_fail (conn != NULL);
-	if ((what & MPD_CST_STICKER) != 0) {
-		gmpc_rating_update (self);
-	}
-}
-
-
-static gpointer _mpd_songDup0 (gpointer self) {
-	return self ? mpd_songDup (self) : NULL;
-}
-
-
-GmpcRating* gmpc_rating_construct (GType object_type, MpdObj* server, const mpd_Song* song) {
-	GmpcRating * self;
-	mpd_Song* _tmp0_;
-	g_return_val_if_fail (server != NULL, NULL);
-	g_return_val_if_fail (song != NULL, NULL);
-	self = g_object_newv (object_type, 0, NULL);
-	self->priv->server = server;
-	self->priv->song = (_tmp0_ = _mpd_songDup0 (song), _mpd_freeSong0 (self->priv->song), _tmp0_);
-	gmpc_rating_update (self);
-	self->priv->status_changed_id = g_signal_connect_swapped (gmpcconn, "status_changed", (GCallback) gmpc_rating_status_changed, self);
-	return self;
-}
-
-
-GmpcRating* gmpc_rating_new (MpdObj* server, const mpd_Song* song) {
-	return gmpc_rating_construct (GMPC_TYPE_RATING, server, song);
-}
-
-
-void gmpc_rating_set_rating (GmpcRating* self, gint rating) {
-	gint i;
-	g_return_if_fail (self != NULL);
-	i = 0;
-	if (rating != self->priv->rating) {
-		{
-			gboolean _tmp0_;
-			i = 0;
-			_tmp0_ = TRUE;
-			while (TRUE) {
-				if (!_tmp0_) {
-					i++;
-				}
-				_tmp0_ = FALSE;
-				if (!(i < 5)) {
-					break;
-				}
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->rat[i], i < rating);
-			}
-		}
-		self->priv->rating = rating;
-	}
-}
-
-
-void gmpc_rating_update (GmpcRating* self) {
-	char* value;
-	g_return_if_fail (self != NULL);
-	value = mpd_sticker_song_get (self->priv->server, self->priv->song->file, "rating");
-	if (value == NULL) {
-		gmpc_rating_set_rating (self, 0);
-	} else {
-		gmpc_rating_set_rating (self, atoi (value));
-	}
-	_g_free0 (value);
-}
-
-
-static gboolean _gmpc_rating_button_press_event_callback_gtk_widget_button_press_event (GtkEventBox* _sender, GdkEventButton* event, gpointer self) {
-	return gmpc_rating_button_press_event_callback (self, _sender, event);
-}
-
-
-static GObject * gmpc_rating_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcRating * self;
-	parent_class = G_OBJECT_CLASS (gmpc_rating_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_RATING (obj);
-	{
-		gint i = 0;
-		GtkHBox* _tmp0_;
-		GtkEventBox* _tmp1_;
-		GtkImage** _tmp2_;
-		g_object_set ((GtkFrame*) self, "shadow", GTK_SHADOW_NONE, NULL);
-		self->priv->box = (_tmp0_ = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (TRUE, 6)), _g_object_unref0 (self->priv->box), _tmp0_);
-		self->event_box = (_tmp1_ = g_object_ref_sink ((GtkEventBox*) gtk_event_box_new ()), _g_object_unref0 (self->event_box), _tmp1_);
-		gtk_event_box_set_visible_window (self->event_box, FALSE);
-		self->priv->rat = (_tmp2_ = g_new0 (GtkImage*, 5 + 1), self->priv->rat = (_vala_array_free (self->priv->rat, self->priv->rat_length1, (GDestroyNotify) g_object_unref), NULL), self->priv->rat_length1 = 5, self->priv->rat_size = self->priv->rat_length1, _tmp2_);
-		{
-			gboolean _tmp3_;
-			i = 0;
-			_tmp3_ = TRUE;
-			while (TRUE) {
-				GtkImage* _tmp4_;
-				if (!_tmp3_) {
-					i++;
-				}
-				_tmp3_ = FALSE;
-				if (!(i < 5)) {
-					break;
-				}
-				self->priv->rat[i] = (_tmp4_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("rating", GTK_ICON_SIZE_MENU)), _g_object_unref0 (self->priv->rat[i]), _tmp4_);
-				gtk_box_pack_start ((GtkBox*) self->priv->box, (GtkWidget*) self->priv->rat[i], FALSE, FALSE, (guint) 0);
-			}
-		}
-		gtk_container_add ((GtkContainer*) self, (GtkWidget*) self->event_box);
-		gtk_container_add ((GtkContainer*) self->event_box, (GtkWidget*) self->priv->box);
-		g_signal_connect_object ((GtkWidget*) self->event_box, "button-press-event", (GCallback) _gmpc_rating_button_press_event_callback_gtk_widget_button_press_event, self, 0);
-		gtk_widget_show_all ((GtkWidget*) self);
-	}
-	return obj;
-}
-
-
-static void gmpc_rating_class_init (GmpcRatingClass * klass) {
-	gmpc_rating_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcRatingPrivate));
-	G_OBJECT_CLASS (klass)->constructor = gmpc_rating_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_rating_finalize;
-	gmpc_rating_id = gmpc_rating_id + 1;
-}
-
-
-static void gmpc_rating_instance_init (GmpcRating * self) {
-	self->priv = GMPC_RATING_GET_PRIVATE (self);
-	self->priv->server = NULL;
-	self->priv->song = NULL;
-	self->priv->rating = -1;
-	self->priv->status_changed_id = (gulong) 0;
-}
-
-
-static void gmpc_rating_finalize (GObject* obj) {
-	GmpcRating * self;
-	self = GMPC_RATING (obj);
-	{
-		gboolean _tmp5_ = FALSE;
-		if (self->priv->status_changed_id > 0) {
-			_tmp5_ = g_signal_handler_is_connected (gmpcconn, self->priv->status_changed_id);
-		} else {
-			_tmp5_ = FALSE;
-		}
-		if (_tmp5_) {
-			g_signal_handler_disconnect (gmpcconn, self->priv->status_changed_id);
-			self->priv->status_changed_id = (gulong) 0;
-		}
-	}
-	_mpd_freeSong0 (self->priv->song);
-	self->priv->rat = (_vala_array_free (self->priv->rat, self->priv->rat_length1, (GDestroyNotify) g_object_unref), NULL);
-	_g_object_unref0 (self->priv->box);
-	_g_object_unref0 (self->event_box);
-	G_OBJECT_CLASS (gmpc_rating_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_rating_get_type (void) {
-	static GType gmpc_rating_type_id = 0;
-	if (gmpc_rating_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcRatingClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_rating_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcRating), 0, (GInstanceInitFunc) gmpc_rating_instance_init, NULL };
-		gmpc_rating_type_id = g_type_register_static (GTK_TYPE_FRAME, "GmpcRating", &g_define_type_info, 0);
-	}
-	return gmpc_rating_type_id;
-}
-
-
-static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func) {
-	if ((array != NULL) && (destroy_func != NULL)) {
-		int i;
-		for (i = 0; i < array_length; i = i + 1) {
-			if (((gpointer*) array)[i] != NULL) {
-				destroy_func (((gpointer*) array)[i]);
-			}
-		}
-	}
-}
-
-
-static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func) {
-	_vala_array_destroy (array, array_length, destroy_func);
-	g_free (array);
-}
-
-
-
-
diff --git a/src/vala/gmpc-song-links.c b/src/vala/gmpc-song-links.c
deleted file mode 100644
index 78e090b..0000000
--- a/src/vala/gmpc-song-links.c
+++ /dev/null
@@ -1,555 +0,0 @@
-/* gmpc-song-links.c generated by valac, the Vala compiler
- * generated from gmpc-song-links.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
-
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include "gmpc-extras.h"
-#include <libmpd/libmpdclient.h>
-#include <libmpd/libmpd.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include <misc.h>
-#include <glib/gi18n-lib.h>
-#include <plugin.h>
-#include <glib/gstdio.h>
-#include <stdio.h>
-#include <gmpc_easy_download.h>
-
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_key_file_free0(var) ((var == NULL) ? NULL : (var = (g_key_file_free (var), NULL)))
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
-
-struct _GmpcSongLinksPrivate {
-	GmpcSongLinksType type;
-	mpd_Song* song;
-};
-
-
-extern gboolean initialized;
-gboolean initialized = FALSE;
-static gpointer gmpc_song_links_parent_class = NULL;
-
-#define use_transition_sl TRUE
-#define GMPC_SONG_LINKS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_SONG_TYPE_LINKS, GmpcSongLinksPrivate))
-enum  {
-	GMPC_SONG_LINKS_DUMMY_PROPERTY
-};
-#define GMPC_SONG_LINKS_some_unique_name VERSION
-static void gmpc_song_links_open_uri_function (GtkLinkButton* but, const char* uri);
-static void gmpc_song_links_parse_uris (GmpcSongLinks* self);
-static void _gmpc_song_links_open_uri_function_gtk_link_button_uri_func (GtkLinkButton* button, const char* link_, gpointer self);
-static void gmpc_song_links_finalize (GObject* obj);
-static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func);
-static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func);
-static gint _vala_array_length (gpointer array);
-
-
-
-
-GType gmpc_song_links_type_get_type (void) {
-	static GType gmpc_song_links_type_type_id = 0;
-	if (G_UNLIKELY (gmpc_song_links_type_type_id == 0)) {
-		static const GEnumValue values[] = {{GMPC_SONG_LINKS_TYPE_ARTIST, "GMPC_SONG_LINKS_TYPE_ARTIST", "artist"}, {GMPC_SONG_LINKS_TYPE_ALBUM, "GMPC_SONG_LINKS_TYPE_ALBUM", "album"}, {GMPC_SONG_LINKS_TYPE_SONG, "GMPC_SONG_LINKS_TYPE_SONG", "song"}, {0, NULL, NULL}};
-		gmpc_song_links_type_type_id = g_enum_register_static ("GmpcSongLinksType", values);
-	}
-	return gmpc_song_links_type_type_id;
-}
-
-
-static void gmpc_song_links_open_uri_function (GtkLinkButton* but, const char* uri) {
-	g_return_if_fail (but != NULL);
-	g_return_if_fail (uri != NULL);
-	open_uri (uri);
-}
-
-
-static gpointer _mpd_songDup0 (gpointer self) {
-	return self ? mpd_songDup (self) : NULL;
-}
-
-
-static void _gmpc_song_links_open_uri_function_gtk_link_button_uri_func (GtkLinkButton* button, const char* link_, gpointer self) {
-	gmpc_song_links_open_uri_function (button, link_);
-}
-
-
-GmpcSongLinks* gmpc_song_links_construct (GType object_type, GmpcSongLinksType type, const mpd_Song* song) {
-	GmpcSongLinks * self;
-	mpd_Song* _tmp0_;
-	GtkEventBox* event;
-	GtkLabel* label;
-	char* _tmp1_;
-	g_return_val_if_fail (song != NULL, NULL);
-	self = g_object_newv (object_type, 0, NULL);
-	self->priv->type = type;
-	self->priv->song = (_tmp0_ = _mpd_songDup0 (song), _mpd_freeSong0 (self->priv->song), _tmp0_);
-	event = g_object_ref_sink ((GtkEventBox*) gtk_event_box_new ());
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-	gtk_container_add ((GtkContainer*) event, (GtkWidget*) label);
-	gtk_event_box_set_visible_window (event, FALSE);
-	gtk_frame_set_label_widget ((GtkFrame*) self, (GtkWidget*) event);
-	gtk_label_set_markup (label, _tmp1_ = g_strdup_printf ("<b>%s:</b>", _ ("Web Links")));
-	_g_free0 (_tmp1_);
-	g_object_set ((GtkFrame*) self, "shadow", GTK_SHADOW_NONE, NULL);
-	gmpc_song_links_parse_uris (self);
-	if (!initialized) {
-		gtk_link_button_set_uri_hook (_gmpc_song_links_open_uri_function_gtk_link_button_uri_func, NULL, NULL);
-		initialized = TRUE;
-	}
-	_g_object_unref0 (event);
-	_g_object_unref0 (label);
-	return self;
-}
-
-
-GmpcSongLinks* gmpc_song_links_new (GmpcSongLinksType type, const mpd_Song* song) {
-	return gmpc_song_links_construct (GMPC_SONG_TYPE_LINKS, type, song);
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static char* string_replace (const char* self, const char* old, const char* replacement) {
-	char* result;
-	GError * _inner_error_;
-	g_return_val_if_fail (self != NULL, NULL);
-	g_return_val_if_fail (old != NULL, NULL);
-	g_return_val_if_fail (replacement != NULL, NULL);
-	_inner_error_ = NULL;
-	{
-		char* _tmp0_;
-		GRegex* _tmp1_;
-		GRegex* regex;
-		char* _tmp2_;
-		regex = (_tmp1_ = g_regex_new (_tmp0_ = g_regex_escape_string (old, -1), 0, 0, &_inner_error_), _g_free0 (_tmp0_), _tmp1_);
-		if (_inner_error_ != NULL) {
-			if (_inner_error_->domain == G_REGEX_ERROR) {
-				goto __catch13_g_regex_error;
-			}
-			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-			g_clear_error (&_inner_error_);
-			return NULL;
-		}
-		_tmp2_ = g_regex_replace_literal (regex, self, (gssize) (-1), 0, replacement, 0, &_inner_error_);
-		if (_inner_error_ != NULL) {
-			_g_regex_unref0 (regex);
-			if (_inner_error_->domain == G_REGEX_ERROR) {
-				goto __catch13_g_regex_error;
-			}
-			_g_regex_unref0 (regex);
-			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-			g_clear_error (&_inner_error_);
-			return NULL;
-		}
-		result = _tmp2_;
-		_g_regex_unref0 (regex);
-		return result;
-	}
-	goto __finally13;
-	__catch13_g_regex_error:
-	{
-		GError * e;
-		e = _inner_error_;
-		_inner_error_ = NULL;
-		{
-			g_assert_not_reached ();
-			_g_error_free0 (e);
-		}
-	}
-	__finally13:
-	if (_inner_error_ != NULL) {
-		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-		g_clear_error (&_inner_error_);
-		return NULL;
-	}
-}
-
-
-static void gmpc_song_links_parse_uris (GmpcSongLinks* self) {
-	GError * _inner_error_;
-	GtkWidget* child;
-	GKeyFile* file;
-	char* path;
-	GtkAlignment* ali;
-	GtkVBox* vbox;
-	char** _tmp2_;
-	gint groups_size;
-	gint groups_length1;
-	gsize _tmp1_;
-	char** groups;
-	g_return_if_fail (self != NULL);
-	_inner_error_ = NULL;
-	child = _g_object_ref0 (gtk_bin_get_child ((GtkBin*) self));
-	if (child != NULL) {
-		gtk_object_destroy ((GtkObject*) child);
-	}
-	file = g_key_file_new ();
-	path = gmpc_get_user_path ("weblinks.list");
-	if (!g_file_test (path, G_FILE_TEST_EXISTS)) {
-		char* _tmp0_;
-		path = (_tmp0_ = gmpc_get_full_glade_path ("weblinks.list"), _g_free0 (path), _tmp0_);
-		if (!g_file_test (path, G_FILE_TEST_EXISTS)) {
-			_g_object_unref0 (child);
-			_g_key_file_free0 (file);
-			_g_free0 (path);
-			return;
-		}
-	}
-	{
-		g_key_file_load_from_file (file, path, G_KEY_FILE_NONE, &_inner_error_);
-		if (_inner_error_ != NULL) {
-			goto __catch11_g_error;
-		}
-	}
-	goto __finally11;
-	__catch11_g_error:
-	{
-		GError * e;
-		e = _inner_error_;
-		_inner_error_ = NULL;
-		{
-			fprintf (stdout, "Failed to load file: %s\n", path);
-			_g_error_free0 (e);
-			_g_object_unref0 (child);
-			_g_key_file_free0 (file);
-			_g_free0 (path);
-			return;
-		}
-	}
-	__finally11:
-	if (_inner_error_ != NULL) {
-		_g_object_unref0 (child);
-		_g_key_file_free0 (file);
-		_g_free0 (path);
-		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-		g_clear_error (&_inner_error_);
-		return;
-	}
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.0f, 0.0f, 0.0f, 0.0f));
-	gtk_alignment_set_padding (ali, (guint) 8, (guint) 8, (guint) 12, (guint) 6);
-	gtk_container_add ((GtkContainer*) self, (GtkWidget*) ali);
-	vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 0));
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) vbox);
-	groups = (_tmp2_ = g_key_file_get_groups (file, &_tmp1_), groups_length1 = _tmp1_, groups_size = groups_length1, _tmp2_);
-	{
-		char** entry_collection;
-		int entry_collection_length1;
-		int entry_it;
-		entry_collection = groups;
-		entry_collection_length1 = groups_length1;
-		for (entry_it = 0; entry_it < groups_length1; entry_it = entry_it + 1) {
-			char* entry;
-			entry = g_strdup (entry_collection[entry_it]);
-			{
-				{
-					char* typestr;
-					char* uri;
-					GmpcSongLinksType type = 0;
-					GQuark _tmp16_;
-					const char* _tmp15_;
-					static GQuark _tmp16__label0 = 0;
-					static GQuark _tmp16__label1 = 0;
-					typestr = g_key_file_get_string (file, entry, "type", &_inner_error_);
-					if (_inner_error_ != NULL) {
-						goto __catch12_g_error;
-					}
-					uri = g_key_file_get_string (file, entry, "url", &_inner_error_);
-					if (_inner_error_ != NULL) {
-						_g_free0 (typestr);
-						goto __catch12_g_error;
-					}
-					_tmp15_ = typestr;
-					_tmp16_ = (NULL == _tmp15_) ? 0 : g_quark_from_string (_tmp15_);
-					if (_tmp16_ == ((0 != _tmp16__label0) ? _tmp16__label0 : (_tmp16__label0 = g_quark_from_static_string ("artist"))))
-					do {
-						type = GMPC_SONG_LINKS_TYPE_ARTIST;
-						if (self->priv->song->artist != NULL) {
-							char* _tmp4_;
-							char* _tmp3_;
-							uri = (_tmp4_ = string_replace (uri, "%ARTIST%", _tmp3_ = gmpc_easy_download_uri_escape (self->priv->song->artist)), _g_free0 (uri), _tmp4_);
-							_g_free0 (_tmp3_);
-						}
-						break;
-					} while (0); else if (_tmp16_ == ((0 != _tmp16__label1) ? _tmp16__label1 : (_tmp16__label1 = g_quark_from_static_string ("album"))))
-					do {
-						type = GMPC_SONG_LINKS_TYPE_ALBUM;
-						if (self->priv->song->album != NULL) {
-							char* _tmp6_;
-							char* _tmp5_;
-							uri = (_tmp6_ = string_replace (uri, "%ALBUM%", _tmp5_ = gmpc_easy_download_uri_escape (self->priv->song->album)), _g_free0 (uri), _tmp6_);
-							_g_free0 (_tmp5_);
-						}
-						if (self->priv->song->artist != NULL) {
-							char* _tmp8_;
-							char* _tmp7_;
-							uri = (_tmp8_ = string_replace (uri, "%ARTIST%", _tmp7_ = gmpc_easy_download_uri_escape (self->priv->song->artist)), _g_free0 (uri), _tmp8_);
-							_g_free0 (_tmp7_);
-						}
-						break;
-					} while (0); else
-					do {
-						type = GMPC_SONG_LINKS_TYPE_SONG;
-						if (self->priv->song->title != NULL) {
-							char* _tmp10_;
-							char* _tmp9_;
-							uri = (_tmp10_ = string_replace (uri, "%TITLE%", _tmp9_ = gmpc_easy_download_uri_escape (self->priv->song->title)), _g_free0 (uri), _tmp10_);
-							_g_free0 (_tmp9_);
-						}
-						if (self->priv->song->album != NULL) {
-							char* _tmp12_;
-							char* _tmp11_;
-							uri = (_tmp12_ = string_replace (uri, "%ALBUM%", _tmp11_ = gmpc_easy_download_uri_escape (self->priv->song->album)), _g_free0 (uri), _tmp12_);
-							_g_free0 (_tmp11_);
-						}
-						if (self->priv->song->artist != NULL) {
-							char* _tmp14_;
-							char* _tmp13_;
-							uri = (_tmp14_ = string_replace (uri, "%ARTIST%", _tmp13_ = gmpc_easy_download_uri_escape (self->priv->song->artist)), _g_free0 (uri), _tmp14_);
-							_g_free0 (_tmp13_);
-						}
-						break;
-					} while (0); {
-						char* sar;
-						sar = g_key_file_get_string (file, entry, "search-and-replace", &_inner_error_);
-						if (_inner_error_ != NULL) {
-							goto __catch14_g_error;
-						}
-						if (sar != NULL) {
-							char** _tmp18_;
-							gint s_size;
-							gint s_length1;
-							char** _tmp17_;
-							char** s;
-							s = (_tmp18_ = _tmp17_ = g_strsplit (sar, "::", 0), s_length1 = _vala_array_length (_tmp17_), s_size = s_length1, _tmp18_);
-							if (s_length1 == 2) {
-								{
-									GRegex* regex;
-									char* _tmp19_;
-									char* _tmp20_;
-									regex = g_regex_new (s[0], 0, 0, &_inner_error_);
-									if (_inner_error_ != NULL) {
-										if (_inner_error_->domain == G_REGEX_ERROR) {
-											goto __catch15_g_regex_error;
-										}
-										s = (_vala_array_free (s, s_length1, (GDestroyNotify) g_free), NULL);
-										_g_free0 (sar);
-										_g_free0 (typestr);
-										_g_free0 (uri);
-										_g_free0 (entry);
-										_g_object_unref0 (child);
-										_g_key_file_free0 (file);
-										_g_free0 (path);
-										_g_object_unref0 (ali);
-										_g_object_unref0 (vbox);
-										groups = (_vala_array_free (groups, groups_length1, (GDestroyNotify) g_free), NULL);
-										g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-										g_clear_error (&_inner_error_);
-										return;
-									}
-									_tmp19_ = g_regex_replace_literal (regex, uri, (gssize) (-1), 0, s[1], 0, &_inner_error_);
-									if (_inner_error_ != NULL) {
-										_g_regex_unref0 (regex);
-										if (_inner_error_->domain == G_REGEX_ERROR) {
-											goto __catch15_g_regex_error;
-										}
-										_g_regex_unref0 (regex);
-										s = (_vala_array_free (s, s_length1, (GDestroyNotify) g_free), NULL);
-										_g_free0 (sar);
-										_g_free0 (typestr);
-										_g_free0 (uri);
-										_g_free0 (entry);
-										_g_object_unref0 (child);
-										_g_key_file_free0 (file);
-										_g_free0 (path);
-										_g_object_unref0 (ali);
-										_g_object_unref0 (vbox);
-										groups = (_vala_array_free (groups, groups_length1, (GDestroyNotify) g_free), NULL);
-										g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-										g_clear_error (&_inner_error_);
-										return;
-									}
-									uri = (_tmp20_ = _tmp19_, _g_free0 (uri), _tmp20_);
-									_g_regex_unref0 (regex);
-								}
-								goto __finally15;
-								__catch15_g_regex_error:
-								{
-									GError * e;
-									e = _inner_error_;
-									_inner_error_ = NULL;
-									{
-										fprintf (stdout, "Failed to compile regex: '%s'\n", e->message);
-										_g_error_free0 (e);
-									}
-								}
-								__finally15:
-								if (_inner_error_ != NULL) {
-									s = (_vala_array_free (s, s_length1, (GDestroyNotify) g_free), NULL);
-									_g_free0 (sar);
-									goto __catch14_g_error;
-								}
-							}
-							s = (_vala_array_free (s, s_length1, (GDestroyNotify) g_free), NULL);
-						}
-						_g_free0 (sar);
-					}
-					goto __finally14;
-					__catch14_g_error:
-					{
-						GError * e;
-						e = _inner_error_;
-						_inner_error_ = NULL;
-						{
-							_g_error_free0 (e);
-						}
-					}
-					__finally14:
-					if (_inner_error_ != NULL) {
-						_g_free0 (typestr);
-						_g_free0 (uri);
-						goto __catch12_g_error;
-					}
-					if (((gint) type) <= ((gint) self->priv->type)) {
-						GtkLinkButton* label;
-						char* _tmp21_;
-						label = g_object_ref_sink ((GtkLinkButton*) gtk_link_button_new (uri));
-						gtk_button_set_label ((GtkButton*) label, _tmp21_ = g_strdup_printf (_ ("Lookup %s on %s"), _ (typestr), entry));
-						_g_free0 (_tmp21_);
-						gtk_button_set_alignment ((GtkButton*) label, 0.0f, 0.5f);
-						gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) label, FALSE, TRUE, (guint) 0);
-						_g_object_unref0 (label);
-					}
-					_g_free0 (typestr);
-					_g_free0 (uri);
-				}
-				goto __finally12;
-				__catch12_g_error:
-				{
-					GError * e;
-					e = _inner_error_;
-					_inner_error_ = NULL;
-					{
-						fprintf (stdout, "Failed to get entry from %s: '%s'\n", path, e->message);
-						_g_error_free0 (e);
-					}
-				}
-				__finally12:
-				if (_inner_error_ != NULL) {
-					_g_free0 (entry);
-					_g_object_unref0 (child);
-					_g_key_file_free0 (file);
-					_g_free0 (path);
-					_g_object_unref0 (ali);
-					_g_object_unref0 (vbox);
-					groups = (_vala_array_free (groups, groups_length1, (GDestroyNotify) g_free), NULL);
-					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-					g_clear_error (&_inner_error_);
-					return;
-				}
-				_g_free0 (entry);
-			}
-		}
-	}
-	_g_object_unref0 (child);
-	_g_key_file_free0 (file);
-	_g_free0 (path);
-	_g_object_unref0 (ali);
-	_g_object_unref0 (vbox);
-	groups = (_vala_array_free (groups, groups_length1, (GDestroyNotify) g_free), NULL);
-}
-
-
-static void gmpc_song_links_class_init (GmpcSongLinksClass * klass) {
-	gmpc_song_links_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcSongLinksPrivate));
-	G_OBJECT_CLASS (klass)->finalize = gmpc_song_links_finalize;
-}
-
-
-static void gmpc_song_links_instance_init (GmpcSongLinks * self) {
-	self->priv = GMPC_SONG_LINKS_GET_PRIVATE (self);
-	self->priv->type = GMPC_SONG_LINKS_TYPE_ARTIST;
-	self->priv->song = NULL;
-}
-
-
-static void gmpc_song_links_finalize (GObject* obj) {
-	GmpcSongLinks * self;
-	self = GMPC_SONG_LINKS (obj);
-	{
-	}
-	_mpd_freeSong0 (self->priv->song);
-	G_OBJECT_CLASS (gmpc_song_links_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_song_links_get_type (void) {
-	static GType gmpc_song_links_type_id = 0;
-	if (gmpc_song_links_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcSongLinksClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_song_links_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcSongLinks), 0, (GInstanceInitFunc) gmpc_song_links_instance_init, NULL };
-		gmpc_song_links_type_id = g_type_register_static (GTK_TYPE_FRAME, "GmpcSongLinks", &g_define_type_info, 0);
-	}
-	return gmpc_song_links_type_id;
-}
-
-
-static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func) {
-	if ((array != NULL) && (destroy_func != NULL)) {
-		int i;
-		for (i = 0; i < array_length; i = i + 1) {
-			if (((gpointer*) array)[i] != NULL) {
-				destroy_func (((gpointer*) array)[i]);
-			}
-		}
-	}
-}
-
-
-static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func) {
-	_vala_array_destroy (array, array_length, destroy_func);
-	g_free (array);
-}
-
-
-static gint _vala_array_length (gpointer array) {
-	int length;
-	length = 0;
-	if (array) {
-		while (((gpointer*) array)[length]) {
-			length++;
-		}
-	}
-	return length;
-}
-
-
-
-
diff --git a/src/vala/gmpc-test-plugin.c b/src/vala/gmpc-test-plugin.c
deleted file mode 100644
index b0e1acb..0000000
--- a/src/vala/gmpc-test-plugin.c
+++ /dev/null
@@ -1,1591 +0,0 @@
-/* gmpc-test-plugin.c generated by valac, the Vala compiler
- * generated from gmpc-test-plugin.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include "gmpc-extras.h"
-#include <libmpd/libmpdclient.h>
-#include <libmpd/libmpd.h>
-#include <metadata.h>
-#include <gmpc_easy_download.h>
-#include <config.h>
-#include <stdlib.h>
-#include <string.h>
-#include <glib/gi18n-lib.h>
-#include <gdk-pixbuf/gdk-pixdata.h>
-#include <float.h>
-#include <math.h>
-#include <pango/pango.h>
-#include <stdio.h>
-#include <glib/gstdio.h>
-#include <metadata-cache.h>
-#include <main.h>
-#include <plugin.h>
-#include <config1.h>
-#include <gdk/gdk.h>
-
-#define _mpd_freeSong0(var) ((var == NULL) ? NULL : (var = (mpd_freeSong (var), NULL)))
-#define _g_list_free0(var) ((var == NULL) ? NULL : (var = (g_list_free (var), NULL)))
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-#define _meta_data_free0(var) ((var == NULL) ? NULL : (var = (meta_data_free (var), NULL)))
-#define __g_list_free_gtk_tree_path_free0(var) ((var == NULL) ? NULL : (var = (_g_list_free_gtk_tree_path_free (var), NULL)))
-
-struct _GmpcMetaDataEditWindowPrivate {
-	mpd_Song* song;
-	MetaDataType query_type;
-	GList* downloads;
-	void* handle;
-	void* handle2;
-	GtkHBox* pbox;
-	GtkLabel* warning_label;
-	GtkEntry* artist_entry;
-	GtkEntry* album_entry;
-	GtkEntry* title_entry;
-	GtkButton* cancel;
-	GtkButton* refresh;
-	GtkComboBox* combo;
-	GtkProgressBar* bar;
-	GtkScrolledWindow* sw;
-	GtkEventBox* ilevent;
-	GtkVBox* itemslist;
-};
-
-
-static gpointer gmpc_meta_data_edit_window_parent_class = NULL;
-static gpointer gmpc_test_plugin_parent_class = NULL;
-static GmpcPluginToolMenuIfaceIface* gmpc_test_plugin_gmpc_plugin_tool_menu_iface_parent_iface = NULL;
-static GmpcPluginSongListIfaceIface* gmpc_test_plugin_gmpc_plugin_song_list_iface_parent_iface = NULL;
-
-#define use_transition_tp TRUE
-#define GMPC_META_DATA_EDIT_WINDOW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_META_DATA_TYPE_EDIT_WINDOW, GmpcMetaDataEditWindowPrivate))
-enum  {
-	GMPC_META_DATA_EDIT_WINDOW_DUMMY_PROPERTY
-};
-#define GMPC_META_DATA_EDIT_WINDOW_some_unique_name VERSION
-static void gmpc_meta_data_edit_window_set_metadata (GmpcMetaDataEditWindow* self, GtkButton* button);
-static void _gmpc_meta_data_edit_window_set_metadata_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void gmpc_meta_data_edit_window_add_entry_image (GmpcMetaDataEditWindow* self, const char* provider, const char* uri, GdkPixbufFormat* format, GdkPixbuf* pb, gboolean is_raw);
-static void gmpc_meta_data_edit_window_add_entry_text (GmpcMetaDataEditWindow* self, const char* provider, const char* uri, const char* text);
-static void _gmpc_meta_data_edit_window_image_downloaded_gmpc_async_download_callback (const GEADAsyncHandler* handle, GEADStatus status, gpointer self);
-static guchar* _vala_array_dup1 (guchar* self, int length);
-static void _gmpc_meta_data_edit_window_store_image_gmpc_async_download_callback (const GEADAsyncHandler* handle, GEADStatus status, gpointer self);
-static void gmpc_meta_data_edit_window_clear_itemslist (GmpcMetaDataEditWindow* self);
-static void _gmpc_meta_data_edit_window_callback_gmpc_meta_data_callback (void* handle, const char* plugin_name, GList* list, gpointer self);
-static void gmpc_meta_data_edit_window_combo_box_changed (GmpcMetaDataEditWindow* self, GtkComboBox* comb);
-static void _gmpc_meta_data_edit_window_b_cancel_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _gmpc_meta_data_edit_window_destroy_popup_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _gmpc_meta_data_edit_window_combo_box_changed_gtk_combo_box_changed (GtkComboBox* _sender, gpointer self);
-static void _gmpc_meta_data_edit_window_refresh_query_gtk_button_clicked (GtkButton* _sender, gpointer self);
-static void _lambda38_ (GtkWidget* source, GtkStyle* old, GmpcMetaDataEditWindow* self);
-static void __lambda38__gtk_widget_style_set (GtkWidget* _sender, GtkStyle* previous_style, gpointer self);
-static void _lambda39_ (GtkWidget* source, GdkRectangle* alloc, GmpcMetaDataEditWindow* self);
-static void __lambda39__gtk_widget_size_allocate (GtkWidget* _sender, GdkRectangle* allocation, gpointer self);
-static GObject * gmpc_meta_data_edit_window_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-static void gmpc_meta_data_edit_window_finalize (GObject* obj);
-enum  {
-	GMPC_TEST_PLUGIN_DUMMY_PROPERTY
-};
-static gint* gmpc_test_plugin_real_get_version (GmpcPluginBase* base, int* result_length1);
-static const char* gmpc_test_plugin_real_get_name (GmpcPluginBase* base);
-static void gmpc_test_plugin_real_save_yourself (GmpcPluginBase* base);
-static gboolean gmpc_test_plugin_real_get_enabled (GmpcPluginBase* base);
-static void gmpc_test_plugin_real_set_enabled (GmpcPluginBase* base, gboolean state);
-static void _g_list_free_gtk_tree_path_free (GList* self);
-static void gmpc_test_plugin_menu_activate_tree (GmpcTestPlugin* self, GtkMenuItem* item);
-static void _gmpc_test_plugin_menu_activate_tree_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self);
-static gint gmpc_test_plugin_real_song_list (GmpcPluginSongListIface* base, GtkWidget* tree, GtkMenu* menu);
-static void _gmpc_test_plugin_menu_activated_album_gtk_menu_item_activate (GtkMenuItem* _sender, gpointer self);
-static gint gmpc_test_plugin_real_tool_menu_integration (GmpcPluginToolMenuIface* base, GtkMenu* menu);
-static GObject * gmpc_test_plugin_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
-
-
-
-static void _gmpc_meta_data_edit_window_set_metadata_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_meta_data_edit_window_set_metadata (self, _sender);
-}
-
-
-static void gmpc_meta_data_edit_window_add_entry_image (GmpcMetaDataEditWindow* self, const char* provider, const char* uri, GdkPixbufFormat* format, GdkPixbuf* pb, gboolean is_raw) {
-	char* a;
-	char* _tmp0_;
-	gint new_h = 0;
-	gint new_w = 0;
-	GtkHBox* hbox;
-	GtkLabel* label;
-	GdkPixbuf* _tmp7_;
-	GtkImage* _tmp8_;
-	GtkImage* image;
-	GtkAlignment* ali;
-	GtkButton* button;
-	GtkHSeparator* sep;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (uri != NULL);
-	g_return_if_fail (pb != NULL);
-	a = NULL;
-	a = (_tmp0_ = g_strdup (""), _g_free0 (a), _tmp0_);
-	if (provider != NULL) {
-		char* _tmp2_;
-		char* _tmp1_;
-		a = (_tmp2_ = g_strconcat (a, _tmp1_ = g_markup_printf_escaped ("\n<b>%s</b>:  %s", _ ("Provider"), provider), NULL), _g_free0 (a), _tmp2_);
-		_g_free0 (_tmp1_);
-	}
-	if (format != NULL) {
-		char* _tmp4_;
-		char* _tmp3_;
-		a = (_tmp4_ = g_strconcat (a, _tmp3_ = g_markup_printf_escaped ("\n<b>%s</b>: %s", _ ("Filetype"), gdk_pixbuf_format_get_name (format)), NULL), _g_free0 (a), _tmp4_);
-		_g_free0 (_tmp3_);
-	}
-	if (pb != NULL) {
-		char* _tmp6_;
-		char* _tmp5_;
-		a = (_tmp6_ = g_strconcat (a, _tmp5_ = g_strdup_printf ("\n<b>%s</b>: %ix%i (%s)", _ ("Size"), gdk_pixbuf_get_width (pb), gdk_pixbuf_get_height (pb), _ ("wxh")), NULL), _g_free0 (a), _tmp6_);
-		_g_free0 (_tmp5_);
-	}
-	if (gdk_pixbuf_get_width (pb) < gdk_pixbuf_get_height (pb)) {
-		new_h = 150;
-		new_w = (gint) ((150.0 / ((double) gdk_pixbuf_get_height (pb))) * gdk_pixbuf_get_width (pb));
-	} else {
-		new_w = 150;
-		new_h = (gint) ((150.0 / ((double) gdk_pixbuf_get_width (pb))) * gdk_pixbuf_get_height (pb));
-	}
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-	gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_MIDDLE);
-	gtk_label_set_markup (label, a);
-	gtk_label_set_line_wrap (label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	image = (_tmp8_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_pixbuf (_tmp7_ = gdk_pixbuf_scale_simple (pb, new_w, new_h, GDK_INTERP_BILINEAR))), _g_object_unref0 (_tmp7_), _tmp8_);
-	gtk_widget_set_size_request ((GtkWidget*) image, 180, -1);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) image, FALSE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 0.f, 0.f));
-	button = g_object_ref_sink ((GtkButton*) gtk_button_new_with_label (_ ("Set")));
-	if (!is_raw) {
-		g_object_set_data_full ((GObject*) button, "path", (void*) g_strdup (uri), (GDestroyNotify) g_free);
-	} else {
-		g_object_set_data_full ((GObject*) button, "data", (void*) g_strdup (uri), (GDestroyNotify) g_free);
-	}
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) button);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) ali, FALSE, TRUE, (guint) 0);
-	g_signal_connect_object (button, "clicked", (GCallback) _gmpc_meta_data_edit_window_set_metadata_gtk_button_clicked, self, 0);
-	gtk_widget_show_all ((GtkWidget*) hbox);
-	gtk_box_pack_start ((GtkBox*) self->priv->itemslist, (GtkWidget*) hbox, FALSE, TRUE, (guint) 0);
-	sep = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ());
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 4);
-	gtk_widget_show ((GtkWidget*) sep);
-	gtk_box_pack_start ((GtkBox*) self->priv->itemslist, (GtkWidget*) sep, FALSE, TRUE, (guint) 0);
-	_g_free0 (a);
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (label);
-	_g_object_unref0 (image);
-	_g_object_unref0 (ali);
-	_g_object_unref0 (button);
-	_g_object_unref0 (sep);
-}
-
-
-static void gmpc_meta_data_edit_window_add_entry_text (GmpcMetaDataEditWindow* self, const char* provider, const char* uri, const char* text) {
-	char* a;
-	char* _tmp0_;
-	GtkHBox* hbox;
-	GtkLabel* label;
-	GtkLabel* text_label;
-	GtkAlignment* ali;
-	GtkButton* button;
-	GtkHSeparator* sep;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (uri != NULL);
-	g_return_if_fail (text != NULL);
-	a = NULL;
-	a = (_tmp0_ = g_strdup (""), _g_free0 (a), _tmp0_);
-	if (provider != NULL) {
-		char* _tmp2_;
-		char* _tmp1_;
-		a = (_tmp2_ = g_strconcat (a, _tmp1_ = g_strdup_printf ("\n<b>%s</b>:  %s", _ ("Provider"), provider), NULL), _g_free0 (a), _tmp2_);
-		_g_free0 (_tmp1_);
-	}
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	label = g_object_ref_sink ((GtkLabel*) gtk_label_new (""));
-	gtk_label_set_markup (label, a);
-	gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_MIDDLE);
-	gtk_label_set_line_wrap (label, TRUE);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.0f);
-	gtk_widget_set_size_request ((GtkWidget*) label, 280, -1);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) label, FALSE, TRUE, (guint) 0);
-	text_label = g_object_ref_sink ((GtkLabel*) gtk_label_new (text));
-	gtk_label_set_ellipsize (text_label, PANGO_ELLIPSIZE_END);
-	gtk_misc_set_alignment ((GtkMisc*) text_label, 0.0f, 0.0f);
-	gtk_widget_set_size_request ((GtkWidget*) text_label, 180, -1);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) text_label, TRUE, TRUE, (guint) 0);
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (0.f, 0.f, 0.f, 0.f));
-	button = g_object_ref_sink ((GtkButton*) gtk_button_new_with_label (_ ("Set")));
-	g_object_set_data_full ((GObject*) button, "lyrics", (void*) g_strdup (text), (GDestroyNotify) g_free);
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) button);
-	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) ali, FALSE, TRUE, (guint) 0);
-	g_signal_connect_object (button, "clicked", (GCallback) _gmpc_meta_data_edit_window_set_metadata_gtk_button_clicked, self, 0);
-	gtk_widget_show_all ((GtkWidget*) hbox);
-	gtk_box_pack_start ((GtkBox*) self->priv->itemslist, (GtkWidget*) hbox, FALSE, TRUE, (guint) 0);
-	sep = g_object_ref_sink ((GtkHSeparator*) gtk_hseparator_new ());
-	gtk_widget_set_size_request ((GtkWidget*) sep, -1, 4);
-	gtk_widget_show ((GtkWidget*) sep);
-	gtk_box_pack_start ((GtkBox*) self->priv->itemslist, (GtkWidget*) sep, FALSE, TRUE, (guint) 0);
-	_g_free0 (a);
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (label);
-	_g_object_unref0 (text_label);
-	_g_object_unref0 (ali);
-	_g_object_unref0 (button);
-	_g_object_unref0 (sep);
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-void gmpc_meta_data_edit_window_image_downloaded (GmpcMetaDataEditWindow* self, const GEADAsyncHandler* handle, GEADStatus status) {
-	GError * _inner_error_;
-	gboolean _tmp3_ = FALSE;
-	gboolean _tmp4_ = FALSE;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (handle != NULL);
-	_inner_error_ = NULL;
-	if (status == GEAD_PROGRESS) {
-		return;
-	}
-	self->priv->downloads = g_list_remove (self->priv->downloads, handle);
-	gtk_progress_bar_pulse (self->priv->bar);
-	if (status == GEAD_DONE) {
-		guchar* _tmp1_;
-		gint data_size;
-		gint data_length1;
-		gint _tmp0_;
-		guchar* data;
-		gboolean _tmp2_ = FALSE;
-		data = (_tmp1_ = gmpc_easy_handler_get_data_vala_wrap (handle, &_tmp0_), data_length1 = _tmp0_, data_size = data_length1, _tmp1_);
-		if (self->priv->query_type == META_ALBUM_ART) {
-			_tmp2_ = TRUE;
-		} else {
-			_tmp2_ = self->priv->query_type == META_ARTIST_ART;
-		}
-		if (_tmp2_) {
-			{
-				GdkPixbufLoader* load;
-				GdkPixbuf* pb;
-				load = gdk_pixbuf_loader_new ();
-				{
-					gdk_pixbuf_loader_write (load, data, (gsize) data_length1, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						goto __catch18_g_error;
-					}
-				}
-				goto __finally18;
-				__catch18_g_error:
-				{
-					GError * e;
-					e = _inner_error_;
-					_inner_error_ = NULL;
-					{
-						fprintf (stdout, "Failed to load file: %s::%s\n", e->message, gmpc_easy_handler_get_uri (handle));
-						_g_error_free0 (e);
-					}
-				}
-				__finally18:
-				if (_inner_error_ != NULL) {
-					_g_object_unref0 (load);
-					goto __catch17_g_error;
-				}
-				gdk_pixbuf_loader_close (load, &_inner_error_);
-				if (_inner_error_ != NULL) {
-					_g_object_unref0 (load);
-					goto __catch17_g_error;
-				}
-				pb = _g_object_ref0 (gdk_pixbuf_loader_get_pixbuf (load));
-				if (pb != NULL) {
-					gmpc_meta_data_edit_window_add_entry_image (self, (const char*) gmpc_easy_handler_get_user_data (handle), gmpc_easy_handler_get_uri (handle), gdk_pixbuf_loader_get_format (load), pb, FALSE);
-				}
-				_g_object_unref0 (load);
-				_g_object_unref0 (pb);
-			}
-			goto __finally17;
-			__catch17_g_error:
-			{
-				GError * e;
-				e = _inner_error_;
-				_inner_error_ = NULL;
-				{
-					fprintf (stdout, "Failed to load file: %s::%s\n", e->message, gmpc_easy_handler_get_uri (handle));
-					_g_error_free0 (e);
-				}
-			}
-			__finally17:
-			if (_inner_error_ != NULL) {
-				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-				g_clear_error (&_inner_error_);
-				return;
-			}
-		} else {
-			gmpc_meta_data_edit_window_add_entry_text (self, (const char*) gmpc_easy_handler_get_user_data (handle), gmpc_easy_handler_get_uri (handle), (const char*) data);
-		}
-	}
-	if (self->priv->handle == NULL) {
-		_tmp4_ = self->priv->handle2 == NULL;
-	} else {
-		_tmp4_ = FALSE;
-	}
-	if (_tmp4_) {
-		_tmp3_ = self->priv->downloads == NULL;
-	} else {
-		_tmp3_ = FALSE;
-	}
-	if (_tmp3_) {
-		gtk_widget_hide ((GtkWidget*) self->priv->pbox);
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->ilevent, TRUE);
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->combo, TRUE);
-	}
-}
-
-
-static void _gmpc_meta_data_edit_window_image_downloaded_gmpc_async_download_callback (const GEADAsyncHandler* handle, GEADStatus status, gpointer self) {
-	gmpc_meta_data_edit_window_image_downloaded (self, handle, status);
-}
-
-
-static guchar* _vala_array_dup1 (guchar* self, int length) {
-	return g_memdup (self, length * sizeof (guchar));
-}
-
-
-void gmpc_meta_data_edit_window_callback (GmpcMetaDataEditWindow* self, void* handle, const char* plugin_name, GList* list) {
-	GError * _inner_error_;
-	g_return_if_fail (self != NULL);
-	_inner_error_ = NULL;
-	gtk_progress_bar_pulse (self->priv->bar);
-	if (list == NULL) {
-		if (self->priv->handle == handle) {
-			gboolean _tmp0_ = FALSE;
-			self->priv->handle = NULL;
-			if (self->priv->handle == NULL) {
-				_tmp0_ = self->priv->downloads == NULL;
-			} else {
-				_tmp0_ = FALSE;
-			}
-			if (_tmp0_) {
-				gtk_widget_hide ((GtkWidget*) self->priv->pbox);
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->ilevent, TRUE);
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->combo, TRUE);
-			}
-		}
-		if (self->priv->handle2 == handle) {
-			gboolean _tmp1_ = FALSE;
-			self->priv->handle2 = NULL;
-			if (self->priv->handle == NULL) {
-				_tmp1_ = self->priv->downloads == NULL;
-			} else {
-				_tmp1_ = FALSE;
-			}
-			if (_tmp1_) {
-				gtk_widget_hide ((GtkWidget*) self->priv->pbox);
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->combo, TRUE);
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->ilevent, TRUE);
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-			}
-		}
-	}
-	{
-		GList* md_collection;
-		GList* md_it;
-		md_collection = list;
-		for (md_it = md_collection; md_it != NULL; md_it = md_it->next) {
-			const MetaData* md;
-			md = (const MetaData*) md_it->data;
-			{
-				gboolean _tmp2_ = FALSE;
-				if (self->priv->query_type == META_ALBUM_ART) {
-					_tmp2_ = TRUE;
-				} else {
-					_tmp2_ = self->priv->query_type == META_ARTIST_ART;
-				}
-				if (_tmp2_) {
-					if (md->content_type == META_DATA_CONTENT_URI) {
-						const char* uri;
-						uri = meta_data_get_uri (md);
-						if (md->content_type == META_DATA_CONTENT_URI) {
-							if (g_utf8_get_char (g_utf8_offset_to_pointer (uri, 0)) == '/') {
-								{
-									GdkPixbuf* pb;
-									pb = gdk_pixbuf_new_from_file (uri, &_inner_error_);
-									if (_inner_error_ != NULL) {
-										goto __catch19_g_error;
-									}
-									if (pb != NULL) {
-										gint w = 0;
-										gint h = 0;
-										gmpc_meta_data_edit_window_add_entry_image (self, plugin_name, uri, gdk_pixbuf_get_file_info (uri, &w, &h), pb, FALSE);
-									}
-									_g_object_unref0 (pb);
-								}
-								goto __finally19;
-								__catch19_g_error:
-								{
-									GError * e;
-									e = _inner_error_;
-									_inner_error_ = NULL;
-									{
-										_g_error_free0 (e);
-									}
-								}
-								__finally19:
-								if (_inner_error_ != NULL) {
-									g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-									g_clear_error (&_inner_error_);
-									return;
-								}
-							} else {
-								GEADAsyncHandler* h;
-								h = gmpc_easy_async_downloader (uri, _gmpc_meta_data_edit_window_image_downloaded_gmpc_async_download_callback, self);
-								if (h != NULL) {
-									gmpc_easy_handler_set_user_data (h, md->plugin_name);
-									self->priv->downloads = g_list_append (self->priv->downloads, h);
-								}
-							}
-						}
-					} else {
-						if (md->content_type == META_DATA_CONTENT_RAW) {
-							guchar* _tmp5_;
-							gint data_size;
-							gint data_length1;
-							guchar* _tmp4_;
-							gint _tmp3_;
-							guchar* data;
-							GdkPixbufLoader* load;
-							GdkPixbuf* pb;
-							data = (_tmp5_ = (_tmp4_ = meta_data_get_raw (md, &_tmp3_), (_tmp4_ == NULL) ? ((gpointer) _tmp4_) : _vala_array_dup1 (_tmp4_, _tmp3_)), data_length1 = _tmp3_, data_size = data_length1, _tmp5_);
-							load = gdk_pixbuf_loader_new ();
-							{
-								gdk_pixbuf_loader_write (load, data, (gsize) data_length1, &_inner_error_);
-								if (_inner_error_ != NULL) {
-									goto __catch20_g_error;
-								}
-							}
-							goto __finally20;
-							__catch20_g_error:
-							{
-								GError * e;
-								e = _inner_error_;
-								_inner_error_ = NULL;
-								{
-									fprintf (stdout, "Failed to load raw data: %s\n", e->message);
-									_g_error_free0 (e);
-								}
-							}
-							__finally20:
-							if (_inner_error_ != NULL) {
-								data = (g_free (data), NULL);
-								_g_object_unref0 (load);
-								g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-								g_clear_error (&_inner_error_);
-								return;
-							}
-							{
-								gdk_pixbuf_loader_close (load, &_inner_error_);
-								if (_inner_error_ != NULL) {
-									goto __catch21_g_error;
-								}
-							}
-							goto __finally21;
-							__catch21_g_error:
-							{
-								GError * e;
-								e = _inner_error_;
-								_inner_error_ = NULL;
-								{
-									fprintf (stdout, "Failed to close loader: %s\n", e->message);
-									_g_error_free0 (e);
-								}
-							}
-							__finally21:
-							if (_inner_error_ != NULL) {
-								data = (g_free (data), NULL);
-								_g_object_unref0 (load);
-								g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-								g_clear_error (&_inner_error_);
-								return;
-							}
-							pb = _g_object_ref0 (gdk_pixbuf_loader_get_pixbuf (load));
-							if (pb != NULL) {
-								char* base16;
-								base16 = g_base64_encode (data, data_length1);
-								gmpc_meta_data_edit_window_add_entry_image (self, plugin_name, base16, gdk_pixbuf_loader_get_format (load), pb, TRUE);
-								_g_free0 (base16);
-							}
-							data = (g_free (data), NULL);
-							_g_object_unref0 (load);
-							_g_object_unref0 (pb);
-						}
-					}
-				} else {
-					if (md->content_type == META_DATA_CONTENT_TEXT) {
-						const char* uri;
-						uri = meta_data_get_text (md);
-						gmpc_meta_data_edit_window_add_entry_text (self, plugin_name, "n/a", uri);
-					} else {
-						if (md->content_type == META_DATA_CONTENT_HTML) {
-							char* uri;
-							uri = meta_data_get_text_from_html (md);
-							gmpc_meta_data_edit_window_add_entry_text (self, plugin_name, "n/a", uri);
-							_g_free0 (uri);
-						} else {
-							if (md->content_type == META_DATA_CONTENT_URI) {
-								const char* uri;
-								uri = meta_data_get_uri (md);
-								if (g_utf8_get_char (g_utf8_offset_to_pointer (uri, 0)) == '/') {
-									{
-										char* content;
-										char* _tmp8_;
-										gboolean _tmp7_;
-										char* _tmp6_ = NULL;
-										gboolean _tmp9_;
-										content = NULL;
-										_tmp9_ = (_tmp7_ = g_file_get_contents (uri, &_tmp6_, NULL, &_inner_error_), content = (_tmp8_ = _tmp6_, _g_free0 (content), _tmp8_), _tmp7_);
-										if (_inner_error_ != NULL) {
-											_g_free0 (content);
-											goto __catch22_g_error;
-										}
-										if (_tmp9_) {
-											gmpc_meta_data_edit_window_add_entry_text (self, plugin_name, uri, content);
-										}
-										_g_free0 (content);
-									}
-									goto __finally22;
-									__catch22_g_error:
-									{
-										GError * e;
-										e = _inner_error_;
-										_inner_error_ = NULL;
-										{
-											_g_error_free0 (e);
-										}
-									}
-									__finally22:
-									if (_inner_error_ != NULL) {
-										g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-										g_clear_error (&_inner_error_);
-										return;
-									}
-								}
-							}
-						}
-					}
-				}
-			}
-		}
-	}
-}
-
-
-void gmpc_meta_data_edit_window_store_image (GmpcMetaDataEditWindow* self, const GEADAsyncHandler* handle, GEADStatus status) {
-	GError * _inner_error_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (handle != NULL);
-	_inner_error_ = NULL;
-	if (status == GEAD_PROGRESS) {
-		guchar* _tmp1_;
-		gint data_size;
-		gint data_length1;
-		gint _tmp0_;
-		guchar* data;
-		gint64 total_size;
-		gboolean _tmp2_ = FALSE;
-		data = (_tmp1_ = gmpc_easy_handler_get_data_vala_wrap (handle, &_tmp0_), data_length1 = _tmp0_, data_size = data_length1, _tmp1_);
-		gtk_widget_set_sensitive ((GtkWidget*) self, FALSE);
-		gtk_widget_show ((GtkWidget*) self->priv->pbox);
-		total_size = gmpc_easy_handler_get_content_size (handle);
-		if (data_length1 > 0) {
-			_tmp2_ = total_size > 0;
-		} else {
-			_tmp2_ = FALSE;
-		}
-		if (_tmp2_) {
-			double progress;
-			progress = data_length1 / ((double) total_size);
-			gtk_progress_bar_set_fraction (self->priv->bar, progress);
-		} else {
-			gtk_progress_bar_pulse (self->priv->bar);
-		}
-		return;
-	}
-	self->priv->downloads = g_list_remove (self->priv->downloads, handle);
-	if (status == GEAD_DONE) {
-		guchar* _tmp4_;
-		gint data_size;
-		gint data_length1;
-		gint _tmp3_;
-		guchar* data;
-		char* file;
-		data = (_tmp4_ = gmpc_easy_handler_get_data_vala_wrap (handle, &_tmp3_), data_length1 = _tmp3_, data_size = data_length1, _tmp4_);
-		file = gmpc_get_metadata_filename (self->priv->query_type, self->priv->song, NULL);
-		{
-			MetaData* met;
-			MetaData* met_false;
-			g_file_set_contents (file, (const char*) data, (gssize) ((glong) data_length1), &_inner_error_);
-			if (_inner_error_ != NULL) {
-				goto __catch23_g_error;
-			}
-			met = meta_data_new ();
-			met->type = self->priv->query_type;
-			met->plugin_name = "User set";
-			met->content_type = META_DATA_CONTENT_URI;
-			meta_data_set_uri (met, file);
-			meta_data_set_cache (self->priv->song, META_DATA_AVAILABLE, met);
-			met_false = meta_data_new ();
-			met_false->type = self->priv->query_type;
-			met_false->plugin_name = "User set";
-			met_false->content_type = META_DATA_CONTENT_EMPTY;
-			g_signal_emit_by_name (gmw, "data-changed", self->priv->song, self->priv->query_type, META_DATA_UNAVAILABLE, met_false);
-			g_signal_emit_by_name (gmw, "data-changed", self->priv->song, self->priv->query_type, META_DATA_AVAILABLE, met);
-			_meta_data_free0 (met);
-			_meta_data_free0 (met_false);
-		}
-		goto __finally23;
-		__catch23_g_error:
-		{
-			GError * e;
-			e = _inner_error_;
-			_inner_error_ = NULL;
-			{
-				_g_error_free0 (e);
-			}
-		}
-		__finally23:
-		if (_inner_error_ != NULL) {
-			_g_free0 (file);
-			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-			g_clear_error (&_inner_error_);
-			return;
-		}
-		_g_free0 (file);
-	}
-	gtk_widget_hide ((GtkWidget*) self->priv->pbox);
-	gtk_widget_set_sensitive ((GtkWidget*) self, TRUE);
-}
-
-
-static void _gmpc_meta_data_edit_window_store_image_gmpc_async_download_callback (const GEADAsyncHandler* handle, GEADStatus status, gpointer self) {
-	gmpc_meta_data_edit_window_store_image (self, handle, status);
-}
-
-
-static void gmpc_meta_data_edit_window_set_metadata (GmpcMetaDataEditWindow* self, GtkButton* button) {
-	GError * _inner_error_;
-	char* path;
-	gboolean _tmp0_ = FALSE;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (button != NULL);
-	_inner_error_ = NULL;
-	path = NULL;
-	if (self->priv->query_type == META_ALBUM_ART) {
-		_tmp0_ = TRUE;
-	} else {
-		_tmp0_ = self->priv->query_type == META_ARTIST_ART;
-	}
-	if (_tmp0_) {
-		char* _tmp1_;
-		path = (_tmp1_ = g_strdup ((const char*) g_object_get_data ((GObject*) button, "path")), _g_free0 (path), _tmp1_);
-		if (path != NULL) {
-			if (g_utf8_get_char (g_utf8_offset_to_pointer (path, 0)) == '/') {
-				MetaData* met;
-				MetaData* met_false;
-				met = meta_data_new ();
-				met->type = self->priv->query_type;
-				met->plugin_name = "User set";
-				met->content_type = META_DATA_CONTENT_URI;
-				meta_data_set_uri (met, path);
-				meta_data_set_cache (self->priv->song, META_DATA_AVAILABLE, met);
-				met_false = meta_data_new ();
-				met_false->type = self->priv->query_type;
-				met_false->plugin_name = "User set";
-				met_false->content_type = META_DATA_CONTENT_EMPTY;
-				g_signal_emit_by_name (gmw, "data-changed", self->priv->song, self->priv->query_type, META_DATA_UNAVAILABLE, met_false);
-				g_signal_emit_by_name (gmw, "data-changed", self->priv->song, self->priv->query_type, META_DATA_AVAILABLE, met);
-				_meta_data_free0 (met);
-				_meta_data_free0 (met_false);
-			} else {
-				GEADAsyncHandler* h;
-				h = gmpc_easy_async_downloader (path, _gmpc_meta_data_edit_window_store_image_gmpc_async_download_callback, self);
-				if (h != NULL) {
-					self->priv->downloads = g_list_append (self->priv->downloads, h);
-				}
-			}
-		} else {
-			char* base64;
-			base64 = g_strdup ((const char*) g_object_get_data ((GObject*) button, "data"));
-			if (base64 != NULL) {
-				char* filename;
-				gsize len;
-				guchar* _tmp3_;
-				gint data_size;
-				gint data_length1;
-				size_t _tmp2_;
-				guchar* data;
-				filename = gmpc_get_metadata_filename (self->priv->query_type, self->priv->song, NULL);
-				len = (gsize) 0;
-				data = (_tmp3_ = g_base64_decode (base64, &_tmp2_), data_length1 = _tmp2_, data_size = data_length1, _tmp3_);
-				{
-					MetaData* met;
-					MetaData* met_false;
-					g_file_set_contents (filename, (const char*) data, (gssize) len, &_inner_error_);
-					if (_inner_error_ != NULL) {
-						goto __catch24_g_error;
-					}
-					met = meta_data_new ();
-					met->type = self->priv->query_type;
-					met->plugin_name = "User set";
-					met->content_type = META_DATA_CONTENT_URI;
-					meta_data_set_uri (met, filename);
-					meta_data_set_cache (self->priv->song, META_DATA_AVAILABLE, met);
-					met_false = meta_data_new ();
-					met_false->type = self->priv->query_type;
-					met_false->plugin_name = "User set";
-					met_false->content_type = META_DATA_CONTENT_EMPTY;
-					g_signal_emit_by_name (gmw, "data-changed", self->priv->song, self->priv->query_type, META_DATA_UNAVAILABLE, met_false);
-					g_signal_emit_by_name (gmw, "data-changed", self->priv->song, self->priv->query_type, META_DATA_AVAILABLE, met);
-					_meta_data_free0 (met);
-					_meta_data_free0 (met_false);
-				}
-				goto __finally24;
-				__catch24_g_error:
-				{
-					GError * e;
-					e = _inner_error_;
-					_inner_error_ = NULL;
-					{
-						_g_error_free0 (e);
-					}
-				}
-				__finally24:
-				if (_inner_error_ != NULL) {
-					_g_free0 (filename);
-					data = (g_free (data), NULL);
-					_g_free0 (base64);
-					_g_free0 (path);
-					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-					g_clear_error (&_inner_error_);
-					return;
-				}
-				_g_free0 (filename);
-				data = (g_free (data), NULL);
-			}
-			_g_free0 (base64);
-		}
-	} else {
-		char* lyric;
-		char* _tmp4_;
-		char* file;
-		lyric = NULL;
-		lyric = (_tmp4_ = g_strdup ((const char*) g_object_get_data ((GObject*) button, "lyrics")), _g_free0 (lyric), _tmp4_);
-		file = gmpc_get_metadata_filename (self->priv->query_type, self->priv->song, NULL);
-		{
-			MetaData* met;
-			MetaData* met_false;
-			g_file_set_contents (file, lyric, (gssize) (-1), &_inner_error_);
-			if (_inner_error_ != NULL) {
-				goto __catch25_g_error;
-			}
-			met = meta_data_new ();
-			met->type = self->priv->query_type;
-			met->plugin_name = "User set";
-			met->content_type = META_DATA_CONTENT_URI;
-			meta_data_set_uri (met, file);
-			meta_data_set_cache (self->priv->song, META_DATA_AVAILABLE, met);
-			met_false = meta_data_new ();
-			met_false->type = self->priv->query_type;
-			met_false->plugin_name = "User set";
-			met_false->content_type = META_DATA_CONTENT_EMPTY;
-			g_signal_emit_by_name (gmw, "data-changed", self->priv->song, self->priv->query_type, META_DATA_UNAVAILABLE, met_false);
-			g_signal_emit_by_name (gmw, "data-changed", self->priv->song, self->priv->query_type, META_DATA_AVAILABLE, met);
-			_meta_data_free0 (met);
-			_meta_data_free0 (met_false);
-		}
-		goto __finally25;
-		__catch25_g_error:
-		{
-			GError * e;
-			e = _inner_error_;
-			_inner_error_ = NULL;
-			{
-				_g_error_free0 (e);
-			}
-		}
-		__finally25:
-		if (_inner_error_ != NULL) {
-			_g_free0 (lyric);
-			_g_free0 (file);
-			_g_free0 (path);
-			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-			g_clear_error (&_inner_error_);
-			return;
-		}
-		_g_free0 (lyric);
-		_g_free0 (file);
-	}
-	_g_free0 (path);
-}
-
-
-void gmpc_meta_data_edit_window_destroy_popup (GmpcMetaDataEditWindow* self, GtkButton* button) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (button != NULL);
-	gtk_object_destroy ((GtkObject*) self);
-}
-
-
-static void gmpc_meta_data_edit_window_clear_itemslist (GmpcMetaDataEditWindow* self) {
-	g_return_if_fail (self != NULL);
-	{
-		GList* client_collection;
-		GList* client_it;
-		client_collection = gtk_container_get_children ((GtkContainer*) self->priv->itemslist);
-		for (client_it = client_collection; client_it != NULL; client_it = client_it->next) {
-			GtkWidget* client;
-			client = _g_object_ref0 ((GtkWidget*) client_it->data);
-			{
-				gtk_object_destroy ((GtkObject*) client);
-				_g_object_unref0 (client);
-			}
-		}
-		_g_list_free0 (client_collection);
-	}
-}
-
-
-static gpointer _mpd_songDup0 (gpointer self) {
-	return self ? mpd_songDup (self) : NULL;
-}
-
-
-static void _gmpc_meta_data_edit_window_callback_gmpc_meta_data_callback (void* handle, const char* plugin_name, GList* list, gpointer self) {
-	gmpc_meta_data_edit_window_callback (self, handle, plugin_name, list);
-}
-
-
-void gmpc_meta_data_edit_window_refresh_query (GmpcMetaDataEditWindow* self, GtkButton* button) {
-	mpd_Song* ss;
-	char* _tmp0_;
-	char* _tmp1_;
-	char* _tmp2_;
-	gboolean _tmp3_ = FALSE;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (button != NULL);
-	gmpc_meta_data_edit_window_clear_itemslist (self);
-	g_log ("MetadataSelector", G_LOG_LEVEL_DEBUG, "gmpc-test-plugin.vala:466: Query metadata");
-	ss = _mpd_songDup0 (self->priv->song);
-	ss->artist = (_tmp0_ = g_strdup (gtk_entry_get_text (self->priv->artist_entry)), _g_free0 (ss->artist), _tmp0_);
-	ss->album = (_tmp1_ = g_strdup (gtk_entry_get_text (self->priv->album_entry)), _g_free0 (ss->album), _tmp1_);
-	ss->title = (_tmp2_ = g_strdup (gtk_entry_get_text (self->priv->title_entry)), _g_free0 (ss->title), _tmp2_);
-	if (self->priv->handle == NULL) {
-		_tmp3_ = self->priv->handle2 == NULL;
-	} else {
-		_tmp3_ = FALSE;
-	}
-	if (_tmp3_) {
-		gtk_widget_show ((GtkWidget*) self->priv->pbox);
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, FALSE);
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->combo, FALSE);
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->ilevent, FALSE);
-		g_log ("MetadataSelector", G_LOG_LEVEL_DEBUG, "gmpc-test-plugin.vala:477: Start metdata get_list query");
-		self->priv->handle = metadata_get_list (ss, self->priv->query_type, _gmpc_meta_data_edit_window_callback_gmpc_meta_data_callback, self);
-		g_log ("MetadataSelector", G_LOG_LEVEL_DEBUG, "gmpc-test-plugin.vala:479: Wait");
-	}
-	_mpd_freeSong0 (ss);
-}
-
-
-static void gmpc_meta_data_edit_window_combo_box_changed (GmpcMetaDataEditWindow* self, GtkComboBox* comb) {
-	gint active;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (comb != NULL);
-	gmpc_meta_data_edit_window_clear_itemslist (self);
-	active = gtk_combo_box_get_active (comb);
-	gtk_widget_set_sensitive ((GtkWidget*) self->priv->title_entry, FALSE);
-	gtk_widget_set_sensitive ((GtkWidget*) self->priv->album_entry, FALSE);
-	gtk_widget_set_sensitive ((GtkWidget*) self->priv->artist_entry, FALSE);
-	gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, FALSE);
-	gtk_widget_hide ((GtkWidget*) self->priv->warning_label);
-	if (active == 0) {
-		self->priv->query_type = META_ARTIST_ART;
-		if (self->priv->song->artist != NULL) {
-			gtk_widget_set_sensitive ((GtkWidget*) self->priv->artist_entry, TRUE);
-			gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-		} else {
-			gtk_widget_show ((GtkWidget*) self->priv->warning_label);
-		}
-	} else {
-		if (active == 1) {
-			gboolean _tmp0_ = FALSE;
-			self->priv->query_type = META_ALBUM_ART;
-			if (self->priv->song->artist != NULL) {
-				_tmp0_ = self->priv->song->album != NULL;
-			} else {
-				_tmp0_ = FALSE;
-			}
-			if (_tmp0_) {
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->artist_entry, TRUE);
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->album_entry, TRUE);
-				gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-			} else {
-				gtk_widget_show ((GtkWidget*) self->priv->warning_label);
-			}
-		} else {
-			if (active == 2) {
-				gboolean _tmp1_ = FALSE;
-				self->priv->query_type = META_SONG_TXT;
-				if (self->priv->song->artist != NULL) {
-					_tmp1_ = self->priv->song->title != NULL;
-				} else {
-					_tmp1_ = FALSE;
-				}
-				if (_tmp1_) {
-					gtk_widget_set_sensitive ((GtkWidget*) self->priv->artist_entry, TRUE);
-					gtk_widget_set_sensitive ((GtkWidget*) self->priv->title_entry, TRUE);
-					gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-				} else {
-					gtk_widget_show ((GtkWidget*) self->priv->warning_label);
-				}
-			} else {
-				if (active == 3) {
-					gboolean _tmp2_ = FALSE;
-					self->priv->query_type = META_ALBUM_TXT;
-					if (self->priv->song->artist != NULL) {
-						_tmp2_ = self->priv->song->album != NULL;
-					} else {
-						_tmp2_ = FALSE;
-					}
-					if (_tmp2_) {
-						gtk_widget_set_sensitive ((GtkWidget*) self->priv->artist_entry, TRUE);
-						gtk_widget_set_sensitive ((GtkWidget*) self->priv->album_entry, TRUE);
-						gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-					} else {
-						gtk_widget_show ((GtkWidget*) self->priv->warning_label);
-					}
-				} else {
-					if (active == 4) {
-						self->priv->query_type = META_ARTIST_TXT;
-						if (self->priv->song->artist != NULL) {
-							gtk_widget_set_sensitive ((GtkWidget*) self->priv->artist_entry, TRUE);
-							gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-						} else {
-							gtk_widget_show ((GtkWidget*) self->priv->warning_label);
-						}
-					} else {
-						if (active == 5) {
-							gboolean _tmp3_ = FALSE;
-							self->priv->query_type = META_SONG_GUITAR_TAB;
-							if (self->priv->song->artist != NULL) {
-								_tmp3_ = self->priv->song->title != NULL;
-							} else {
-								_tmp3_ = FALSE;
-							}
-							if (_tmp3_) {
-								gtk_widget_set_sensitive ((GtkWidget*) self->priv->artist_entry, TRUE);
-								gtk_widget_set_sensitive ((GtkWidget*) self->priv->title_entry, TRUE);
-								gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-							} else {
-								gtk_widget_show ((GtkWidget*) self->priv->warning_label);
-							}
-						}
-					}
-				}
-			}
-		}
-	}
-}
-
-
-static void _gmpc_meta_data_edit_window_b_cancel_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_meta_data_edit_window_b_cancel (self);
-}
-
-
-static void _gmpc_meta_data_edit_window_destroy_popup_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_meta_data_edit_window_destroy_popup (self, _sender);
-}
-
-
-static void _gmpc_meta_data_edit_window_combo_box_changed_gtk_combo_box_changed (GtkComboBox* _sender, gpointer self) {
-	gmpc_meta_data_edit_window_combo_box_changed (self, _sender);
-}
-
-
-static void _gmpc_meta_data_edit_window_refresh_query_gtk_button_clicked (GtkButton* _sender, gpointer self) {
-	gmpc_meta_data_edit_window_refresh_query (self, _sender);
-}
-
-
-static void _lambda38_ (GtkWidget* source, GtkStyle* old, GmpcMetaDataEditWindow* self) {
-	GdkColor _tmp0_;
-	g_return_if_fail (source != NULL);
-	gtk_widget_modify_bg (gtk_widget_get_parent ((GtkWidget*) self->priv->itemslist), GTK_STATE_NORMAL, (_tmp0_ = gtk_widget_get_style ((GtkWidget*) self)->base[GTK_STATE_NORMAL], &_tmp0_));
-}
-
-
-static void __lambda38__gtk_widget_style_set (GtkWidget* _sender, GtkStyle* previous_style, gpointer self) {
-	_lambda38_ (_sender, previous_style, self);
-}
-
-
-GmpcMetaDataEditWindow* gmpc_meta_data_edit_window_construct (GType object_type, const mpd_Song* song, MetaDataType type) {
-	GmpcMetaDataEditWindow * self;
-	GtkVBox* vbox;
-	mpd_Song* _tmp0_;
-	GtkHBox* _tmp1_;
-	GtkProgressBar* _tmp2_;
-	GtkButton* _tmp3_;
-	GtkScrolledWindow* _tmp4_;
-	GtkHBox* hbox;
-	GtkButton* button;
-	GtkLabel* _tmp5_;
-	char* _tmp6_;
-	GtkSizeGroup* group;
-	GtkHBox* qhbox;
-	GtkLabel* label;
-	GtkListStore* list;
-	GtkComboBox* _tmp7_;
-	GtkCellRenderer* renderer;
-	GtkCellRenderer* _tmp8_;
-	GtkHBox* _tmp9_;
-	GtkLabel* _tmp10_;
-	GtkImage* image;
-	GtkEntry* _tmp11_;
-	GtkHBox* _tmp12_;
-	GtkLabel* _tmp13_;
-	GtkImage* _tmp14_;
-	GtkEntry* _tmp15_;
-	GtkHBox* _tmp16_;
-	GtkLabel* _tmp17_;
-	GtkImage* _tmp18_;
-	GtkEntry* _tmp19_;
-	GtkButton* _tmp21_;
-	GtkButton* _tmp20_;
-	GtkAlignment* ali;
-	GtkEventBox* _tmp22_;
-	GdkColor _tmp23_;
-	g_return_val_if_fail (song != NULL, NULL);
-	self = g_object_newv (object_type, 0, NULL);
-	vbox = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-	self->priv->song = (_tmp0_ = _mpd_songDup0 (song), _mpd_freeSong0 (self->priv->song), _tmp0_);
-	self->priv->query_type = type;
-	self->priv->pbox = (_tmp1_ = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6)), _g_object_unref0 (self->priv->pbox), _tmp1_);
-	self->priv->bar = (_tmp2_ = g_object_ref_sink ((GtkProgressBar*) gtk_progress_bar_new ()), _g_object_unref0 (self->priv->bar), _tmp2_);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) self->priv->pbox, FALSE, FALSE, (guint) 0);
-	self->priv->cancel = (_tmp3_ = g_object_ref_sink ((GtkButton*) gtk_button_new_from_stock ("gtk-cancel")), _g_object_unref0 (self->priv->cancel), _tmp3_);
-	g_signal_connect_object (self->priv->cancel, "clicked", (GCallback) _gmpc_meta_data_edit_window_b_cancel_gtk_button_clicked, self, 0);
-	gtk_box_pack_start ((GtkBox*) self->priv->pbox, (GtkWidget*) self->priv->bar, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) self->priv->pbox, (GtkWidget*) self->priv->cancel, FALSE, FALSE, (guint) 0);
-	gtk_widget_show ((GtkWidget*) self->priv->bar);
-	gtk_widget_show ((GtkWidget*) self->priv->cancel);
-	gtk_widget_set_no_show_all ((GtkWidget*) self->priv->pbox, TRUE);
-	gtk_widget_hide ((GtkWidget*) self->priv->pbox);
-	self->priv->sw = (_tmp4_ = g_object_ref_sink ((GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL)), _g_object_unref0 (self->priv->sw), _tmp4_);
-	gtk_scrolled_window_set_policy (self->priv->sw, GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
-	gtk_scrolled_window_set_shadow_type (self->priv->sw, GTK_SHADOW_ETCHED_IN);
-	hbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	button = g_object_ref_sink ((GtkButton*) gtk_button_new_from_stock ("gtk-quit"));
-	g_signal_connect_object (button, "clicked", (GCallback) _gmpc_meta_data_edit_window_destroy_popup_gtk_button_clicked, self, 0);
-	gtk_box_pack_end ((GtkBox*) hbox, (GtkWidget*) button, FALSE, FALSE, (guint) 0);
-	gtk_box_pack_end ((GtkBox*) vbox, (GtkWidget*) hbox, FALSE, FALSE, (guint) 0);
-	self->priv->warning_label = (_tmp5_ = g_object_ref_sink ((GtkLabel*) gtk_label_new ("")), _g_object_unref0 (self->priv->warning_label), _tmp5_);
-	gtk_label_set_markup (self->priv->warning_label, _tmp6_ = g_strdup_printf ("<span size='x-large'>%s</span>", _ ("Insufficient information to store/fetch this metadata")));
-	_g_free0 (_tmp6_);
-	gtk_misc_set_alignment ((GtkMisc*) self->priv->warning_label, 0.0f, 0.5f);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) self->priv->warning_label, FALSE, FALSE, (guint) 0);
-	gtk_widget_hide ((GtkWidget*) self->priv->warning_label);
-	group = gtk_size_group_new (GTK_SIZE_GROUP_HORIZONTAL);
-	qhbox = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6));
-	label = NULL;
-	list = gtk_list_store_new (2, G_TYPE_STRING, G_TYPE_STRING, -1, NULL);
-	gtk_list_store_insert_with_values (list, NULL, -1, 0, "media-artist", 1, _ ("Artist art"), -1);
-	gtk_list_store_insert_with_values (list, NULL, -1, 0, "media-album", 1, _ ("Album art"), -1);
-	gtk_list_store_insert_with_values (list, NULL, -1, 0, "gtk-dnd", 1, _ ("Song lyrics"), -1);
-	gtk_list_store_insert_with_values (list, NULL, -1, 0, "media-album", 1, _ ("Album Info"), -1);
-	gtk_list_store_insert_with_values (list, NULL, -1, 0, "media-artist", 1, _ ("Artist Biography"), -1);
-	gtk_list_store_insert_with_values (list, NULL, -1, 0, "media-album", 1, _ ("Guitar Tab"), -1);
-	self->priv->combo = (_tmp7_ = g_object_ref_sink ((GtkComboBox*) gtk_combo_box_new_with_model ((GtkTreeModel*) list)), _g_object_unref0 (self->priv->combo), _tmp7_);
-	renderer = (GtkCellRenderer*) g_object_ref_sink ((GtkCellRendererPixbuf*) gtk_cell_renderer_pixbuf_new ());
-	gtk_cell_layout_pack_start ((GtkCellLayout*) self->priv->combo, renderer, FALSE);
-	gtk_cell_layout_add_attribute ((GtkCellLayout*) self->priv->combo, renderer, "icon-name", 0);
-	renderer = (_tmp8_ = (GtkCellRenderer*) g_object_ref_sink ((GtkCellRendererText*) gtk_cell_renderer_text_new ()), _g_object_unref0 (renderer), _tmp8_);
-	gtk_cell_layout_pack_start ((GtkCellLayout*) self->priv->combo, renderer, TRUE);
-	gtk_cell_layout_add_attribute ((GtkCellLayout*) self->priv->combo, renderer, "text", 1);
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) self->priv->combo, TRUE, TRUE, (guint) 0);
-	g_signal_connect_object (self->priv->combo, "changed", (GCallback) _gmpc_meta_data_edit_window_combo_box_changed_gtk_combo_box_changed, self, 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) qhbox, FALSE, FALSE, (guint) 0);
-	qhbox = (_tmp9_ = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6)), _g_object_unref0 (qhbox), _tmp9_);
-	label = (_tmp10_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Artist"))), _g_object_unref0 (label), _tmp10_);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	gtk_size_group_add_widget (group, (GtkWidget*) label);
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-	image = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-artist", GTK_ICON_SIZE_BUTTON));
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-	self->priv->artist_entry = (_tmp11_ = g_object_ref_sink ((GtkEntry*) gtk_entry_new ()), _g_object_unref0 (self->priv->artist_entry), _tmp11_);
-	gtk_entry_set_text (self->priv->artist_entry, song->artist);
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) self->priv->artist_entry, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) qhbox, FALSE, FALSE, (guint) 0);
-	qhbox = (_tmp12_ = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6)), _g_object_unref0 (qhbox), _tmp12_);
-	label = (_tmp13_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Album"))), _g_object_unref0 (label), _tmp13_);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	gtk_size_group_add_widget (group, (GtkWidget*) label);
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-	image = (_tmp14_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-album", GTK_ICON_SIZE_BUTTON)), _g_object_unref0 (image), _tmp14_);
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-	self->priv->album_entry = (_tmp15_ = g_object_ref_sink ((GtkEntry*) gtk_entry_new ()), _g_object_unref0 (self->priv->album_entry), _tmp15_);
-	if (song->album != NULL) {
-		gtk_entry_set_text (self->priv->album_entry, song->album);
-	}
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) self->priv->album_entry, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) qhbox, FALSE, FALSE, (guint) 0);
-	qhbox = (_tmp16_ = g_object_ref_sink ((GtkHBox*) gtk_hbox_new (FALSE, 6)), _g_object_unref0 (qhbox), _tmp16_);
-	label = (_tmp17_ = g_object_ref_sink ((GtkLabel*) gtk_label_new (_ ("Title"))), _g_object_unref0 (label), _tmp17_);
-	gtk_misc_set_alignment ((GtkMisc*) label, 0.0f, 0.5f);
-	gtk_size_group_add_widget (group, (GtkWidget*) label);
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) label, FALSE, FALSE, (guint) 0);
-	image = (_tmp18_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_icon_name ("media-title", GTK_ICON_SIZE_BUTTON)), _g_object_unref0 (image), _tmp18_);
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) image, FALSE, FALSE, (guint) 0);
-	self->priv->title_entry = (_tmp19_ = g_object_ref_sink ((GtkEntry*) gtk_entry_new ()), _g_object_unref0 (self->priv->title_entry), _tmp19_);
-	if (song->title != NULL) {
-		gtk_entry_set_text (self->priv->title_entry, song->title);
-	}
-	gtk_box_pack_start ((GtkBox*) qhbox, (GtkWidget*) self->priv->title_entry, TRUE, TRUE, (guint) 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) qhbox, FALSE, FALSE, (guint) 0);
-	if (type != META_ALBUM_ART) {
-		gtk_widget_set_sensitive ((GtkWidget*) self->priv->album_entry, FALSE);
-	}
-	self->priv->refresh = (_tmp21_ = _g_object_ref0 (button = (_tmp20_ = g_object_ref_sink ((GtkButton*) gtk_button_new_with_label (_ ("Query"))), _g_object_unref0 (button), _tmp20_)), _g_object_unref0 (self->priv->refresh), _tmp21_);
-	ali = g_object_ref_sink ((GtkAlignment*) gtk_alignment_new (1.0f, 0.5f, 0.0f, 0.0f));
-	gtk_container_add ((GtkContainer*) ali, (GtkWidget*) button);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) ali, FALSE, FALSE, (guint) 0);
-	g_signal_connect_object (button, "clicked", (GCallback) _gmpc_meta_data_edit_window_refresh_query_gtk_button_clicked, self, 0);
-	gtk_box_pack_start ((GtkBox*) vbox, (GtkWidget*) self->priv->sw, TRUE, TRUE, (guint) 0);
-	gtk_container_add ((GtkContainer*) self, (GtkWidget*) vbox);
-	gtk_widget_hide_on_delete ((GtkWidget*) self);
-	self->priv->ilevent = (_tmp22_ = g_object_ref_sink ((GtkEventBox*) gtk_event_box_new ()), _g_object_unref0 (self->priv->ilevent), _tmp22_);
-	gtk_container_set_border_width ((GtkContainer*) self->priv->itemslist, (guint) 8);
-	gtk_event_box_set_visible_window (self->priv->ilevent, TRUE);
-	gtk_widget_modify_bg ((GtkWidget*) self->priv->ilevent, GTK_STATE_NORMAL, (_tmp23_ = gtk_widget_get_style ((GtkWidget*) self)->base[GTK_STATE_NORMAL], &_tmp23_));
-	g_signal_connect_object ((GtkWidget*) self, "style-set", (GCallback) __lambda38__gtk_widget_style_set, self, 0);
-	gtk_container_add ((GtkContainer*) self->priv->ilevent, (GtkWidget*) self->priv->itemslist);
-	gtk_scrolled_window_add_with_viewport (self->priv->sw, (GtkWidget*) self->priv->ilevent);
-	gtk_widget_show_all ((GtkWidget*) self);
-	if (type == META_ARTIST_ART) {
-		gtk_combo_box_set_active (self->priv->combo, 0);
-	} else {
-		if (type == META_ALBUM_ART) {
-			gtk_combo_box_set_active (self->priv->combo, 1);
-		} else {
-			if (type == META_SONG_TXT) {
-				gtk_combo_box_set_active (self->priv->combo, 2);
-			} else {
-				if (type == META_ALBUM_TXT) {
-					gtk_combo_box_set_active (self->priv->combo, 3);
-				} else {
-					if (type == META_ARTIST_TXT) {
-						gtk_combo_box_set_active (self->priv->combo, 4);
-					} else {
-						if (type == META_SONG_GUITAR_TAB) {
-							gtk_combo_box_set_active (self->priv->combo, 5);
-						}
-					}
-				}
-			}
-		}
-	}
-	_g_object_unref0 (vbox);
-	_g_object_unref0 (hbox);
-	_g_object_unref0 (button);
-	_g_object_unref0 (group);
-	_g_object_unref0 (qhbox);
-	_g_object_unref0 (label);
-	_g_object_unref0 (list);
-	_g_object_unref0 (renderer);
-	_g_object_unref0 (image);
-	_g_object_unref0 (ali);
-	return self;
-}
-
-
-GmpcMetaDataEditWindow* gmpc_meta_data_edit_window_new (const mpd_Song* song, MetaDataType type) {
-	return gmpc_meta_data_edit_window_construct (GMPC_META_DATA_TYPE_EDIT_WINDOW, song, type);
-}
-
-
-void gmpc_meta_data_edit_window_b_cancel (GmpcMetaDataEditWindow* self) {
-	g_return_if_fail (self != NULL);
-	if (self->priv->handle != NULL) {
-		metadata_get_list_cancel (self->priv->handle);
-		self->priv->handle = NULL;
-	}
-	if (self->priv->handle2 != NULL) {
-		metadata_get_list_cancel (self->priv->handle2);
-		self->priv->handle2 = NULL;
-	}
-	g_list_first (self->priv->downloads);
-	while (TRUE) {
-		GEADAsyncHandler* handle;
-		if (!(self->priv->downloads != NULL)) {
-			break;
-		}
-		handle = (const GEADAsyncHandler*) self->priv->downloads->data;
-		gmpc_easy_async_cancel (handle);
-		g_list_first (self->priv->downloads);
-	}
-	gtk_widget_hide ((GtkWidget*) self->priv->pbox);
-	gtk_widget_set_sensitive ((GtkWidget*) self->priv->refresh, TRUE);
-	gtk_widget_set_sensitive ((GtkWidget*) self->priv->combo, TRUE);
-}
-
-
-static void _lambda39_ (GtkWidget* source, GdkRectangle* alloc, GmpcMetaDataEditWindow* self) {
-	g_return_if_fail (source != NULL);
-	cfg_set_single_value_as_int (config, "Metadata Selector", "window_width", (*alloc).width);
-	cfg_set_single_value_as_int (config, "Metadata Selector", "window_height", (*alloc).height);
-}
-
-
-static void __lambda39__gtk_widget_size_allocate (GtkWidget* _sender, GdkRectangle* allocation, gpointer self) {
-	_lambda39_ (_sender, allocation, self);
-}
-
-
-static GObject * gmpc_meta_data_edit_window_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcMetaDataEditWindow * self;
-	parent_class = G_OBJECT_CLASS (gmpc_meta_data_edit_window_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_META_DATA_EDIT_WINDOW (obj);
-	{
-		gint height;
-		gint width;
-		g_object_set ((GtkWindow*) self, "type", GTK_WINDOW_TOPLEVEL, NULL);
-		height = cfg_get_single_value_as_int_with_default (config, "Metadata Selector", "window_height", 600);
-		width = cfg_get_single_value_as_int_with_default (config, "Metadata Selector", "window_width", 480);
-		gtk_window_resize ((GtkWindow*) self, width, height);
-		gtk_container_set_border_width ((GtkContainer*) self, (guint) 8);
-		g_signal_connect_object ((GtkWidget*) self, "size-allocate", (GCallback) __lambda39__gtk_widget_size_allocate, self, 0);
-	}
-	return obj;
-}
-
-
-static void gmpc_meta_data_edit_window_class_init (GmpcMetaDataEditWindowClass * klass) {
-	gmpc_meta_data_edit_window_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcMetaDataEditWindowPrivate));
-	G_OBJECT_CLASS (klass)->constructor = gmpc_meta_data_edit_window_constructor;
-	G_OBJECT_CLASS (klass)->finalize = gmpc_meta_data_edit_window_finalize;
-}
-
-
-static void gmpc_meta_data_edit_window_instance_init (GmpcMetaDataEditWindow * self) {
-	self->priv = GMPC_META_DATA_EDIT_WINDOW_GET_PRIVATE (self);
-	self->priv->song = NULL;
-	self->priv->query_type = META_ALBUM_ART;
-	self->priv->downloads = NULL;
-	self->priv->handle = NULL;
-	self->priv->handle2 = NULL;
-	self->priv->pbox = NULL;
-	self->priv->warning_label = NULL;
-	self->priv->cancel = NULL;
-	self->priv->refresh = NULL;
-	self->priv->combo = NULL;
-	self->priv->bar = NULL;
-	self->priv->sw = NULL;
-	self->priv->ilevent = NULL;
-	self->priv->itemslist = g_object_ref_sink ((GtkVBox*) gtk_vbox_new (FALSE, 6));
-}
-
-
-static void gmpc_meta_data_edit_window_finalize (GObject* obj) {
-	GmpcMetaDataEditWindow * self;
-	self = GMPC_META_DATA_EDIT_WINDOW (obj);
-	{
-		gmpc_meta_data_edit_window_b_cancel (self);
-	}
-	_mpd_freeSong0 (self->priv->song);
-	_g_list_free0 (self->priv->downloads);
-	_g_object_unref0 (self->priv->pbox);
-	_g_object_unref0 (self->priv->warning_label);
-	_g_object_unref0 (self->priv->artist_entry);
-	_g_object_unref0 (self->priv->album_entry);
-	_g_object_unref0 (self->priv->title_entry);
-	_g_object_unref0 (self->priv->cancel);
-	_g_object_unref0 (self->priv->refresh);
-	_g_object_unref0 (self->priv->combo);
-	_g_object_unref0 (self->priv->bar);
-	_g_object_unref0 (self->priv->sw);
-	_g_object_unref0 (self->priv->ilevent);
-	_g_object_unref0 (self->priv->itemslist);
-	G_OBJECT_CLASS (gmpc_meta_data_edit_window_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_meta_data_edit_window_get_type (void) {
-	static GType gmpc_meta_data_edit_window_type_id = 0;
-	if (gmpc_meta_data_edit_window_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcMetaDataEditWindowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_meta_data_edit_window_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcMetaDataEditWindow), 0, (GInstanceInitFunc) gmpc_meta_data_edit_window_instance_init, NULL };
-		gmpc_meta_data_edit_window_type_id = g_type_register_static (GTK_TYPE_WINDOW, "GmpcMetaDataEditWindow", &g_define_type_info, 0);
-	}
-	return gmpc_meta_data_edit_window_type_id;
-}
-
-
-static gint* gmpc_test_plugin_real_get_version (GmpcPluginBase* base, int* result_length1) {
-	GmpcTestPlugin * self;
-	gint* result;
-	gint* _tmp0_;
-	self = (GmpcTestPlugin*) base;
-	result = (_tmp0_ = GMPC_TEST_PLUGIN_version, *result_length1 = G_N_ELEMENTS (GMPC_TEST_PLUGIN_version), _tmp0_);
-	return result;
-}
-
-
-static const char* gmpc_test_plugin_real_get_name (GmpcPluginBase* base) {
-	GmpcTestPlugin * self;
-	const char* result;
-	self = (GmpcTestPlugin*) base;
-	result = "Vala test plugin";
-	return result;
-}
-
-
-static void gmpc_test_plugin_real_save_yourself (GmpcPluginBase* base) {
-	GmpcTestPlugin * self;
-	self = (GmpcTestPlugin*) base;
-}
-
-
-static gboolean gmpc_test_plugin_real_get_enabled (GmpcPluginBase* base) {
-	GmpcTestPlugin * self;
-	gboolean result;
-	self = (GmpcTestPlugin*) base;
-	result = (gboolean) cfg_get_single_value_as_int_with_default (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "enabled", 1);
-	return result;
-}
-
-
-static void gmpc_test_plugin_real_set_enabled (GmpcPluginBase* base, gboolean state) {
-	GmpcTestPlugin * self;
-	self = (GmpcTestPlugin*) base;
-	cfg_set_single_value_as_int (config, gmpc_plugin_base_get_name ((GmpcPluginBase*) self), "enabled", (gint) state);
-}
-
-
-static void _g_list_free_gtk_tree_path_free (GList* self) {
-	g_list_foreach (self, (GFunc) gtk_tree_path_free, NULL);
-	g_list_free (self);
-}
-
-
-static void gmpc_test_plugin_menu_activate_tree (GmpcTestPlugin* self, GtkMenuItem* item) {
-	GtkTreeIter iter = {0};
-	GtkTreeView* tv;
-	GtkTreeModel* model;
-	GtkTreeSelection* selection;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	tv = _g_object_ref0 (GTK_TREE_VIEW (g_object_get_data ((GObject*) item, "treeview")));
-	model = _g_object_ref0 (gtk_tree_view_get_model (tv));
-	selection = _g_object_ref0 (gtk_tree_view_get_selection (tv));
-	{
-		GtkTreeModel* _tmp2_;
-		GList* _tmp1_;
-		GtkTreeModel* _tmp0_ = NULL;
-		GList* path_collection;
-		GList* path_it;
-		path_collection = (_tmp1_ = gtk_tree_selection_get_selected_rows (selection, &_tmp0_), model = (_tmp2_ = _g_object_ref0 (_tmp0_), _g_object_unref0 (model), _tmp2_), _tmp1_);
-		for (path_it = path_collection; path_it != NULL; path_it = path_it->next) {
-			GtkTreePath* path;
-			path = (GtkTreePath*) path_it->data;
-			{
-				if (gtk_tree_model_get_iter (model, &iter, path)) {
-					const mpd_Song* song;
-					song = NULL;
-					gtk_tree_model_get (model, &iter, 0, &song, -1);
-					if (song != NULL) {
-						GmpcMetaDataEditWindow* _tmp3_;
-						_tmp3_ = g_object_ref_sink (gmpc_meta_data_edit_window_new (song, META_ALBUM_ART));
-						_g_object_unref0 (_tmp3_);
-					}
-				}
-			}
-		}
-		__g_list_free_gtk_tree_path_free0 (path_collection);
-	}
-	_g_object_unref0 (tv);
-	_g_object_unref0 (model);
-	_g_object_unref0 (selection);
-}
-
-
-static void _gmpc_test_plugin_menu_activate_tree_gtk_menu_item_activate (GtkImageMenuItem* _sender, gpointer self) {
-	gmpc_test_plugin_menu_activate_tree (self, _sender);
-}
-
-
-static gint gmpc_test_plugin_real_song_list (GmpcPluginSongListIface* base, GtkWidget* tree, GtkMenu* menu) {
-	GmpcTestPlugin * self;
-	gint result;
-	GtkTreeView* tv;
-	GtkTreeSelection* selection;
-	self = (GmpcTestPlugin*) base;
-	g_return_val_if_fail (tree != NULL, 0);
-	g_return_val_if_fail (menu != NULL, 0);
-	tv = _g_object_ref0 (GTK_TREE_VIEW (tree));
-	selection = _g_object_ref0 (gtk_tree_view_get_selection (tv));
-	if (gtk_tree_selection_count_selected_rows (selection) > 0) {
-		GtkImageMenuItem* item;
-		GtkImage* _tmp0_;
-		item = g_object_ref_sink ((GtkImageMenuItem*) gtk_image_menu_item_new_with_label (_ ("Metadata selector")));
-		gtk_image_menu_item_set_image (item, (GtkWidget*) (_tmp0_ = g_object_ref_sink ((GtkImage*) gtk_image_new_from_stock ("gtk-edit", GTK_ICON_SIZE_MENU))));
-		_g_object_unref0 (_tmp0_);
-		g_object_set_data ((GObject*) item, "treeview", tv);
-		gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) ((GtkMenuItem*) item));
-		g_signal_connect_object ((GtkMenuItem*) item, "activate", (GCallback) _gmpc_test_plugin_menu_activate_tree_gtk_menu_item_activate, self, 0);
-		result = 1;
-		_g_object_unref0 (item);
-		_g_object_unref0 (tv);
-		_g_object_unref0 (selection);
-		return result;
-	}
-	result = 0;
-	_g_object_unref0 (tv);
-	_g_object_unref0 (selection);
-	return result;
-}
-
-
-void gmpc_test_plugin_menu_activated_album (GmpcTestPlugin* self, GtkMenuItem* item) {
-	const mpd_Song* song;
-	GmpcMetaDataEditWindow* _tmp0_;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (item != NULL);
-	song = mpd_playlist_get_current_song (connection);
-	_tmp0_ = g_object_ref_sink (gmpc_meta_data_edit_window_new (song, META_ALBUM_ART));
-	_g_object_unref0 (_tmp0_);
-}
-
-
-static void _gmpc_test_plugin_menu_activated_album_gtk_menu_item_activate (GtkMenuItem* _sender, gpointer self) {
-	gmpc_test_plugin_menu_activated_album (self, _sender);
-}
-
-
-static gint gmpc_test_plugin_real_tool_menu_integration (GmpcPluginToolMenuIface* base, GtkMenu* menu) {
-	GmpcTestPlugin * self;
-	gint result;
-	GtkMenuItem* item;
-	self = (GmpcTestPlugin*) base;
-	g_return_val_if_fail (menu != NULL, 0);
-	item = g_object_ref_sink ((GtkMenuItem*) gtk_menu_item_new_with_label ("Edit metadata current song"));
-	gtk_menu_shell_append ((GtkMenuShell*) menu, (GtkWidget*) item);
-	g_signal_connect_object (item, "activate", (GCallback) _gmpc_test_plugin_menu_activated_album_gtk_menu_item_activate, self, 0);
-	result = 2;
-	_g_object_unref0 (item);
-	return result;
-}
-
-
-GmpcTestPlugin* gmpc_test_plugin_construct (GType object_type) {
-	GmpcTestPlugin * self;
-	self = g_object_newv (object_type, 0, NULL);
-	return self;
-}
-
-
-GmpcTestPlugin* gmpc_test_plugin_new (void) {
-	return gmpc_test_plugin_construct (GMPC_TYPE_TEST_PLUGIN);
-}
-
-
-static GObject * gmpc_test_plugin_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
-	GObject * obj;
-	GObjectClass * parent_class;
-	GmpcTestPlugin * self;
-	parent_class = G_OBJECT_CLASS (gmpc_test_plugin_parent_class);
-	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
-	self = GMPC_TEST_PLUGIN (obj);
-	{
-		((GmpcPluginBase*) self)->plugin_type = 8 + 4;
-	}
-	return obj;
-}
-
-
-static void gmpc_test_plugin_class_init (GmpcTestPluginClass * klass) {
-	gmpc_test_plugin_parent_class = g_type_class_peek_parent (klass);
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_version = gmpc_test_plugin_real_get_version;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_name = gmpc_test_plugin_real_get_name;
-	GMPC_PLUGIN_BASE_CLASS (klass)->save_yourself = gmpc_test_plugin_real_save_yourself;
-	GMPC_PLUGIN_BASE_CLASS (klass)->get_enabled = gmpc_test_plugin_real_get_enabled;
-	GMPC_PLUGIN_BASE_CLASS (klass)->set_enabled = gmpc_test_plugin_real_set_enabled;
-	G_OBJECT_CLASS (klass)->constructor = gmpc_test_plugin_constructor;
-}
-
-
-static void gmpc_test_plugin_gmpc_plugin_tool_menu_iface_interface_init (GmpcPluginToolMenuIfaceIface * iface) {
-	gmpc_test_plugin_gmpc_plugin_tool_menu_iface_parent_iface = g_type_interface_peek_parent (iface);
-	iface->tool_menu_integration = gmpc_test_plugin_real_tool_menu_integration;
-}
-
-
-static void gmpc_test_plugin_gmpc_plugin_song_list_iface_interface_init (GmpcPluginSongListIfaceIface * iface) {
-	gmpc_test_plugin_gmpc_plugin_song_list_iface_parent_iface = g_type_interface_peek_parent (iface);
-	iface->song_list = gmpc_test_plugin_real_song_list;
-}
-
-
-static void gmpc_test_plugin_instance_init (GmpcTestPlugin * self) {
-}
-
-
-GType gmpc_test_plugin_get_type (void) {
-	static GType gmpc_test_plugin_type_id = 0;
-	if (gmpc_test_plugin_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcTestPluginClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_test_plugin_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcTestPlugin), 0, (GInstanceInitFunc) gmpc_test_plugin_instance_init, NULL };
-		static const GInterfaceInfo gmpc_plugin_tool_menu_iface_info = { (GInterfaceInitFunc) gmpc_test_plugin_gmpc_plugin_tool_menu_iface_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
-		static const GInterfaceInfo gmpc_plugin_song_list_iface_info = { (GInterfaceInitFunc) gmpc_test_plugin_gmpc_plugin_song_list_iface_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
-		gmpc_test_plugin_type_id = g_type_register_static (GMPC_PLUGIN_TYPE_BASE, "GmpcTestPlugin", &g_define_type_info, 0);
-		g_type_add_interface_static (gmpc_test_plugin_type_id, GMPC_PLUGIN_TYPE_TOOL_MENU_IFACE, &gmpc_plugin_tool_menu_iface_info);
-		g_type_add_interface_static (gmpc_test_plugin_type_id, GMPC_PLUGIN_TYPE_SONG_LIST_IFACE, &gmpc_plugin_song_list_iface_info);
-	}
-	return gmpc_test_plugin_type_id;
-}
-
-
-
-
diff --git a/src/vala/gmpc-url-fetching-gui.c b/src/vala/gmpc-url-fetching-gui.c
deleted file mode 100644
index 3e49e98..0000000
--- a/src/vala/gmpc-url-fetching-gui.c
+++ /dev/null
@@ -1,327 +0,0 @@
-/* gmpc-url-fetching-gui.c generated by valac, the Vala compiler
- * generated from gmpc-url-fetching-gui.vala, do not modify */
-
-/* Gnome Music Player Client (GMPC)
- * Copyright (C) 2004-2010 Qball Cow <qball@sarine.nl>
- * Project homepage: http://gmpc.wikia.com/
- 
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-*/
-
-#include <glib.h>
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <gtktransition.h>
-#include "gmpc-extras.h"
-#include <stdlib.h>
-#include <string.h>
-#include <stdio.h>
-#include <plugin.h>
-#include <float.h>
-#include <math.h>
-
-
-#define GMPC_URL_FETCHING_GUI_TYPE_STATE (gmpc_url_fetching_gui_state_get_type ())
-#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
-#define _g_free0(var) (var = (g_free (var), NULL))
-#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
-
-typedef enum  {
-	GMPC_URL_FETCHING_GUI_STATE_NORMAL,
-	GMPC_URL_FETCHING_GUI_STATE_PROCESSING,
-	GMPC_URL_FETCHING_GUI_STATE_ERROR,
-	GMPC_URL_FETCHING_GUI_STATE_DONE
-} GmpcUrlFetchingGuiState;
-
-struct _GmpcUrlFetchingGuiPrivate {
-	GtkBuilder* builder;
-	GmpcUrlFetchingGuiParseUrl parse_callback;
-	gpointer parse_callback_target;
-	GDestroyNotify parse_callback_target_destroy_notify;
-	GmpcUrlFetchingGuiValidateUrl validate_callback;
-	gpointer validate_callback_target;
-	GDestroyNotify validate_callback_target_destroy_notify;
-	GDestroyNotify destroy_cb;
-	GmpcUrlFetchingGuiState state_counter;
-};
-
-
-static gpointer gmpc_url_fetching_gui_parent_class = NULL;
-
-#define use_transition_ufg TRUE
-static GType gmpc_url_fetching_gui_state_get_type (void);
-#define GMPC_URL_FETCHING_GUI_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GMPC_URL_FETCHING_TYPE_GUI, GmpcUrlFetchingGuiPrivate))
-enum  {
-	GMPC_URL_FETCHING_GUI_DUMMY_PROPERTY
-};
-static void gmpc_url_fetching_gui_add_url_dialog_response (GmpcUrlFetchingGui* self, gint response_id);
-static void gmpc_url_fetching_gui_url_entry_changed (GmpcUrlFetchingGui* self, GtkEditable* editable);
-static void _gmpc_url_fetching_gui_add_url_dialog_response_gtk_dialog_response (GtkDialog* _sender, gint response_id, gpointer self);
-static void _gmpc_url_fetching_gui_url_entry_changed_gtk_editable_changed (GtkEditable* _sender, gpointer self);
-static void gmpc_url_fetching_gui_sensitive (GmpcUrlFetchingGui* self, gboolean state);
-static void gmpc_url_fetching_gui_finalize (GObject* obj);
-
-
-
-
-static GType gmpc_url_fetching_gui_state_get_type (void) {
-	static GType gmpc_url_fetching_gui_state_type_id = 0;
-	if (G_UNLIKELY (gmpc_url_fetching_gui_state_type_id == 0)) {
-		static const GEnumValue values[] = {{GMPC_URL_FETCHING_GUI_STATE_NORMAL, "GMPC_URL_FETCHING_GUI_STATE_NORMAL", "normal"}, {GMPC_URL_FETCHING_GUI_STATE_PROCESSING, "GMPC_URL_FETCHING_GUI_STATE_PROCESSING", "processing"}, {GMPC_URL_FETCHING_GUI_STATE_ERROR, "GMPC_URL_FETCHING_GUI_STATE_ERROR", "error"}, {GMPC_URL_FETCHING_GUI_STATE_DONE, "GMPC_URL_FETCHING_GUI_STATE_DONE", "done"}, {0, NULL, NULL}};
-		gmpc_url_fetching_gui_state_type_id = g_enum_register_static ("GmpcUrlFetchingGuiState", values);
-	}
-	return gmpc_url_fetching_gui_state_type_id;
-}
-
-
-static void gmpc_url_fetching_gui_add_url_dialog_response (GmpcUrlFetchingGui* self, gint response_id) {
-	g_return_if_fail (self != NULL);
-	if (response_id == 1) {
-		GtkEntry* entry;
-		char* url;
-		entry = GTK_ENTRY (gtk_builder_get_object (self->priv->builder, "url_entry"));
-		url = g_strdup (gtk_entry_get_text (entry));
-		self->priv->parse_callback (self, url, self->priv->parse_callback_target);
-		_g_free0 (url);
-		return;
-	}
-	fprintf (stdout, "destroy callback\n");
-	self->priv->destroy_cb (self);
-}
-
-
-static gpointer _g_object_ref0 (gpointer self) {
-	return self ? g_object_ref (self) : NULL;
-}
-
-
-static void gmpc_url_fetching_gui_url_entry_changed (GmpcUrlFetchingGui* self, GtkEditable* editable) {
-	GtkButton* add_button;
-	char* text;
-	gboolean _tmp0_ = FALSE;
-	gboolean _tmp1_ = FALSE;
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (editable != NULL);
-	add_button = _g_object_ref0 (GTK_BUTTON (gtk_builder_get_object (self->priv->builder, "add_button")));
-	text = g_strdup (gtk_entry_get_text (GTK_ENTRY (editable)));
-	if (text != NULL) {
-		_tmp1_ = self->priv->validate_callback != NULL;
-	} else {
-		_tmp1_ = FALSE;
-	}
-	if (_tmp1_) {
-		_tmp0_ = self->priv->validate_callback (self, text, self->priv->validate_callback_target);
-	} else {
-		_tmp0_ = FALSE;
-	}
-	if (_tmp0_) {
-		gtk_widget_set_sensitive ((GtkWidget*) add_button, TRUE);
-	} else {
-		gtk_widget_set_sensitive ((GtkWidget*) add_button, FALSE);
-	}
-	_g_object_unref0 (add_button);
-	_g_free0 (text);
-}
-
-
-static void _gmpc_url_fetching_gui_add_url_dialog_response_gtk_dialog_response (GtkDialog* _sender, gint response_id, gpointer self) {
-	gmpc_url_fetching_gui_add_url_dialog_response (self, response_id);
-}
-
-
-static void _gmpc_url_fetching_gui_url_entry_changed_gtk_editable_changed (GtkEditable* _sender, gpointer self) {
-	gmpc_url_fetching_gui_url_entry_changed (self, _sender);
-}
-
-
-GmpcUrlFetchingGui* gmpc_url_fetching_gui_construct (GType object_type, GmpcUrlFetchingGuiParseUrl parse_callback, void* parse_callback_target, GmpcUrlFetchingGuiValidateUrl validate_callback, void* validate_callback_target, GDestroyNotify destroy_cb) {
-	GError * _inner_error_;
-	GmpcUrlFetchingGui * self;
-	GmpcUrlFetchingGuiParseUrl _tmp0_;
-	GmpcUrlFetchingGuiValidateUrl _tmp1_;
-	GtkDialog* dialog;
-	GtkEntry* entry;
-	_inner_error_ = NULL;
-	self = (GmpcUrlFetchingGui*) g_object_new (object_type, NULL);
-	self->priv->parse_callback = (_tmp0_ = parse_callback, ((self->priv->parse_callback_target_destroy_notify == NULL) ? NULL : self->priv->parse_callback_target_destroy_notify (self->priv->parse_callback_target), self->priv->parse_callback = NULL, self->priv->parse_callback_target = NULL, self->priv->parse_callback_target_destroy_notify = NULL), self->priv->parse_callback_target = parse_callback_target, self->priv->parse_callback_target_destroy_notify = NULL, _tmp0_);
-	self->priv->validate_callback = (_tmp1_ = validate_callback, ((self->priv->validate_callback_target_destroy_notify == NULL) ? NULL : self->priv->validate_callback_target_destroy_notify (self->priv->validate_callback_target), self->priv->validate_callback = NULL, self->priv->validate_callback_target = NULL, self->priv->validate_callback_target_destroy_notify = NULL), self->priv->validate_callback_target = validate_callback_target, self->priv->validate_callback_target_destroy_notify = NULL, _tmp1_);
-	self->priv->destroy_cb = destroy_cb;
-	{
-		char* _tmp2_;
-		gtk_builder_add_from_file (self->priv->builder, _tmp2_ = gmpc_get_full_glade_path ("gmpc-add-url.ui"), &_inner_error_);
-		if (_inner_error_ != NULL) {
-			goto __catch16_g_error;
-		}
-		_g_free0 (_tmp2_);
-	}
-	goto __finally16;
-	__catch16_g_error:
-	{
-		GError * e;
-		e = _inner_error_;
-		_inner_error_ = NULL;
-		{
-			g_error ("gmpc-url-fetching-gui.vala:95: Failed to load GtkBuilder file: %s", e->message);
-			_g_error_free0 (e);
-		}
-	}
-	__finally16:
-	if (_inner_error_ != NULL) {
-		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
-		g_clear_error (&_inner_error_);
-		return NULL;
-	}
-	dialog = _g_object_ref0 (GTK_DIALOG (gtk_builder_get_object (self->priv->builder, "add_url_dialog")));
-	gtk_window_set_transient_for ((GtkWindow*) dialog, (GtkWindow *)playlist3_get_window ());
-	gtk_widget_show ((GtkWidget*) dialog);
-	entry = _g_object_ref0 (GTK_ENTRY (gtk_builder_get_object (self->priv->builder, "url_entry")));
-	g_signal_connect_object (dialog, "response", (GCallback) _gmpc_url_fetching_gui_add_url_dialog_response_gtk_dialog_response, self, 0);
-	g_signal_connect_object ((GtkEditable*) entry, "changed", (GCallback) _gmpc_url_fetching_gui_url_entry_changed_gtk_editable_changed, self, 0);
-	_g_object_unref0 (dialog);
-	_g_object_unref0 (entry);
-	return self;
-}
-
-
-GmpcUrlFetchingGui* gmpc_url_fetching_gui_new (GmpcUrlFetchingGuiParseUrl parse_callback, void* parse_callback_target, GmpcUrlFetchingGuiValidateUrl validate_callback, void* validate_callback_target, GDestroyNotify destroy_cb) {
-	return gmpc_url_fetching_gui_construct (GMPC_URL_FETCHING_TYPE_GUI, parse_callback, parse_callback_target, validate_callback, validate_callback_target, destroy_cb);
-}
-
-
-static void gmpc_url_fetching_gui_sensitive (GmpcUrlFetchingGui* self, gboolean state) {
-	GtkEntry* entry;
-	GtkButton* add_button;
-	GtkButton* close_button;
-	GtkProgressBar* progress;
-	g_return_if_fail (self != NULL);
-	if (self->priv->builder == NULL) {
-		return;
-	}
-	entry = _g_object_ref0 (GTK_ENTRY (gtk_builder_get_object (self->priv->builder, "url_entry")));
-	gtk_widget_set_sensitive ((GtkWidget*) entry, state);
-	add_button = _g_object_ref0 (GTK_BUTTON (gtk_builder_get_object (self->priv->builder, "add_button")));
-	gtk_widget_set_sensitive ((GtkWidget*) add_button, state);
-	close_button = _g_object_ref0 (GTK_BUTTON (gtk_builder_get_object (self->priv->builder, "close_button")));
-	gtk_widget_set_sensitive ((GtkWidget*) close_button, state);
-	progress = _g_object_ref0 (GTK_PROGRESS_BAR (gtk_builder_get_object (self->priv->builder, "url_progress")));
-	if (!state) {
-		gtk_widget_show ((GtkWidget*) progress);
-	} else {
-		gtk_widget_hide ((GtkWidget*) progress);
-	}
-	_g_object_unref0 (entry);
-	_g_object_unref0 (add_button);
-	_g_object_unref0 (close_button);
-	_g_object_unref0 (progress);
-}
-
-
-void gmpc_url_fetching_gui_set_processing (GmpcUrlFetchingGui* self) {
-	g_return_if_fail (self != NULL);
-	self->priv->state_counter = GMPC_URL_FETCHING_GUI_STATE_PROCESSING;
-	gmpc_url_fetching_gui_sensitive (self, FALSE);
-}
-
-
-void gmpc_url_fetching_gui_set_progress (GmpcUrlFetchingGui* self, double progress) {
-	GtkProgressBar* progressw;
-	g_return_if_fail (self != NULL);
-	g_log ("GUFG", G_LOG_LEVEL_DEBUG, "gmpc-url-fetching-gui.vala:145: Set progress: %f", progress);
-	if (self->priv->state_counter != GMPC_URL_FETCHING_GUI_STATE_PROCESSING) {
-		return;
-	}
-	progressw = _g_object_ref0 (GTK_PROGRESS_BAR (gtk_builder_get_object (self->priv->builder, "url_progress")));
-	if (progress < 0) {
-		gtk_progress_bar_pulse (progressw);
-	} else {
-		gtk_progress_bar_set_fraction (progressw, progress);
-	}
-	_g_object_unref0 (progressw);
-}
-
-
-void gmpc_url_fetching_gui_set_completed (GmpcUrlFetchingGui* self) {
-	g_return_if_fail (self != NULL);
-	g_log ("GUFG", G_LOG_LEVEL_DEBUG, "gmpc-url-fetching-gui.vala:158: Completed");
-	self->priv->state_counter = GMPC_URL_FETCHING_GUI_STATE_DONE;
-	gmpc_url_fetching_gui_sensitive (self, TRUE);
-	self->priv->destroy_cb (self);
-}
-
-
-void gmpc_url_fetching_gui_set_error (GmpcUrlFetchingGui* self, const char* error_message) {
-	g_return_if_fail (self != NULL);
-	g_return_if_fail (error_message != NULL);
-	g_log ("GUFG", G_LOG_LEVEL_DEBUG, "gmpc-url-fetching-gui.vala:168: Error: %s", error_message);
-	self->priv->state_counter = GMPC_URL_FETCHING_GUI_STATE_ERROR;
-	gmpc_url_fetching_gui_sensitive (self, TRUE);
-}
-
-
-static void gmpc_url_fetching_gui_class_init (GmpcUrlFetchingGuiClass * klass) {
-	gmpc_url_fetching_gui_parent_class = g_type_class_peek_parent (klass);
-	g_type_class_add_private (klass, sizeof (GmpcUrlFetchingGuiPrivate));
-	G_OBJECT_CLASS (klass)->finalize = gmpc_url_fetching_gui_finalize;
-}
-
-
-static void gmpc_url_fetching_gui_instance_init (GmpcUrlFetchingGui * self) {
-	self->priv = GMPC_URL_FETCHING_GUI_GET_PRIVATE (self);
-	self->priv->builder = gtk_builder_new ();
-	self->priv->parse_callback = NULL;
-	self->priv->validate_callback = NULL;
-	self->priv->state_counter = GMPC_URL_FETCHING_GUI_STATE_NORMAL;
-}
-
-
-static void gmpc_url_fetching_gui_finalize (GObject* obj) {
-	GmpcUrlFetchingGui * self;
-	self = GMPC_URL_FETCHING_GUI (obj);
-	{
-		fprintf (stdout, "~Gui\n");
-		if (self->priv->builder != NULL) {
-			GtkDialog* dialog;
-			dialog = _g_object_ref0 (GTK_DIALOG (gtk_builder_get_object (self->priv->builder, "add_url_dialog")));
-			if (dialog != NULL) {
-				gtk_object_destroy ((GtkObject*) dialog);
-			}
-			_g_object_unref0 (dialog);
-		}
-	}
-	_g_object_unref0 (self->priv->builder);
-	(self->priv->parse_callback_target_destroy_notify == NULL) ? NULL : self->priv->parse_callback_target_destroy_notify (self->priv->parse_callback_target);
-	self->priv->parse_callback = NULL;
-	self->priv->parse_callback_target = NULL;
-	self->priv->parse_callback_target_destroy_notify = NULL;
-	(self->priv->validate_callback_target_destroy_notify == NULL) ? NULL : self->priv->validate_callback_target_destroy_notify (self->priv->validate_callback_target);
-	self->priv->validate_callback = NULL;
-	self->priv->validate_callback_target = NULL;
-	self->priv->validate_callback_target_destroy_notify = NULL;
-	G_OBJECT_CLASS (gmpc_url_fetching_gui_parent_class)->finalize (obj);
-}
-
-
-GType gmpc_url_fetching_gui_get_type (void) {
-	static GType gmpc_url_fetching_gui_type_id = 0;
-	if (gmpc_url_fetching_gui_type_id == 0) {
-		static const GTypeInfo g_define_type_info = { sizeof (GmpcUrlFetchingGuiClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gmpc_url_fetching_gui_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GmpcUrlFetchingGui), 0, (GInstanceInitFunc) gmpc_url_fetching_gui_instance_init, NULL };
-		gmpc_url_fetching_gui_type_id = g_type_register_static (G_TYPE_OBJECT, "GmpcUrlFetchingGui", &g_define_type_info, 0);
-	}
-	return gmpc_url_fetching_gui_type_id;
-}
-
-
-
-
-- 

/* gmpc-extras.h generated by valac 0.12.0, the Vala compiler, do not modify */


#ifndef __GMPC_EXTRAS_H__
#define __GMPC_EXTRAS_H__

#include <glib.h>
#include <gtk/gtk.h>
#include <libmpd/libmpd.h>
#include <stdlib.h>
#include <string.h>
#include <pango/pango.h>
#include <libmpd/libmpdclient.h>
#include <misc.h>
#include <glib-object.h>
#include <gdk-pixbuf/gdk-pixdata.h>
#include <gdk/gdk.h>
#include <metadata.h>
#include <float.h>
#include <math.h>
#include <gmpc_easy_download.h>

G_BEGIN_DECLS


#define GMPC_WIDGETS_TYPE_VOLUME (gmpc_widgets_volume_get_type ())
#define GMPC_WIDGETS_VOLUME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_WIDGETS_TYPE_VOLUME, GmpcWidgetsVolume))
#define GMPC_WIDGETS_VOLUME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_WIDGETS_TYPE_VOLUME, GmpcWidgetsVolumeClass))
#define GMPC_WIDGETS_IS_VOLUME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_WIDGETS_TYPE_VOLUME))
#define GMPC_WIDGETS_IS_VOLUME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_WIDGETS_TYPE_VOLUME))
#define GMPC_WIDGETS_VOLUME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_WIDGETS_TYPE_VOLUME, GmpcWidgetsVolumeClass))

typedef struct _GmpcWidgetsVolume GmpcWidgetsVolume;
typedef struct _GmpcWidgetsVolumeClass GmpcWidgetsVolumeClass;
typedef struct _GmpcWidgetsVolumePrivate GmpcWidgetsVolumePrivate;

#define GMPC_TYPE_PROGRESS (gmpc_progress_get_type ())
#define GMPC_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TYPE_PROGRESS, GmpcProgress))
#define GMPC_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TYPE_PROGRESS, GmpcProgressClass))
#define GMPC_IS_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TYPE_PROGRESS))
#define GMPC_IS_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TYPE_PROGRESS))
#define GMPC_PROGRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TYPE_PROGRESS, GmpcProgressClass))

typedef struct _GmpcProgress GmpcProgress;
typedef struct _GmpcProgressClass GmpcProgressClass;
typedef struct _GmpcProgressPrivate GmpcProgressPrivate;

#define GMPC_WIDGETS_TYPE_QTABLE (gmpc_widgets_qtable_get_type ())
#define GMPC_WIDGETS_QTABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_WIDGETS_TYPE_QTABLE, GmpcWidgetsQtable))
#define GMPC_WIDGETS_QTABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_WIDGETS_TYPE_QTABLE, GmpcWidgetsQtableClass))
#define GMPC_WIDGETS_IS_QTABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_WIDGETS_TYPE_QTABLE))
#define GMPC_WIDGETS_IS_QTABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_WIDGETS_TYPE_QTABLE))
#define GMPC_WIDGETS_QTABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_WIDGETS_TYPE_QTABLE, GmpcWidgetsQtableClass))

typedef struct _GmpcWidgetsQtable GmpcWidgetsQtable;
typedef struct _GmpcWidgetsQtableClass GmpcWidgetsQtableClass;
typedef struct _GmpcWidgetsQtablePrivate GmpcWidgetsQtablePrivate;

#define GMPC_WIDGETS_TYPE_SONGLIST (gmpc_widgets_songlist_get_type ())
#define GMPC_WIDGETS_SONGLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_WIDGETS_TYPE_SONGLIST, GmpcWidgetsSonglist))
#define GMPC_WIDGETS_SONGLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_WIDGETS_TYPE_SONGLIST, GmpcWidgetsSonglistClass))
#define GMPC_WIDGETS_IS_SONGLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_WIDGETS_TYPE_SONGLIST))
#define GMPC_WIDGETS_IS_SONGLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_WIDGETS_TYPE_SONGLIST))
#define GMPC_WIDGETS_SONGLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_WIDGETS_TYPE_SONGLIST, GmpcWidgetsSonglistClass))

typedef struct _GmpcWidgetsSonglist GmpcWidgetsSonglist;
typedef struct _GmpcWidgetsSonglistClass GmpcWidgetsSonglistClass;
typedef struct _GmpcWidgetsSonglistPrivate GmpcWidgetsSonglistPrivate;

#define GMPC_TYPE_CLICKLABEL (gmpc_clicklabel_get_type ())
#define GMPC_CLICKLABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TYPE_CLICKLABEL, GmpcClicklabel))
#define GMPC_CLICKLABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TYPE_CLICKLABEL, GmpcClicklabelClass))
#define GMPC_IS_CLICKLABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TYPE_CLICKLABEL))
#define GMPC_IS_CLICKLABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TYPE_CLICKLABEL))
#define GMPC_CLICKLABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TYPE_CLICKLABEL, GmpcClicklabelClass))

typedef struct _GmpcClicklabel GmpcClicklabel;
typedef struct _GmpcClicklabelClass GmpcClicklabelClass;
typedef struct _GmpcClicklabelPrivate GmpcClicklabelPrivate;

#define GMPC_META_DATA_WIDGETS_TYPE_SONG_LINKS (gmpc_meta_data_widgets_song_links_get_type ())
#define GMPC_META_DATA_WIDGETS_SONG_LINKS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_META_DATA_WIDGETS_TYPE_SONG_LINKS, GmpcMetaDataWidgetsSongLinks))
#define GMPC_META_DATA_WIDGETS_SONG_LINKS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_META_DATA_WIDGETS_TYPE_SONG_LINKS, GmpcMetaDataWidgetsSongLinksClass))
#define GMPC_META_DATA_WIDGETS_IS_SONG_LINKS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_META_DATA_WIDGETS_TYPE_SONG_LINKS))
#define GMPC_META_DATA_WIDGETS_IS_SONG_LINKS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_META_DATA_WIDGETS_TYPE_SONG_LINKS))
#define GMPC_META_DATA_WIDGETS_SONG_LINKS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_META_DATA_WIDGETS_TYPE_SONG_LINKS, GmpcMetaDataWidgetsSongLinksClass))

typedef struct _GmpcMetaDataWidgetsSongLinks GmpcMetaDataWidgetsSongLinks;
typedef struct _GmpcMetaDataWidgetsSongLinksClass GmpcMetaDataWidgetsSongLinksClass;
typedef struct _GmpcMetaDataWidgetsSongLinksPrivate GmpcMetaDataWidgetsSongLinksPrivate;

#define GMPC_META_DATA_WIDGETS_SONG_LINKS_TYPE_TYPE (gmpc_meta_data_widgets_song_links_type_get_type ())

#define GMPC_TYPE_MODIFICATION_TYPE (gmpc_modification_type_get_type ())

#define GMPC_TYPE_PIXBUF_LOADER_ASYNC (gmpc_pixbuf_loader_async_get_type ())
#define GMPC_PIXBUF_LOADER_ASYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TYPE_PIXBUF_LOADER_ASYNC, GmpcPixbufLoaderAsync))
#define GMPC_PIXBUF_LOADER_ASYNC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TYPE_PIXBUF_LOADER_ASYNC, GmpcPixbufLoaderAsyncClass))
#define GMPC_IS_PIXBUF_LOADER_ASYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TYPE_PIXBUF_LOADER_ASYNC))
#define GMPC_IS_PIXBUF_LOADER_ASYNC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TYPE_PIXBUF_LOADER_ASYNC))
#define GMPC_PIXBUF_LOADER_ASYNC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TYPE_PIXBUF_LOADER_ASYNC, GmpcPixbufLoaderAsyncClass))

typedef struct _GmpcPixbufLoaderAsync GmpcPixbufLoaderAsync;
typedef struct _GmpcPixbufLoaderAsyncClass GmpcPixbufLoaderAsyncClass;
typedef struct _GmpcPixbufLoaderAsyncPrivate GmpcPixbufLoaderAsyncPrivate;

#define GMPC_TYPE_META_IMAGE_ASYNC (gmpc_meta_image_async_get_type ())
#define GMPC_META_IMAGE_ASYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TYPE_META_IMAGE_ASYNC, GmpcMetaImageAsync))
#define GMPC_META_IMAGE_ASYNC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TYPE_META_IMAGE_ASYNC, GmpcMetaImageAsyncClass))
#define GMPC_IS_META_IMAGE_ASYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TYPE_META_IMAGE_ASYNC))
#define GMPC_IS_META_IMAGE_ASYNC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TYPE_META_IMAGE_ASYNC))
#define GMPC_META_IMAGE_ASYNC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TYPE_META_IMAGE_ASYNC, GmpcMetaImageAsyncClass))

typedef struct _GmpcMetaImageAsync GmpcMetaImageAsync;
typedef struct _GmpcMetaImageAsyncClass GmpcMetaImageAsyncClass;
typedef struct _GmpcMetaImageAsyncPrivate GmpcMetaImageAsyncPrivate;

#define TYPE_POPUP_MENU (popup_menu_get_type ())
#define POPUP_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_POPUP_MENU, PopupMenu))
#define POPUP_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_POPUP_MENU, PopupMenuClass))
#define IS_POPUP_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_POPUP_MENU))
#define IS_POPUP_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_POPUP_MENU))
#define POPUP_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_POPUP_MENU, PopupMenuClass))

typedef struct _PopupMenu PopupMenu;
typedef struct _PopupMenuClass PopupMenuClass;
typedef struct _PopupMenuPrivate PopupMenuPrivate;

#define GMPC_META_DATA_WIDGETS_TYPE_TEXT_LABEL (gmpc_meta_data_widgets_text_label_get_type ())
#define GMPC_META_DATA_WIDGETS_TEXT_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_META_DATA_WIDGETS_TYPE_TEXT_LABEL, GmpcMetaDataWidgetsTextLabel))
#define GMPC_META_DATA_WIDGETS_TEXT_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_META_DATA_WIDGETS_TYPE_TEXT_LABEL, GmpcMetaDataWidgetsTextLabelClass))
#define GMPC_META_DATA_WIDGETS_IS_TEXT_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_META_DATA_WIDGETS_TYPE_TEXT_LABEL))
#define GMPC_META_DATA_WIDGETS_IS_TEXT_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_META_DATA_WIDGETS_TYPE_TEXT_LABEL))
#define GMPC_META_DATA_WIDGETS_TEXT_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_META_DATA_WIDGETS_TYPE_TEXT_LABEL, GmpcMetaDataWidgetsTextLabelClass))

typedef struct _GmpcMetaDataWidgetsTextLabel GmpcMetaDataWidgetsTextLabel;
typedef struct _GmpcMetaDataWidgetsTextLabelClass GmpcMetaDataWidgetsTextLabelClass;
typedef struct _GmpcMetaDataWidgetsTextLabelPrivate GmpcMetaDataWidgetsTextLabelPrivate;

#define GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_SONGS (gmpc_meta_data_widgets_similar_songs_get_type ())
#define GMPC_META_DATA_WIDGETS_SIMILAR_SONGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_SONGS, GmpcMetaDataWidgetsSimilarSongs))
#define GMPC_META_DATA_WIDGETS_SIMILAR_SONGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_SONGS, GmpcMetaDataWidgetsSimilarSongsClass))
#define GMPC_META_DATA_WIDGETS_IS_SIMILAR_SONGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_SONGS))
#define GMPC_META_DATA_WIDGETS_IS_SIMILAR_SONGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_SONGS))
#define GMPC_META_DATA_WIDGETS_SIMILAR_SONGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_SONGS, GmpcMetaDataWidgetsSimilarSongsClass))

typedef struct _GmpcMetaDataWidgetsSimilarSongs GmpcMetaDataWidgetsSimilarSongs;
typedef struct _GmpcMetaDataWidgetsSimilarSongsClass GmpcMetaDataWidgetsSimilarSongsClass;
typedef struct _GmpcMetaDataWidgetsSimilarSongsPrivate GmpcMetaDataWidgetsSimilarSongsPrivate;

#define GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_ARTISTS (gmpc_meta_data_widgets_similar_artists_get_type ())
#define GMPC_META_DATA_WIDGETS_SIMILAR_ARTISTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_ARTISTS, GmpcMetaDataWidgetsSimilarArtists))
#define GMPC_META_DATA_WIDGETS_SIMILAR_ARTISTS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_ARTISTS, GmpcMetaDataWidgetsSimilarArtistsClass))
#define GMPC_META_DATA_WIDGETS_IS_SIMILAR_ARTISTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_ARTISTS))
#define GMPC_META_DATA_WIDGETS_IS_SIMILAR_ARTISTS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_ARTISTS))
#define GMPC_META_DATA_WIDGETS_SIMILAR_ARTISTS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_META_DATA_WIDGETS_TYPE_SIMILAR_ARTISTS, GmpcMetaDataWidgetsSimilarArtistsClass))

typedef struct _GmpcMetaDataWidgetsSimilarArtists GmpcMetaDataWidgetsSimilarArtists;
typedef struct _GmpcMetaDataWidgetsSimilarArtistsClass GmpcMetaDataWidgetsSimilarArtistsClass;
typedef struct _GmpcMetaDataWidgetsSimilarArtistsPrivate GmpcMetaDataWidgetsSimilarArtistsPrivate;

#define GMPC_PLUGIN_TYPE_BASE (gmpc_plugin_base_get_type ())
#define GMPC_PLUGIN_BASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PLUGIN_TYPE_BASE, GmpcPluginBase))
#define GMPC_PLUGIN_BASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_PLUGIN_TYPE_BASE, GmpcPluginBaseClass))
#define GMPC_PLUGIN_IS_BASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PLUGIN_TYPE_BASE))
#define GMPC_PLUGIN_IS_BASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_PLUGIN_TYPE_BASE))
#define GMPC_PLUGIN_BASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_PLUGIN_TYPE_BASE, GmpcPluginBaseClass))

typedef struct _GmpcPluginBase GmpcPluginBase;
typedef struct _GmpcPluginBaseClass GmpcPluginBaseClass;
typedef struct _GmpcPluginBasePrivate GmpcPluginBasePrivate;

#define GMPC_PLUGIN_TYPE_BROWSER_IFACE (gmpc_plugin_browser_iface_get_type ())
#define GMPC_PLUGIN_BROWSER_IFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PLUGIN_TYPE_BROWSER_IFACE, GmpcPluginBrowserIface))
#define GMPC_PLUGIN_IS_BROWSER_IFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PLUGIN_TYPE_BROWSER_IFACE))
#define GMPC_PLUGIN_BROWSER_IFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GMPC_PLUGIN_TYPE_BROWSER_IFACE, GmpcPluginBrowserIfaceIface))

typedef struct _GmpcPluginBrowserIface GmpcPluginBrowserIface;
typedef struct _GmpcPluginBrowserIfaceIface GmpcPluginBrowserIfaceIface;

#define GMPC_BROWSERS_TYPE_METADATA (gmpc_browsers_metadata_get_type ())
#define GMPC_BROWSERS_METADATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_BROWSERS_TYPE_METADATA, GmpcBrowsersMetadata))
#define GMPC_BROWSERS_METADATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_BROWSERS_TYPE_METADATA, GmpcBrowsersMetadataClass))
#define GMPC_BROWSERS_IS_METADATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_BROWSERS_TYPE_METADATA))
#define GMPC_BROWSERS_IS_METADATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_BROWSERS_TYPE_METADATA))
#define GMPC_BROWSERS_METADATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_BROWSERS_TYPE_METADATA, GmpcBrowsersMetadataClass))

typedef struct _GmpcBrowsersMetadata GmpcBrowsersMetadata;
typedef struct _GmpcBrowsersMetadataClass GmpcBrowsersMetadataClass;
typedef struct _GmpcBrowsersMetadataPrivate GmpcBrowsersMetadataPrivate;

#define GMPC_BROWSERS_TYPE_NOWPLAYING (gmpc_browsers_nowplaying_get_type ())
#define GMPC_BROWSERS_NOWPLAYING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_BROWSERS_TYPE_NOWPLAYING, GmpcBrowsersNowplaying))
#define GMPC_BROWSERS_NOWPLAYING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_BROWSERS_TYPE_NOWPLAYING, GmpcBrowsersNowplayingClass))
#define GMPC_BROWSERS_IS_NOWPLAYING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_BROWSERS_TYPE_NOWPLAYING))
#define GMPC_BROWSERS_IS_NOWPLAYING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_BROWSERS_TYPE_NOWPLAYING))
#define GMPC_BROWSERS_NOWPLAYING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_BROWSERS_TYPE_NOWPLAYING, GmpcBrowsersNowplayingClass))

typedef struct _GmpcBrowsersNowplaying GmpcBrowsersNowplaying;
typedef struct _GmpcBrowsersNowplayingClass GmpcBrowsersNowplayingClass;
typedef struct _GmpcBrowsersNowplayingPrivate GmpcBrowsersNowplayingPrivate;

#define GMPC_TOOLS_TYPE_DATABASE_UPDATE_TRACKER (gmpc_tools_database_update_tracker_get_type ())
#define GMPC_TOOLS_DATABASE_UPDATE_TRACKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TOOLS_TYPE_DATABASE_UPDATE_TRACKER, GmpcToolsDatabaseUpdateTracker))
#define GMPC_TOOLS_DATABASE_UPDATE_TRACKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TOOLS_TYPE_DATABASE_UPDATE_TRACKER, GmpcToolsDatabaseUpdateTrackerClass))
#define GMPC_TOOLS_IS_DATABASE_UPDATE_TRACKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TOOLS_TYPE_DATABASE_UPDATE_TRACKER))
#define GMPC_TOOLS_IS_DATABASE_UPDATE_TRACKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TOOLS_TYPE_DATABASE_UPDATE_TRACKER))
#define GMPC_TOOLS_DATABASE_UPDATE_TRACKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TOOLS_TYPE_DATABASE_UPDATE_TRACKER, GmpcToolsDatabaseUpdateTrackerClass))

typedef struct _GmpcToolsDatabaseUpdateTracker GmpcToolsDatabaseUpdateTracker;
typedef struct _GmpcToolsDatabaseUpdateTrackerClass GmpcToolsDatabaseUpdateTrackerClass;
typedef struct _GmpcToolsDatabaseUpdateTrackerPrivate GmpcToolsDatabaseUpdateTrackerPrivate;

#define GMPC_TOOLS_TYPE_METADATA_PREFETCHER (gmpc_tools_metadata_prefetcher_get_type ())
#define GMPC_TOOLS_METADATA_PREFETCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TOOLS_TYPE_METADATA_PREFETCHER, GmpcToolsMetadataPrefetcher))
#define GMPC_TOOLS_METADATA_PREFETCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TOOLS_TYPE_METADATA_PREFETCHER, GmpcToolsMetadataPrefetcherClass))
#define GMPC_TOOLS_IS_METADATA_PREFETCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TOOLS_TYPE_METADATA_PREFETCHER))
#define GMPC_TOOLS_IS_METADATA_PREFETCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TOOLS_TYPE_METADATA_PREFETCHER))
#define GMPC_TOOLS_METADATA_PREFETCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TOOLS_TYPE_METADATA_PREFETCHER, GmpcToolsMetadataPrefetcherClass))

typedef struct _GmpcToolsMetadataPrefetcher GmpcToolsMetadataPrefetcher;
typedef struct _GmpcToolsMetadataPrefetcherClass GmpcToolsMetadataPrefetcherClass;
typedef struct _GmpcToolsMetadataPrefetcherPrivate GmpcToolsMetadataPrefetcherPrivate;

#define GMPC_TOOLS_TYPE_LISTSTORE_SORT (gmpc_tools_liststore_sort_get_type ())
#define GMPC_TOOLS_LISTSTORE_SORT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TOOLS_TYPE_LISTSTORE_SORT, GmpcToolsListstoreSort))
#define GMPC_TOOLS_LISTSTORE_SORT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TOOLS_TYPE_LISTSTORE_SORT, GmpcToolsListstoreSortClass))
#define GMPC_TOOLS_IS_LISTSTORE_SORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TOOLS_TYPE_LISTSTORE_SORT))
#define GMPC_TOOLS_IS_LISTSTORE_SORT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TOOLS_TYPE_LISTSTORE_SORT))
#define GMPC_TOOLS_LISTSTORE_SORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TOOLS_TYPE_LISTSTORE_SORT, GmpcToolsListstoreSortClass))

typedef struct _GmpcToolsListstoreSort GmpcToolsListstoreSort;
typedef struct _GmpcToolsListstoreSortClass GmpcToolsListstoreSortClass;
typedef struct _GmpcToolsListstoreSortPrivate GmpcToolsListstoreSortPrivate;

#define GMPC_PLUGIN_TYPE_PREFERENCES_IFACE (gmpc_plugin_preferences_iface_get_type ())
#define GMPC_PLUGIN_PREFERENCES_IFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PLUGIN_TYPE_PREFERENCES_IFACE, GmpcPluginPreferencesIface))
#define GMPC_PLUGIN_IS_PREFERENCES_IFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PLUGIN_TYPE_PREFERENCES_IFACE))
#define GMPC_PLUGIN_PREFERENCES_IFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GMPC_PLUGIN_TYPE_PREFERENCES_IFACE, GmpcPluginPreferencesIfaceIface))

typedef struct _GmpcPluginPreferencesIface GmpcPluginPreferencesIface;
typedef struct _GmpcPluginPreferencesIfaceIface GmpcPluginPreferencesIfaceIface;

#define GMPC_TOOLS_TYPE_METADATA_APPEARANCE (gmpc_tools_metadata_appearance_get_type ())
#define GMPC_TOOLS_METADATA_APPEARANCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TOOLS_TYPE_METADATA_APPEARANCE, GmpcToolsMetadataAppearance))
#define GMPC_TOOLS_METADATA_APPEARANCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TOOLS_TYPE_METADATA_APPEARANCE, GmpcToolsMetadataAppearanceClass))
#define GMPC_TOOLS_IS_METADATA_APPEARANCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TOOLS_TYPE_METADATA_APPEARANCE))
#define GMPC_TOOLS_IS_METADATA_APPEARANCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TOOLS_TYPE_METADATA_APPEARANCE))
#define GMPC_TOOLS_METADATA_APPEARANCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TOOLS_TYPE_METADATA_APPEARANCE, GmpcToolsMetadataAppearanceClass))

typedef struct _GmpcToolsMetadataAppearance GmpcToolsMetadataAppearance;
typedef struct _GmpcToolsMetadataAppearanceClass GmpcToolsMetadataAppearanceClass;
typedef struct _GmpcToolsMetadataAppearancePrivate GmpcToolsMetadataAppearancePrivate;

#define GMPC_PLUGIN_TYPE_META_DATA_IFACE (gmpc_plugin_meta_data_iface_get_type ())
#define GMPC_PLUGIN_META_DATA_IFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PLUGIN_TYPE_META_DATA_IFACE, GmpcPluginMetaDataIface))
#define GMPC_PLUGIN_IS_META_DATA_IFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PLUGIN_TYPE_META_DATA_IFACE))
#define GMPC_PLUGIN_META_DATA_IFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GMPC_PLUGIN_TYPE_META_DATA_IFACE, GmpcPluginMetaDataIfaceIface))

typedef struct _GmpcPluginMetaDataIface GmpcPluginMetaDataIface;
typedef struct _GmpcPluginMetaDataIfaceIface GmpcPluginMetaDataIfaceIface;

#define GMPC_PROVIDER_TYPE_MUSIC_TREE (gmpc_provider_music_tree_get_type ())
#define GMPC_PROVIDER_MUSIC_TREE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PROVIDER_TYPE_MUSIC_TREE, GmpcProviderMusicTree))
#define GMPC_PROVIDER_MUSIC_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_PROVIDER_TYPE_MUSIC_TREE, GmpcProviderMusicTreeClass))
#define GMPC_PROVIDER_IS_MUSIC_TREE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PROVIDER_TYPE_MUSIC_TREE))
#define GMPC_PROVIDER_IS_MUSIC_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_PROVIDER_TYPE_MUSIC_TREE))
#define GMPC_PROVIDER_MUSIC_TREE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_PROVIDER_TYPE_MUSIC_TREE, GmpcProviderMusicTreeClass))

typedef struct _GmpcProviderMusicTree GmpcProviderMusicTree;
typedef struct _GmpcProviderMusicTreeClass GmpcProviderMusicTreeClass;
typedef struct _GmpcProviderMusicTreePrivate GmpcProviderMusicTreePrivate;

#define GMPC_PROVIDER_TYPE_HT_BACKDROPS (gmpc_provider_ht_backdrops_get_type ())
#define GMPC_PROVIDER_HT_BACKDROPS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PROVIDER_TYPE_HT_BACKDROPS, GmpcProviderHTBackdrops))
#define GMPC_PROVIDER_HT_BACKDROPS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_PROVIDER_TYPE_HT_BACKDROPS, GmpcProviderHTBackdropsClass))
#define GMPC_PROVIDER_IS_HT_BACKDROPS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PROVIDER_TYPE_HT_BACKDROPS))
#define GMPC_PROVIDER_IS_HT_BACKDROPS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_PROVIDER_TYPE_HT_BACKDROPS))
#define GMPC_PROVIDER_HT_BACKDROPS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_PROVIDER_TYPE_HT_BACKDROPS, GmpcProviderHTBackdropsClass))

typedef struct _GmpcProviderHTBackdrops GmpcProviderHTBackdrops;
typedef struct _GmpcProviderHTBackdropsClass GmpcProviderHTBackdropsClass;
typedef struct _GmpcProviderHTBackdropsPrivate GmpcProviderHTBackdropsPrivate;

#define GMPC_PROVIDER_TYPE_RENDER_COVER (gmpc_provider_render_cover_get_type ())
#define GMPC_PROVIDER_RENDER_COVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PROVIDER_TYPE_RENDER_COVER, GmpcProviderRenderCover))
#define GMPC_PROVIDER_RENDER_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_PROVIDER_TYPE_RENDER_COVER, GmpcProviderRenderCoverClass))
#define GMPC_PROVIDER_IS_RENDER_COVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PROVIDER_TYPE_RENDER_COVER))
#define GMPC_PROVIDER_IS_RENDER_COVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_PROVIDER_TYPE_RENDER_COVER))
#define GMPC_PROVIDER_RENDER_COVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_PROVIDER_TYPE_RENDER_COVER, GmpcProviderRenderCoverClass))

typedef struct _GmpcProviderRenderCover GmpcProviderRenderCover;
typedef struct _GmpcProviderRenderCoverClass GmpcProviderRenderCoverClass;
typedef struct _GmpcProviderRenderCoverPrivate GmpcProviderRenderCoverPrivate;

#define GMPC_PROVIDER_TYPE_LYR_DB (gmpc_provider_lyr_db_get_type ())
#define GMPC_PROVIDER_LYR_DB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PROVIDER_TYPE_LYR_DB, GmpcProviderLyrDB))
#define GMPC_PROVIDER_LYR_DB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_PROVIDER_TYPE_LYR_DB, GmpcProviderLyrDBClass))
#define GMPC_PROVIDER_IS_LYR_DB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PROVIDER_TYPE_LYR_DB))
#define GMPC_PROVIDER_IS_LYR_DB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_PROVIDER_TYPE_LYR_DB))
#define GMPC_PROVIDER_LYR_DB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_PROVIDER_TYPE_LYR_DB, GmpcProviderLyrDBClass))

typedef struct _GmpcProviderLyrDB GmpcProviderLyrDB;
typedef struct _GmpcProviderLyrDBClass GmpcProviderLyrDBClass;
typedef struct _GmpcProviderLyrDBPrivate GmpcProviderLyrDBPrivate;

#define GMPC_PROVIDER_TYPE_CHART_LYRICS (gmpc_provider_chart_lyrics_get_type ())
#define GMPC_PROVIDER_CHART_LYRICS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PROVIDER_TYPE_CHART_LYRICS, GmpcProviderChartLyrics))
#define GMPC_PROVIDER_CHART_LYRICS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_PROVIDER_TYPE_CHART_LYRICS, GmpcProviderChartLyricsClass))
#define GMPC_PROVIDER_IS_CHART_LYRICS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PROVIDER_TYPE_CHART_LYRICS))
#define GMPC_PROVIDER_IS_CHART_LYRICS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_PROVIDER_TYPE_CHART_LYRICS))
#define GMPC_PROVIDER_CHART_LYRICS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_PROVIDER_TYPE_CHART_LYRICS, GmpcProviderChartLyricsClass))

typedef struct _GmpcProviderChartLyrics GmpcProviderChartLyrics;
typedef struct _GmpcProviderChartLyricsClass GmpcProviderChartLyricsClass;
typedef struct _GmpcProviderChartLyricsPrivate GmpcProviderChartLyricsPrivate;

#define GMPC_TYPE_CONNECTION (gmpc_connection_get_type ())
#define GMPC_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TYPE_CONNECTION, GmpcConnection))
#define GMPC_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TYPE_CONNECTION, GmpcConnectionClass))
#define GMPC_IS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TYPE_CONNECTION))
#define GMPC_IS_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TYPE_CONNECTION))
#define GMPC_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TYPE_CONNECTION, GmpcConnectionClass))

typedef struct _GmpcConnection GmpcConnection;
typedef struct _GmpcConnectionClass GmpcConnectionClass;
typedef struct _GmpcConnectionPrivate GmpcConnectionPrivate;

#define GMPC_EASY_TYPE_COMMAND (gmpc_easy_command_get_type ())
#define GMPC_EASY_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_EASY_TYPE_COMMAND, GmpcEasyCommand))
#define GMPC_EASY_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_EASY_TYPE_COMMAND, GmpcEasyCommandClass))
#define GMPC_EASY_IS_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_EASY_TYPE_COMMAND))
#define GMPC_EASY_IS_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_EASY_TYPE_COMMAND))
#define GMPC_EASY_COMMAND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_EASY_TYPE_COMMAND, GmpcEasyCommandClass))

typedef struct _GmpcEasyCommand GmpcEasyCommand;
typedef struct _GmpcEasyCommandClass GmpcEasyCommandClass;
typedef struct _GmpcEasyCommandPrivate GmpcEasyCommandPrivate;

#define GMPC_FAVORITES_TYPE_LIST (gmpc_favorites_list_get_type ())
#define GMPC_FAVORITES_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_FAVORITES_TYPE_LIST, GmpcFavoritesList))
#define GMPC_FAVORITES_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_FAVORITES_TYPE_LIST, GmpcFavoritesListClass))
#define GMPC_FAVORITES_IS_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_FAVORITES_TYPE_LIST))
#define GMPC_FAVORITES_IS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_FAVORITES_TYPE_LIST))
#define GMPC_FAVORITES_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_FAVORITES_TYPE_LIST, GmpcFavoritesListClass))

typedef struct _GmpcFavoritesList GmpcFavoritesList;
typedef struct _GmpcFavoritesListClass GmpcFavoritesListClass;
typedef struct _GmpcFavoritesListPrivate GmpcFavoritesListPrivate;

#define GMPC_FAVORITES_TYPE_BUTTON (gmpc_favorites_button_get_type ())
#define GMPC_FAVORITES_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_FAVORITES_TYPE_BUTTON, GmpcFavoritesButton))
#define GMPC_FAVORITES_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_FAVORITES_TYPE_BUTTON, GmpcFavoritesButtonClass))
#define GMPC_FAVORITES_IS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_FAVORITES_TYPE_BUTTON))
#define GMPC_FAVORITES_IS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_FAVORITES_TYPE_BUTTON))
#define GMPC_FAVORITES_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_FAVORITES_TYPE_BUTTON, GmpcFavoritesButtonClass))

typedef struct _GmpcFavoritesButton GmpcFavoritesButton;
typedef struct _GmpcFavoritesButtonClass GmpcFavoritesButtonClass;
typedef struct _GmpcFavoritesButtonPrivate GmpcFavoritesButtonPrivate;

#define GMPC_MPD_DATA_TREEVIEW_TYPE_TOOLTIP (gmpc_mpd_data_treeview_tooltip_get_type ())
#define GMPC_MPD_DATA_TREEVIEW_TOOLTIP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_MPD_DATA_TREEVIEW_TYPE_TOOLTIP, GmpcMpdDataTreeviewTooltip))
#define GMPC_MPD_DATA_TREEVIEW_TOOLTIP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_MPD_DATA_TREEVIEW_TYPE_TOOLTIP, GmpcMpdDataTreeviewTooltipClass))
#define GMPC_MPD_DATA_TREEVIEW_IS_TOOLTIP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_MPD_DATA_TREEVIEW_TYPE_TOOLTIP))
#define GMPC_MPD_DATA_TREEVIEW_IS_TOOLTIP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_MPD_DATA_TREEVIEW_TYPE_TOOLTIP))
#define GMPC_MPD_DATA_TREEVIEW_TOOLTIP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_MPD_DATA_TREEVIEW_TYPE_TOOLTIP, GmpcMpdDataTreeviewTooltipClass))

typedef struct _GmpcMpdDataTreeviewTooltip GmpcMpdDataTreeviewTooltip;
typedef struct _GmpcMpdDataTreeviewTooltipClass GmpcMpdDataTreeviewTooltipClass;
typedef struct _GmpcMpdDataTreeviewTooltipPrivate GmpcMpdDataTreeviewTooltipPrivate;

#define GMPC_PLUGIN_TYPE_TOOL_MENU_IFACE (gmpc_plugin_tool_menu_iface_get_type ())
#define GMPC_PLUGIN_TOOL_MENU_IFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PLUGIN_TYPE_TOOL_MENU_IFACE, GmpcPluginToolMenuIface))
#define GMPC_PLUGIN_IS_TOOL_MENU_IFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PLUGIN_TYPE_TOOL_MENU_IFACE))
#define GMPC_PLUGIN_TOOL_MENU_IFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GMPC_PLUGIN_TYPE_TOOL_MENU_IFACE, GmpcPluginToolMenuIfaceIface))

typedef struct _GmpcPluginToolMenuIface GmpcPluginToolMenuIface;
typedef struct _GmpcPluginToolMenuIfaceIface GmpcPluginToolMenuIfaceIface;

#define GMPC_PLUGIN_TYPE_INTEGRATE_SEARCH_IFACE (gmpc_plugin_integrate_search_iface_get_type ())
#define GMPC_PLUGIN_INTEGRATE_SEARCH_IFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PLUGIN_TYPE_INTEGRATE_SEARCH_IFACE, GmpcPluginIntegrateSearchIface))
#define GMPC_PLUGIN_IS_INTEGRATE_SEARCH_IFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PLUGIN_TYPE_INTEGRATE_SEARCH_IFACE))
#define GMPC_PLUGIN_INTEGRATE_SEARCH_IFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GMPC_PLUGIN_TYPE_INTEGRATE_SEARCH_IFACE, GmpcPluginIntegrateSearchIfaceIface))

typedef struct _GmpcPluginIntegrateSearchIface GmpcPluginIntegrateSearchIface;
typedef struct _GmpcPluginIntegrateSearchIfaceIface GmpcPluginIntegrateSearchIfaceIface;

#define GMPC_PLUGIN_TYPE_SONG_LIST_IFACE (gmpc_plugin_song_list_iface_get_type ())
#define GMPC_PLUGIN_SONG_LIST_IFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_PLUGIN_TYPE_SONG_LIST_IFACE, GmpcPluginSongListIface))
#define GMPC_PLUGIN_IS_SONG_LIST_IFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_PLUGIN_TYPE_SONG_LIST_IFACE))
#define GMPC_PLUGIN_SONG_LIST_IFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GMPC_PLUGIN_TYPE_SONG_LIST_IFACE, GmpcPluginSongListIfaceIface))

typedef struct _GmpcPluginSongListIface GmpcPluginSongListIface;
typedef struct _GmpcPluginSongListIfaceIface GmpcPluginSongListIfaceIface;

#define GMPC_URL_FETCHING_TYPE_GUI (gmpc_url_fetching_gui_get_type ())
#define GMPC_URL_FETCHING_GUI(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_URL_FETCHING_TYPE_GUI, GmpcUrlFetchingGui))
#define GMPC_URL_FETCHING_GUI_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_URL_FETCHING_TYPE_GUI, GmpcUrlFetchingGuiClass))
#define GMPC_URL_FETCHING_IS_GUI(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_URL_FETCHING_TYPE_GUI))
#define GMPC_URL_FETCHING_IS_GUI_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_URL_FETCHING_TYPE_GUI))
#define GMPC_URL_FETCHING_GUI_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_URL_FETCHING_TYPE_GUI, GmpcUrlFetchingGuiClass))

typedef struct _GmpcUrlFetchingGui GmpcUrlFetchingGui;
typedef struct _GmpcUrlFetchingGuiClass GmpcUrlFetchingGuiClass;
typedef struct _GmpcUrlFetchingGuiPrivate GmpcUrlFetchingGuiPrivate;

#define GMPC_META_DATA_TYPE_EDIT_WINDOW (gmpc_meta_data_edit_window_get_type ())
#define GMPC_META_DATA_EDIT_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_META_DATA_TYPE_EDIT_WINDOW, GmpcMetaDataEditWindow))
#define GMPC_META_DATA_EDIT_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_META_DATA_TYPE_EDIT_WINDOW, GmpcMetaDataEditWindowClass))
#define GMPC_META_DATA_IS_EDIT_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_META_DATA_TYPE_EDIT_WINDOW))
#define GMPC_META_DATA_IS_EDIT_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_META_DATA_TYPE_EDIT_WINDOW))
#define GMPC_META_DATA_EDIT_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_META_DATA_TYPE_EDIT_WINDOW, GmpcMetaDataEditWindowClass))

typedef struct _GmpcMetaDataEditWindow GmpcMetaDataEditWindow;
typedef struct _GmpcMetaDataEditWindowClass GmpcMetaDataEditWindowClass;
typedef struct _GmpcMetaDataEditWindowPrivate GmpcMetaDataEditWindowPrivate;

#define GMPC_TYPE_TEST_PLUGIN (gmpc_test_plugin_get_type ())
#define GMPC_TEST_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TYPE_TEST_PLUGIN, GmpcTestPlugin))
#define GMPC_TEST_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TYPE_TEST_PLUGIN, GmpcTestPluginClass))
#define GMPC_IS_TEST_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TYPE_TEST_PLUGIN))
#define GMPC_IS_TEST_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TYPE_TEST_PLUGIN))
#define GMPC_TEST_PLUGIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TYPE_TEST_PLUGIN, GmpcTestPluginClass))

typedef struct _GmpcTestPlugin GmpcTestPlugin;
typedef struct _GmpcTestPluginClass GmpcTestPluginClass;
typedef struct _GmpcTestPluginPrivate GmpcTestPluginPrivate;

#define GMPC_TYPE_PANED_SIZE_GROUP (gmpc_paned_size_group_get_type ())
#define GMPC_PANED_SIZE_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMPC_TYPE_PANED_SIZE_GROUP, GmpcPanedSizeGroup))
#define GMPC_PANED_SIZE_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMPC_TYPE_PANED_SIZE_GROUP, GmpcPanedSizeGroupClass))
#define GMPC_IS_PANED_SIZE_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMPC_TYPE_PANED_SIZE_GROUP))
#define GMPC_IS_PANED_SIZE_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMPC_TYPE_PANED_SIZE_GROUP))
#define GMPC_PANED_SIZE_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMPC_TYPE_PANED_SIZE_GROUP, GmpcPanedSizeGroupClass))

typedef struct _GmpcPanedSizeGroup GmpcPanedSizeGroup;
typedef struct _GmpcPanedSizeGroupClass GmpcPanedSizeGroupClass;
typedef struct _GmpcPanedSizeGroupPrivate GmpcPanedSizeGroupPrivate;

struct _GmpcWidgetsVolume {
	GtkEventBox parent_instance;
	GmpcWidgetsVolumePrivate * priv;
	gint _volume_level;
};

struct _GmpcWidgetsVolumeClass {
	GtkEventBoxClass parent_class;
};

struct _GmpcProgress {
	GtkVBox parent_instance;
	GmpcProgressPrivate * priv;
	gboolean _hide_text;
};

struct _GmpcProgressClass {
	GtkVBoxClass parent_class;
};

struct _GmpcWidgetsQtable {
	GtkContainer parent_instance;
	GmpcWidgetsQtablePrivate * priv;
};

struct _GmpcWidgetsQtableClass {
	GtkContainerClass parent_class;
};

struct _GmpcWidgetsSonglist {
	GmpcWidgetsQtable parent_instance;
	GmpcWidgetsSonglistPrivate * priv;
};

struct _GmpcWidgetsSonglistClass {
	GmpcWidgetsQtableClass parent_class;
};

struct _GmpcClicklabel {
	GtkEventBox parent_instance;
	GmpcClicklabelPrivate * priv;
};

struct _GmpcClicklabelClass {
	GtkEventBoxClass parent_class;
};

struct _GmpcMetaDataWidgetsSongLinks {
	GtkFrame parent_instance;
	GmpcMetaDataWidgetsSongLinksPrivate * priv;
};

struct _GmpcMetaDataWidgetsSongLinksClass {
	GtkFrameClass parent_class;
};

typedef enum  {
	GMPC_META_DATA_WIDGETS_SONG_LINKS_TYPE_ARTIST,
	GMPC_META_DATA_WIDGETS_SONG_LINKS_TYPE_ALBUM,
	GMPC_META_DATA_WIDGETS_SONG_LINKS_TYPE_SONG
} GmpcMetaDataWidgetsSongLinksType;

typedef enum  {
	GMPC_MODIFICATION_TYPE_NONE = 0,
	GMPC_MODIFICATION_TYPE_CASING = 1,
	GMPC_MODIFICATION_TYPE_DARKEN = 2,
	GMPC_MODIFICATION_TYPE_DECOLOR = 4,
	GMPC_MODIFICATION_TYPE_BORDER = 8
} GmpcModificationType;

struct _GmpcPixbufLoaderAsync {
	GObject parent_instance;
	GmpcPixbufLoaderAsyncPrivate * priv;
	gchar* uri;
};

struct _GmpcPixbufLoaderAsyncClass {
	GObjectClass parent_class;
};

struct _GmpcMetaImageAsync {
	GtkImage parent_instance;
	GmpcMetaImageAsyncPrivate * priv;
	gchar* uri;
};

struct _GmpcMetaImageAsyncClass {
	GtkImageClass parent_class;
};

struct _PopupMenu {
	GtkWindow parent_instance;
	PopupMenuPrivate * priv;
};

struct _PopupMenuClass {
	GtkWindowClass parent_class;
};

struct _GmpcMetaDataWidgetsTextLabel {
	GtkLabel parent_instance;
	GmpcMetaDataWidgetsTextLabelPrivate * priv;
};

struct _GmpcMetaDataWidgetsTextLabelClass {
	GtkLabelClass parent_class;
};

struct _GmpcMetaDataWidgetsSimilarSongs {
	GtkAlignment parent_instance;
	GmpcMetaDataWidgetsSimilarSongsPrivate * priv;
};

struct _GmpcMetaDataWidgetsSimilarSongsClass {
	GtkAlignmentClass parent_class;
};

struct _GmpcMetaDataWidgetsSimilarArtists {
	GtkTable parent_instance;
	GmpcMetaDataWidgetsSimilarArtistsPrivate * priv;
	gboolean first_show_b;
};

struct _GmpcMetaDataWidgetsSimilarArtistsClass {
	GtkTableClass parent_class;
};

struct _GmpcPluginBase {
	GObject parent_instance;
	GmpcPluginBasePrivate * priv;
	const gchar* translation_domain;
	gchar* path;
	gint id;
	gint plugin_type;
};

struct _GmpcPluginBaseClass {
	GObjectClass parent_class;
	gint* (*get_version) (GmpcPluginBase* self, int* result_length1);
	const gchar* (*get_name) (GmpcPluginBase* self);
	void (*save_yourself) (GmpcPluginBase* self);
	gboolean (*get_enabled) (GmpcPluginBase* self);
	void (*set_enabled) (GmpcPluginBase* self, gboolean state);
};

struct _GmpcPluginBrowserIfaceIface {
	GTypeInterface parent_iface;
	void (*browser_add) (GmpcPluginBrowserIface* self, GtkWidget* category_tree);
	void (*browser_selected) (GmpcPluginBrowserIface* self, GtkContainer* container);
	void (*browser_unselected) (GmpcPluginBrowserIface* self, GtkContainer* container);
	gint (*browser_option_menu) (GmpcPluginBrowserIface* self, GtkMenu* menu);
	gint (*browser_add_go_menu) (GmpcPluginBrowserIface* self, GtkMenu* menu);
};

struct _GmpcBrowsersMetadata {
	GmpcPluginBase parent_instance;
	GmpcBrowsersMetadataPrivate * priv;
};

struct _GmpcBrowsersMetadataClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcBrowsersNowplaying {
	GmpcPluginBase parent_instance;
	GmpcBrowsersNowplayingPrivate * priv;
};

struct _GmpcBrowsersNowplayingClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcToolsDatabaseUpdateTracker {
	GmpcPluginBase parent_instance;
	GmpcToolsDatabaseUpdateTrackerPrivate * priv;
};

struct _GmpcToolsDatabaseUpdateTrackerClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcToolsMetadataPrefetcher {
	GmpcPluginBase parent_instance;
	GmpcToolsMetadataPrefetcherPrivate * priv;
};

struct _GmpcToolsMetadataPrefetcherClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcToolsListstoreSort {
	GtkListStore parent_instance;
	GmpcToolsListstoreSortPrivate * priv;
};

struct _GmpcToolsListstoreSortClass {
	GtkListStoreClass parent_class;
};

struct _GmpcPluginPreferencesIfaceIface {
	GTypeInterface parent_iface;
	void (*preferences_pane_construct) (GmpcPluginPreferencesIface* self, GtkContainer* container);
	void (*preferences_pane_destroy) (GmpcPluginPreferencesIface* self, GtkContainer* container);
};

struct _GmpcToolsMetadataAppearance {
	GmpcPluginBase parent_instance;
	GmpcToolsMetadataAppearancePrivate * priv;
};

struct _GmpcToolsMetadataAppearanceClass {
	GmpcPluginBaseClass parent_class;
};

typedef void (*GmpcPluginMetaDataCallback) (GList* list, void* user_data);
struct _GmpcPluginMetaDataIfaceIface {
	GTypeInterface parent_iface;
	void (*get_metadata) (GmpcPluginMetaDataIface* self, const mpd_Song* song, MetaDataType type, GmpcPluginMetaDataCallback callback, void* callback_target);
	gint (*get_priority) (GmpcPluginMetaDataIface* self);
	void (*set_priority) (GmpcPluginMetaDataIface* self, gint priority);
};

struct _GmpcProviderMusicTree {
	GmpcPluginBase parent_instance;
	GmpcProviderMusicTreePrivate * priv;
};

struct _GmpcProviderMusicTreeClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcProviderHTBackdrops {
	GmpcPluginBase parent_instance;
	GmpcProviderHTBackdropsPrivate * priv;
};

struct _GmpcProviderHTBackdropsClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcProviderRenderCover {
	GmpcPluginBase parent_instance;
	GmpcProviderRenderCoverPrivate * priv;
};

struct _GmpcProviderRenderCoverClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcProviderLyrDB {
	GmpcPluginBase parent_instance;
	GmpcProviderLyrDBPrivate * priv;
};

struct _GmpcProviderLyrDBClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcProviderChartLyrics {
	GmpcPluginBase parent_instance;
	GmpcProviderChartLyricsPrivate * priv;
};

struct _GmpcProviderChartLyricsClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcConnection {
	GObject parent_instance;
	GmpcConnectionPrivate * priv;
};

struct _GmpcConnectionClass {
	GObjectClass parent_class;
};

struct _GmpcEasyCommand {
	GmpcPluginBase parent_instance;
	GmpcEasyCommandPrivate * priv;
	GtkListStore* store;
};

struct _GmpcEasyCommandClass {
	GmpcPluginBaseClass parent_class;
};

typedef void (*GmpcEasyCommandCallback) (void* data, const gchar* param, void* user_data);
struct _GmpcFavoritesList {
	GObject parent_instance;
	GmpcFavoritesListPrivate * priv;
};

struct _GmpcFavoritesListClass {
	GObjectClass parent_class;
};

struct _GmpcFavoritesButton {
	GtkEventBox parent_instance;
	GmpcFavoritesButtonPrivate * priv;
};

struct _GmpcFavoritesButtonClass {
	GtkEventBoxClass parent_class;
};

struct _GmpcMpdDataTreeviewTooltip {
	GtkWindow parent_instance;
	GmpcMpdDataTreeviewTooltipPrivate * priv;
	MetaDataType mtype;
	gchar* request_artist;
};

struct _GmpcMpdDataTreeviewTooltipClass {
	GtkWindowClass parent_class;
};

struct _GmpcPluginToolMenuIfaceIface {
	GTypeInterface parent_iface;
	gint (*tool_menu_integration) (GmpcPluginToolMenuIface* self, GtkMenu* menu);
};

struct _GmpcPluginIntegrateSearchIfaceIface {
	GTypeInterface parent_iface;
	gboolean (*field_supported) (GmpcPluginIntegrateSearchIface* self, mpd_TagItems tag);
	MpdData* (*search) (GmpcPluginIntegrateSearchIface* self, mpd_TagItems tag, const gchar* search_query);
};

struct _GmpcPluginSongListIfaceIface {
	GTypeInterface parent_iface;
	gint (*song_list) (GmpcPluginSongListIface* self, GtkWidget* tree, GtkMenu* menu);
};

struct _GmpcUrlFetchingGui {
	GObject parent_instance;
	GmpcUrlFetchingGuiPrivate * priv;
};

struct _GmpcUrlFetchingGuiClass {
	GObjectClass parent_class;
};

typedef void (*GmpcUrlFetchingGuiParseUrl) (GmpcUrlFetchingGui* gui, const gchar* url, void* user_data);
typedef gboolean (*GmpcUrlFetchingGuiValidateUrl) (GmpcUrlFetchingGui* gui, const gchar* url, void* user_data);
struct _GmpcMetaDataEditWindow {
	GtkWindow parent_instance;
	GmpcMetaDataEditWindowPrivate * priv;
};

struct _GmpcMetaDataEditWindowClass {
	GtkWindowClass parent_class;
};

struct _GmpcTestPlugin {
	GmpcPluginBase parent_instance;
	GmpcTestPluginPrivate * priv;
};

struct _GmpcTestPluginClass {
	GmpcPluginBaseClass parent_class;
};

struct _GmpcPanedSizeGroup {
	GObject parent_instance;
	GmpcPanedSizeGroupPrivate * priv;
};

struct _GmpcPanedSizeGroupClass {
	GObjectClass parent_class;
};


GType gmpc_widgets_volume_get_type (void) G_GNUC_CONST;
GmpcWidgetsVolume* gmpc_widgets_volume_new (void);
GmpcWidgetsVolume* gmpc_widgets_volume_construct (GType object_type);
gint gmpc_widgets_volume_get_volume_level (GmpcWidgetsVolume* self);
void gmpc_widgets_volume_set_volume_level (GmpcWidgetsVolume* self, gint value);
GType gmpc_progress_get_type (void) G_GNUC_CONST;
void gmpc_progress_set_time (GmpcProgress* self, guint total, guint current);
GmpcProgress* gmpc_progress_new (void);
GmpcProgress* gmpc_progress_construct (GType object_type);
gboolean gmpc_progress_get_hide_text (GmpcProgress* self);
void gmpc_progress_set_hide_text (GmpcProgress* self, gboolean value);
GType gmpc_widgets_qtable_get_type (void) G_GNUC_CONST;
GType gmpc_widgets_songlist_get_type (void) G_GNUC_CONST;
GmpcWidgetsSonglist* gmpc_widgets_songlist_new (void);
GmpcWidgetsSonglist* gmpc_widgets_songlist_construct (GType object_type);
void gmpc_widgets_songlist_set_from_data (GmpcWidgetsSonglist* self, MpdData* list, gboolean show_album, gboolean show_artist);
GType gmpc_clicklabel_get_type (void) G_GNUC_CONST;
GmpcClicklabel* gmpc_clicklabel_new (const gchar* value);
GmpcClicklabel* gmpc_clicklabel_construct (GType object_type, const gchar* value);
void gmpc_clicklabel_set_sensitive (GmpcClicklabel* self, gboolean sensitive_state);
gboolean gmpc_clicklabel_get_sensitive (GmpcClicklabel* self);
void gmpc_clicklabel_font_size (GmpcClicklabel* self, gint nsize);
void gmpc_clicklabel_set_ellipsize (GmpcClicklabel* self, PangoEllipsizeMode mode);
void gmpc_clicklabel_set_text (GmpcClicklabel* self, const gchar* value);
void gmpc_clicklabel_set_do_underline (GmpcClicklabel* self, gboolean val);
void gmpc_clicklabel_set_do_italic (GmpcClicklabel* self, gboolean val);
void gmpc_clicklabel_set_do_bold (GmpcClicklabel* self, gboolean val);
GType gmpc_meta_data_widgets_song_links_get_type (void) G_GNUC_CONST;
GType gmpc_meta_data_widgets_song_links_type_get_type (void) G_GNUC_CONST;
GmpcMetaDataWidgetsSongLinks* gmpc_meta_data_widgets_song_links_new (GmpcMetaDataWidgetsSongLinksType type, const mpd_Song* song);
GmpcMetaDataWidgetsSongLinks* gmpc_meta_data_widgets_song_links_construct (GType object_type, GmpcMetaDataWidgetsSongLinksType type, const mpd_Song* song);
GType gmpc_modification_type_get_type (void) G_GNUC_CONST;
GType gmpc_pixbuf_loader_async_get_type (void) G_GNUC_CONST;
void gmpc_pixbuf_loader_async_set_rref (GmpcPixbufLoaderAsync* self, const GtkTreeRowReference* rreference);
void gmpc_pixbuf_loader_async_set_from_file (GmpcPixbufLoaderAsync* self, const gchar* uri, gint req_width, gint req_height, GmpcModificationType border);
void gmpc_pixbuf_loader_async_cancel (GmpcPixbufLoaderAsync* self);
GmpcPixbufLoaderAsync* gmpc_pixbuf_loader_async_new (void);
GmpcPixbufLoaderAsync* gmpc_pixbuf_loader_async_construct (GType object_type);
GdkPixbuf* gmpc_pixbuf_loader_async_get_pixbuf (GmpcPixbufLoaderAsync* self);
void gmpc_pixbuf_loader_async_set_pixbuf (GmpcPixbufLoaderAsync* self, GdkPixbuf* value);
GType gmpc_meta_image_async_get_type (void) G_GNUC_CONST;
void gmpc_meta_image_async_set_from_file (GmpcMetaImageAsync* self, const gchar* uri, gint size, GmpcModificationType border);
void gmpc_meta_image_async_set_from_file_at_size (GmpcMetaImageAsync* self, const gchar* uri, gint width, gint height, GmpcModificationType border);
void gmpc_meta_image_async_clear_now (GmpcMetaImageAsync* self);
void gmpc_meta_image_async_set_pixbuf (GmpcMetaImageAsync* self, GdkPixbuf* pb);
GmpcMetaImageAsync* gmpc_meta_image_async_new (void);
GmpcMetaImageAsync* gmpc_meta_image_async_construct (GType object_type);
void advanced_settings (void);
GmpcWidgetsQtable* gmpc_widgets_qtable_new (void);
GmpcWidgetsQtable* gmpc_widgets_qtable_construct (GType object_type);
void gmpc_widgets_qtable_add_header (GmpcWidgetsQtable* self, GtkWidget* widget);
void gmpc_widgets_qtable_clear (GmpcWidgetsQtable* self);
gint gmpc_widgets_qtable_get_spacing (GmpcWidgetsQtable* self);
void gmpc_widgets_qtable_set_spacing (GmpcWidgetsQtable* self, gint value);
gint gmpc_widgets_qtable_get_max_columns (GmpcWidgetsQtable* self);
void gmpc_widgets_qtable_set_max_columns (GmpcWidgetsQtable* self, gint value);
gint gmpc_widgets_qtable_get_item_width (GmpcWidgetsQtable* self);
void gmpc_widgets_qtable_set_item_width (GmpcWidgetsQtable* self, gint value);
gint gmpc_widgets_qtable_get_item_height (GmpcWidgetsQtable* self);
void gmpc_widgets_qtable_set_item_height (GmpcWidgetsQtable* self, gint value);
gint gmpc_widgets_qtable_get_header_height (GmpcWidgetsQtable* self);
void gmpc_widgets_qtable_set_header_height (GmpcWidgetsQtable* self, gint value);
GType popup_menu_get_type (void) G_GNUC_CONST;
void popup_menu_popup (PopupMenu* self, GdkEventButton* event);
PopupMenu* popup_menu_new (void);
PopupMenu* popup_menu_construct (GType object_type);
GType gmpc_meta_data_widgets_text_label_get_type (void) G_GNUC_CONST;
GmpcMetaDataWidgetsTextLabel* gmpc_meta_data_widgets_text_label_new (const mpd_Song* song, MetaDataType type);
GmpcMetaDataWidgetsTextLabel* gmpc_meta_data_widgets_text_label_construct (GType object_type, const mpd_Song* song, MetaDataType type);
GType gmpc_meta_data_widgets_similar_songs_get_type (void) G_GNUC_CONST;
GmpcMetaDataWidgetsSimilarSongs* gmpc_meta_data_widgets_similar_songs_new (const mpd_Song* song);
GmpcMetaDataWidgetsSimilarSongs* gmpc_meta_data_widgets_similar_songs_construct (GType object_type, const mpd_Song* song);
void gmpc_meta_data_widgets_similar_songs_update (GmpcMetaDataWidgetsSimilarSongs* self);
GType gmpc_meta_data_widgets_similar_artists_get_type (void) G_GNUC_CONST;
GtkWidget* gmpc_meta_data_widgets_similar_artists_new_artist_button (GmpcMetaDataWidgetsSimilarArtists* self, const gchar* artist, gboolean in_db);
void gmpc_meta_data_widgets_similar_artists_first_show (GmpcMetaDataWidgetsSimilarArtists* self);
GmpcMetaDataWidgetsSimilarArtists* gmpc_meta_data_widgets_similar_artists_new (MpdObj* server, const mpd_Song* song);
GmpcMetaDataWidgetsSimilarArtists* gmpc_meta_data_widgets_similar_artists_construct (GType object_type, MpdObj* server, const mpd_Song* song);
GType gmpc_plugin_base_get_type (void) G_GNUC_CONST;
GType gmpc_plugin_browser_iface_get_type (void) G_GNUC_CONST;
GType gmpc_browsers_metadata_get_type (void) G_GNUC_CONST;
GtkWidget* gmpc_browsers_metadata_metadata_box_show_song (GmpcBrowsersMetadata* self, const mpd_Song* song, gboolean show_controls);
void gmpc_browsers_metadata_set_base (GmpcBrowsersMetadata* self);
void gmpc_browsers_metadata_set_artist (GmpcBrowsersMetadata* self, const gchar* artist);
void gmpc_browsers_metadata_set_album (GmpcBrowsersMetadata* self, const gchar* artist, const gchar* album);
void gmpc_browsers_metadata_set_song (GmpcBrowsersMetadata* self, const mpd_Song* song);
void gmpc_browsers_metadata_select_browser (GmpcBrowsersMetadata* self, GtkTreeView* tree);
GmpcBrowsersMetadata* gmpc_browsers_metadata_new (void);
GmpcBrowsersMetadata* gmpc_browsers_metadata_construct (GType object_type);
GType gmpc_browsers_nowplaying_get_type (void) G_GNUC_CONST;
void gmpc_browsers_nowplaying_select_now_playing_browser (GmpcBrowsersNowplaying* self);
GmpcBrowsersNowplaying* gmpc_browsers_nowplaying_new (void);
GmpcBrowsersNowplaying* gmpc_browsers_nowplaying_construct (GType object_type);
GType gmpc_tools_database_update_tracker_get_type (void) G_GNUC_CONST;
GmpcToolsDatabaseUpdateTracker* gmpc_tools_database_update_tracker_new (void);
GmpcToolsDatabaseUpdateTracker* gmpc_tools_database_update_tracker_construct (GType object_type);
GType gmpc_tools_metadata_prefetcher_get_type (void) G_GNUC_CONST;
GmpcToolsMetadataPrefetcher* gmpc_tools_metadata_prefetcher_new (void);
GmpcToolsMetadataPrefetcher* gmpc_tools_metadata_prefetcher_construct (GType object_type);
GType gmpc_tools_liststore_sort_get_type (void) G_GNUC_CONST;
GmpcToolsListstoreSort* gmpc_tools_liststore_sort_new (void);
GmpcToolsListstoreSort* gmpc_tools_liststore_sort_construct (GType object_type);
GType gmpc_plugin_preferences_iface_get_type (void) G_GNUC_CONST;
GType gmpc_tools_metadata_appearance_get_type (void) G_GNUC_CONST;
void gmpc_tools_metadata_appearance_on_checkbutton_show_lyrics_toggled (GtkCheckButton* source);
void gmpc_tools_metadata_appearance_on_checkbutton_show_artist_information_toggled (GtkCheckButton* source);
void gmpc_tools_metadata_appearance_on_checkbutton_show_web_links_toggled (GtkCheckButton* source);
void gmpc_tools_metadata_appearance_on_checkbutton_show_similar_artists_toggled (GtkCheckButton* source);
void gmpc_tools_metadata_appearance_on_checkbutton_show_similar_songs_toggled (GtkCheckButton* source);
void gmpc_tools_metadata_appearance_on_checkbutton_show_guitar_tabs_toggled (GtkCheckButton* source);
GmpcToolsMetadataAppearance* gmpc_tools_metadata_appearance_new (void);
GmpcToolsMetadataAppearance* gmpc_tools_metadata_appearance_construct (GType object_type);
GType gmpc_plugin_meta_data_iface_get_type (void) G_GNUC_CONST;
GType gmpc_provider_music_tree_get_type (void) G_GNUC_CONST;
GmpcProviderMusicTree* gmpc_provider_music_tree_new (void);
GmpcProviderMusicTree* gmpc_provider_music_tree_construct (GType object_type);
GType gmpc_provider_ht_backdrops_get_type (void) G_GNUC_CONST;
GmpcProviderHTBackdrops* gmpc_provider_ht_backdrops_new (void);
GmpcProviderHTBackdrops* gmpc_provider_ht_backdrops_construct (GType object_type);
GType gmpc_provider_render_cover_get_type (void) G_GNUC_CONST;
#define GMPC_PROVIDER_RENDER_COVER_album_size 400
GmpcProviderRenderCover* gmpc_provider_render_cover_new (void);
GmpcProviderRenderCover* gmpc_provider_render_cover_construct (GType object_type);
GType gmpc_provider_lyr_db_get_type (void) G_GNUC_CONST;
GmpcProviderLyrDB* gmpc_provider_lyr_db_new (void);
GmpcProviderLyrDB* gmpc_provider_lyr_db_construct (GType object_type);
GType gmpc_provider_chart_lyrics_get_type (void) G_GNUC_CONST;
GmpcProviderChartLyrics* gmpc_provider_chart_lyrics_new (void);
GmpcProviderChartLyrics* gmpc_provider_chart_lyrics_construct (GType object_type);
GType gmpc_connection_get_type (void) G_GNUC_CONST;
GmpcConnection* gmpc_connection_new (void);
GmpcConnection* gmpc_connection_construct (GType object_type);
GType gmpc_easy_command_get_type (void) G_GNUC_CONST;
gboolean gmpc_easy_command_completion_function (GtkEntryCompletion* comp, const gchar* key, GtkTreeIter* iter);
guint gmpc_easy_command_add_entry (GmpcEasyCommand* self, const gchar* name, const gchar* pattern, const gchar* hint, GmpcEasyCommandCallback* callback, void* userdata);
guint gmpc_easy_command_add_entry_stock_id (GmpcEasyCommand* self, const gchar* name, const gchar* pattern, const gchar* hint, GmpcEasyCommandCallback* callback, void* userdata, const gchar* icon);
guint gmpc_easy_command_add_entry_icon_name (GmpcEasyCommand* self, const gchar* name, const gchar* pattern, const gchar* hint, GmpcEasyCommandCallback* callback, void* userdata, const gchar* icon);
void gmpc_easy_command_do_query (GmpcEasyCommand* self, const gchar* value_unsplit);
void gmpc_easy_command_popup_destroy (GmpcEasyCommand* self);
void gmpc_easy_command_popup (GmpcEasyCommand* self);
void gmpc_easy_command_help_window_destroy (GtkDialog* window, gint response);
void gmpc_easy_command_help_window (void* data, const gchar* param);
GmpcEasyCommand* gmpc_easy_command_new (void);
GmpcEasyCommand* gmpc_easy_command_construct (GType object_type);
GType gmpc_favorites_list_get_type (void) G_GNUC_CONST;
extern GmpcFavoritesList* favorites;
gboolean gmpc_favorites_list_is_favorite (GmpcFavoritesList* self, const gchar* path);
void gmpc_favorites_list_set_favorite (GmpcFavoritesList* self, const gchar* path, gboolean favorite);
GmpcFavoritesList* gmpc_favorites_list_new (void);
GmpcFavoritesList* gmpc_favorites_list_construct (GType object_type);
gboolean gmpc_favorites_list_get_disable (GmpcFavoritesList* self);
void gmpc_favorites_list_set_disable (GmpcFavoritesList* self, gboolean value);
GType gmpc_favorites_button_get_type (void) G_GNUC_CONST;
void gmpc_favorites_button_set_song (GmpcFavoritesButton* self, const mpd_Song* song);
GmpcFavoritesButton* gmpc_favorites_button_new (void);
GmpcFavoritesButton* gmpc_favorites_button_construct (GType object_type);
GType gmpc_mpd_data_treeview_tooltip_get_type (void) G_GNUC_CONST;
GmpcMpdDataTreeviewTooltip* gmpc_mpd_data_treeview_tooltip_new (GtkTreeView* pw, MetaDataType type);
GmpcMpdDataTreeviewTooltip* gmpc_mpd_data_treeview_tooltip_construct (GType object_type, GtkTreeView* pw, MetaDataType type);
gint* gmpc_plugin_base_get_version (GmpcPluginBase* self, int* result_length1);
const gchar* gmpc_plugin_base_get_name (GmpcPluginBase* self);
void gmpc_plugin_base_save_yourself (GmpcPluginBase* self);
gboolean gmpc_plugin_base_get_enabled (GmpcPluginBase* self);
void gmpc_plugin_base_set_enabled (GmpcPluginBase* self, gboolean state);
GmpcPluginBase* gmpc_plugin_base_construct (GType object_type);
GType gmpc_plugin_tool_menu_iface_get_type (void) G_GNUC_CONST;
gint gmpc_plugin_tool_menu_iface_tool_menu_integration (GmpcPluginToolMenuIface* self, GtkMenu* menu);
void gmpc_plugin_meta_data_iface_get_metadata (GmpcPluginMetaDataIface* self, const mpd_Song* song, MetaDataType type, GmpcPluginMetaDataCallback callback, void* callback_target);
gint gmpc_plugin_meta_data_iface_get_priority (GmpcPluginMetaDataIface* self);
void gmpc_plugin_meta_data_iface_set_priority (GmpcPluginMetaDataIface* self, gint priority);
void gmpc_plugin_browser_iface_browser_add (GmpcPluginBrowserIface* self, GtkWidget* category_tree);
void gmpc_plugin_browser_iface_browser_selected (GmpcPluginBrowserIface* self, GtkContainer* container);
void gmpc_plugin_browser_iface_browser_unselected (GmpcPluginBrowserIface* self, GtkContainer* container);
gint gmpc_plugin_browser_iface_browser_option_menu (GmpcPluginBrowserIface* self, GtkMenu* menu);
gint gmpc_plugin_browser_iface_browser_add_go_menu (GmpcPluginBrowserIface* self, GtkMenu* menu);
GType gmpc_plugin_integrate_search_iface_get_type (void) G_GNUC_CONST;
gboolean gmpc_plugin_integrate_search_iface_field_supported (GmpcPluginIntegrateSearchIface* self, mpd_TagItems tag);
MpdData* gmpc_plugin_integrate_search_iface_search (GmpcPluginIntegrateSearchIface* self, mpd_TagItems tag, const gchar* search_query);
void gmpc_plugin_preferences_iface_preferences_pane_construct (GmpcPluginPreferencesIface* self, GtkContainer* container);
void gmpc_plugin_preferences_iface_preferences_pane_destroy (GmpcPluginPreferencesIface* self, GtkContainer* container);
GType gmpc_plugin_song_list_iface_get_type (void) G_GNUC_CONST;
gint gmpc_plugin_song_list_iface_song_list (GmpcPluginSongListIface* self, GtkWidget* tree, GtkMenu* menu);
GType gmpc_url_fetching_gui_get_type (void) G_GNUC_CONST;
GmpcUrlFetchingGui* gmpc_url_fetching_gui_new (GmpcUrlFetchingGuiParseUrl parse_callback, void* parse_callback_target, GmpcUrlFetchingGuiValidateUrl validate_callback, void* validate_callback_target, GDestroyNotify destroy_cb);
GmpcUrlFetchingGui* gmpc_url_fetching_gui_construct (GType object_type, GmpcUrlFetchingGuiParseUrl parse_callback, void* parse_callback_target, GmpcUrlFetchingGuiValidateUrl validate_callback, void* validate_callback_target, GDestroyNotify destroy_cb);
void gmpc_url_fetching_gui_set_processing (GmpcUrlFetchingGui* self);
void gmpc_url_fetching_gui_set_progress (GmpcUrlFetchingGui* self, gdouble progress);
void gmpc_url_fetching_gui_set_completed (GmpcUrlFetchingGui* self);
void gmpc_url_fetching_gui_set_error (GmpcUrlFetchingGui* self, const gchar* error_message);
GType gmpc_meta_data_edit_window_get_type (void) G_GNUC_CONST;
void gmpc_meta_data_edit_window_image_downloaded (GmpcMetaDataEditWindow* self, const GEADAsyncHandler* handle, GEADStatus status, void* p);
void gmpc_meta_data_edit_window_callback (GmpcMetaDataEditWindow* self, void* handle, const gchar* plugin_name, GList* list);
void gmpc_meta_data_edit_window_store_image (GmpcMetaDataEditWindow* self, const GEADAsyncHandler* handle, GEADStatus status);
void gmpc_meta_data_edit_window_destroy_popup (GmpcMetaDataEditWindow* self, GtkButton* button);
void gmpc_meta_data_edit_window_refresh_query (GmpcMetaDataEditWindow* self, GtkButton* button);
GmpcMetaDataEditWindow* gmpc_meta_data_edit_window_new (const mpd_Song* song, MetaDataType type);
GmpcMetaDataEditWindow* gmpc_meta_data_edit_window_construct (GType object_type, const mpd_Song* song, MetaDataType type);
void gmpc_meta_data_edit_window_b_cancel (GmpcMetaDataEditWindow* self);
GType gmpc_test_plugin_get_type (void) G_GNUC_CONST;
void gmpc_test_plugin_menu_activated_album (GmpcTestPlugin* self, GtkMenuItem* item);
GmpcTestPlugin* gmpc_test_plugin_new (void);
GmpcTestPlugin* gmpc_test_plugin_construct (GType object_type);
GType gmpc_paned_size_group_get_type (void) G_GNUC_CONST;
GmpcPanedSizeGroup* gmpc_paned_size_group_new (void);
GmpcPanedSizeGroup* gmpc_paned_size_group_construct (GType object_type);
void gmpc_paned_size_group_add_paned (GmpcPanedSizeGroup* self, GtkPaned* paned);


G_END_DECLS

#endif
